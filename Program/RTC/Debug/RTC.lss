
RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000449e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  00800060  0000449e  00004532  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800104  00800104  000045d6  2**0
                  ALLOC
  3 .stab         00004170  00000000  00000000  000045d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001961  00000000  00000000  00008748  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a0a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a1e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a359  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bfa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ce8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000dc3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000dd9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e029  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e7f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__vector_4>
      14:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__vector_10>
      2c:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e0       	ldi	r26, 0x04	; 4
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 31       	cpi	r26, 0x14	; 20
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <main>
      8a:	0c 94 4d 22 	jmp	0x449a	; 0x449a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 16 22 	jmp	0x442c	; 0x442c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e9       	ldi	r26, 0x97	; 151
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 32 22 	jmp	0x4464	; 0x4464 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 22 22 	jmp	0x4444	; 0x4444 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3e 22 	jmp	0x447c	; 0x447c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 22 22 	jmp	0x4444	; 0x4444 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3e 22 	jmp	0x447c	; 0x447c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 16 22 	jmp	0x442c	; 0x442c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e9       	ldi	r24, 0x97	; 151
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 32 22 	jmp	0x4464	; 0x4464 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 22 22 	jmp	0x4444	; 0x4444 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3e 22 	jmp	0x447c	; 0x447c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 22 22 	jmp	0x4444	; 0x4444 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3e 22 	jmp	0x447c	; 0x447c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 22 22 	jmp	0x4444	; 0x4444 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3e 22 	jmp	0x447c	; 0x447c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 26 22 	jmp	0x444c	; 0x444c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 42 22 	jmp	0x4484	; 0x4484 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIM2_voidInit>:

pf TIM2_pfOVFCallBack;
pf TIM2_pfCmpCallBack;

void TIM2_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*selct timer mode*/
#if TIM2_MODE == TIM2_NORMAL
	CLR_BIT(TCCR2,6);
     b4e:	a5 e4       	ldi	r26, 0x45	; 69
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e5 e4       	ldi	r30, 0x45	; 69
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 7b       	andi	r24, 0xBF	; 191
     b5a:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,3);
     b5c:	a5 e4       	ldi	r26, 0x45	; 69
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e5 e4       	ldi	r30, 0x45	; 69
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	87 7f       	andi	r24, 0xF7	; 247
     b68:	8c 93       	st	X, r24

#endif

	/*selct wave form on oco pin */
#if	TIM2_WAVE == TIM2_TOGL_OC0
	SET_BIT(TCCR2,4);
     b6a:	a5 e4       	ldi	r26, 0x45	; 69
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e5 e4       	ldi	r30, 0x45	; 69
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 61       	ori	r24, 0x10	; 16
     b76:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,5);
     b78:	a5 e4       	ldi	r26, 0x45	; 69
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e5 e4       	ldi	r30, 0x45	; 69
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7d       	andi	r24, 0xDF	; 223
     b84:	8c 93       	st	X, r24
#else
	CLR_BIT(TCCR2,4);
	CLR_BIT(TCCR2,5);
#endif

}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <TIM2_voidEnable>:


void TIM2_voidEnable(uint8 u8PreScaler)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	0f 92       	push	r0
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	89 83       	std	Y+1, r24	; 0x01

	TCCR2&=0b11111000;
     b98:	a5 e4       	ldi	r26, 0x45	; 69
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e5 e4       	ldi	r30, 0x45	; 69
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	88 7f       	andi	r24, 0xF8	; 248
     ba4:	8c 93       	st	X, r24
	//& 0b00000111 --> to prevent the user  to entermore than 111 in bits 0,1,2

	TCCR2|= (u8PreScaler & 0b00000111);
     ba6:	a5 e4       	ldi	r26, 0x45	; 69
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e5 e4       	ldi	r30, 0x45	; 69
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	98 2f       	mov	r25, r24
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	87 70       	andi	r24, 0x07	; 7
     bb6:	89 2b       	or	r24, r25
     bb8:	8c 93       	st	X, r24
}
     bba:	0f 90       	pop	r0
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	08 95       	ret

00000bc2 <TIM2_voidDisable>:

void TIM2_voidDisable(void)
{
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
	TCCR2&=0b11111000;
     bca:	a5 e4       	ldi	r26, 0x45	; 69
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e5 e4       	ldi	r30, 0x45	; 69
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	88 7f       	andi	r24, 0xF8	; 248
     bd6:	8c 93       	st	X, r24
}
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <TIM2_voidEnableOvfINt>:

void TIM2_voidEnableOvfINt(void)
{
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,6);
     be6:	a9 e5       	ldi	r26, 0x59	; 89
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e9 e5       	ldi	r30, 0x59	; 89
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	80 64       	ori	r24, 0x40	; 64
     bf2:	8c 93       	st	X, r24

}
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <TIM2_voidDisableOvfINt>:

void TIM2_voidDisableOvfINt(void)
{
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,6);
     c02:	a9 e5       	ldi	r26, 0x59	; 89
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e9 e5       	ldi	r30, 0x59	; 89
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	8f 7b       	andi	r24, 0xBF	; 191
     c0e:	8c 93       	st	X, r24

}
     c10:	cf 91       	pop	r28
     c12:	df 91       	pop	r29
     c14:	08 95       	ret

00000c16 <TIM2_voidEnableComparINt>:

void TIM2_voidEnableComparINt(void)
{
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,7);
     c1e:	a9 e5       	ldi	r26, 0x59	; 89
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e9 e5       	ldi	r30, 0x59	; 89
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	80 68       	ori	r24, 0x80	; 128
     c2a:	8c 93       	st	X, r24

}
     c2c:	cf 91       	pop	r28
     c2e:	df 91       	pop	r29
     c30:	08 95       	ret

00000c32 <TIM2_voidDisableCompareINt>:

void TIM2_voidDisableCompareINt(void)
{
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,7);
     c3a:	a9 e5       	ldi	r26, 0x59	; 89
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e9 e5       	ldi	r30, 0x59	; 89
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	8f 77       	andi	r24, 0x7F	; 127
     c46:	8c 93       	st	X, r24
}
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <TIM2_voidSetCallBackOvfInt>:

void TIM2_voidSetCallBackOvfInt(pf pfOvfcallBack)
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	00 d0       	rcall	.+0      	; 0xc54 <TIM2_voidSetCallBackOvfInt+0x6>
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	9a 83       	std	Y+2, r25	; 0x02
     c5a:	89 83       	std	Y+1, r24	; 0x01
	TIM2_pfOVFCallBack=pfOvfcallBack;
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	9a 81       	ldd	r25, Y+2	; 0x02
     c60:	90 93 0a 01 	sts	0x010A, r25
     c64:	80 93 09 01 	sts	0x0109, r24
}
     c68:	0f 90       	pop	r0
     c6a:	0f 90       	pop	r0
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <TIM2_voidSetCallBackCompareInt>:

void TIM2_voidSetCallBackCompareInt(pf pfComcallBack)
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	00 d0       	rcall	.+0      	; 0xc78 <TIM2_voidSetCallBackCompareInt+0x6>
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	9a 83       	std	Y+2, r25	; 0x02
     c7e:	89 83       	std	Y+1, r24	; 0x01
	TIM2_pfCmpCallBack=pfComcallBack;
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	90 93 08 01 	sts	0x0108, r25
     c88:	80 93 07 01 	sts	0x0107, r24
}
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <TIM2_voidSetTCNTValue>:

void TIM2_voidSetTCNTValue(uint8 u8TcntReg)
{
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	0f 92       	push	r0
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = u8TcntReg;
     ca2:	e4 e4       	ldi	r30, 0x44	; 68
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	80 83       	st	Z, r24
}
     caa:	0f 90       	pop	r0
     cac:	cf 91       	pop	r28
     cae:	df 91       	pop	r29
     cb0:	08 95       	ret

00000cb2 <TIM2_voidSetOCRValue>:

void TIM2_voidSetOCRValue(uint8 u8OcrReg)
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	0f 92       	push	r0
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = u8OcrReg;
     cbe:	e3 e4       	ldi	r30, 0x43	; 67
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	80 83       	st	Z, r24
}
     cc6:	0f 90       	pop	r0
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <TIM2_u8ReadTcntReg>:

uint8 TIM2_u8ReadTcntReg(void)
{
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
     cd6:	e4 e4       	ldi	r30, 0x44	; 68
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
}
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <TIM2_voidExtClkEnable>:

void TIM2_voidExtClkEnable(void)
{
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ASSR,3);
     cea:	a2 e4       	ldi	r26, 0x42	; 66
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e2 e4       	ldi	r30, 0x42	; 66
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	88 60       	ori	r24, 0x08	; 8
     cf6:	8c 93       	st	X, r24
}
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <TIM2_voidExtClkDisable>:

void TIM2_voidExtClkDisable(void)
{
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ASSR,3);
     d06:	a2 e4       	ldi	r26, 0x42	; 66
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e2 e4       	ldi	r30, 0x42	; 66
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	87 7f       	andi	r24, 0xF7	; 247
     d12:	8c 93       	st	X, r24
}
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <TIM2_voidChangMode>:

void TIM2_voidChangMode(uint8 u8Mode)
{}
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	0f 92       	push	r0
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	89 83       	std	Y+1, r24	; 0x01
     d26:	0f 90       	pop	r0
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <__vector_5>:


void __vector_5  (void)  __attribute__ ((signal,used));

void __vector_5  (void)
{
     d2e:	1f 92       	push	r1
     d30:	0f 92       	push	r0
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	0f 92       	push	r0
     d36:	11 24       	eor	r1, r1
     d38:	2f 93       	push	r18
     d3a:	3f 93       	push	r19
     d3c:	4f 93       	push	r20
     d3e:	5f 93       	push	r21
     d40:	6f 93       	push	r22
     d42:	7f 93       	push	r23
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
     d48:	af 93       	push	r26
     d4a:	bf 93       	push	r27
     d4c:	ef 93       	push	r30
     d4e:	ff 93       	push	r31
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
	TIM2_pfOVFCallBack();
     d58:	e0 91 09 01 	lds	r30, 0x0109
     d5c:	f0 91 0a 01 	lds	r31, 0x010A
     d60:	09 95       	icall
}
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	ff 91       	pop	r31
     d68:	ef 91       	pop	r30
     d6a:	bf 91       	pop	r27
     d6c:	af 91       	pop	r26
     d6e:	9f 91       	pop	r25
     d70:	8f 91       	pop	r24
     d72:	7f 91       	pop	r23
     d74:	6f 91       	pop	r22
     d76:	5f 91       	pop	r21
     d78:	4f 91       	pop	r20
     d7a:	3f 91       	pop	r19
     d7c:	2f 91       	pop	r18
     d7e:	0f 90       	pop	r0
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	0f 90       	pop	r0
     d84:	1f 90       	pop	r1
     d86:	18 95       	reti

00000d88 <__vector_4>:

/* COM ISR */
void __vector_4  (void)  __attribute__ ((signal,used));

void __vector_4  (void)
{
     d88:	1f 92       	push	r1
     d8a:	0f 92       	push	r0
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	0f 92       	push	r0
     d90:	11 24       	eor	r1, r1
     d92:	2f 93       	push	r18
     d94:	3f 93       	push	r19
     d96:	4f 93       	push	r20
     d98:	5f 93       	push	r21
     d9a:	6f 93       	push	r22
     d9c:	7f 93       	push	r23
     d9e:	8f 93       	push	r24
     da0:	9f 93       	push	r25
     da2:	af 93       	push	r26
     da4:	bf 93       	push	r27
     da6:	ef 93       	push	r30
     da8:	ff 93       	push	r31
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
	TIM2_pfCmpCallBack();
     db2:	e0 91 07 01 	lds	r30, 0x0107
     db6:	f0 91 08 01 	lds	r31, 0x0108
     dba:	09 95       	icall
}
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	ff 91       	pop	r31
     dc2:	ef 91       	pop	r30
     dc4:	bf 91       	pop	r27
     dc6:	af 91       	pop	r26
     dc8:	9f 91       	pop	r25
     dca:	8f 91       	pop	r24
     dcc:	7f 91       	pop	r23
     dce:	6f 91       	pop	r22
     dd0:	5f 91       	pop	r21
     dd2:	4f 91       	pop	r20
     dd4:	3f 91       	pop	r19
     dd6:	2f 91       	pop	r18
     dd8:	0f 90       	pop	r0
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	0f 90       	pop	r0
     dde:	1f 90       	pop	r1
     de0:	18 95       	reti

00000de2 <TIM0_voidInit>:

pf TIM0_pfOVFCallBack;
pf TIM0_pfCmpCallBack;

void TIM0_voidInit(void)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
#if TIMO_MODE == TIM0_NORMAL
	CLR_BIT(TCCR0,6);
	CLR_BIT(TCCR0,3);

#elif TIMO_MODE == TIM0_CTC
	CLR_BIT(TCCR0,6);
     dea:	a3 e5       	ldi	r26, 0x53	; 83
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e3 e5       	ldi	r30, 0x53	; 83
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	8f 7b       	andi	r24, 0xBF	; 191
     df6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
     df8:	a3 e5       	ldi	r26, 0x53	; 83
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e3 e5       	ldi	r30, 0x53	; 83
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	88 60       	ori	r24, 0x08	; 8
     e04:	8c 93       	st	X, r24

#endif

	/*selct wave form on oco pin */
#if	TIMO_WAVE == TIM0_TOGL_OC0
	SET_BIT(TCCR0,4);
     e06:	a3 e5       	ldi	r26, 0x53	; 83
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e3 e5       	ldi	r30, 0x53	; 83
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	80 61       	ori	r24, 0x10	; 16
     e12:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,5);
     e14:	a3 e5       	ldi	r26, 0x53	; 83
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e3 e5       	ldi	r30, 0x53	; 83
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	8f 7d       	andi	r24, 0xDF	; 223
     e20:	8c 93       	st	X, r24
#else
	CLR_BIT(TCCR0,4);
	CLR_BIT(TCCR0,5);
#endif

}
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <TIM0_voidEnable>:


void TIM0_voidEnable(uint8 u8PreScaler)
{
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	0f 92       	push	r0
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	89 83       	std	Y+1, r24	; 0x01

	TCCR0&=0b11111000;
     e34:	a3 e5       	ldi	r26, 0x53	; 83
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e3 e5       	ldi	r30, 0x53	; 83
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	88 7f       	andi	r24, 0xF8	; 248
     e40:	8c 93       	st	X, r24
	//& 0b00000111 --> to prevent the user  to entermore than 111 in bits 0,1,2

	TCCR0|= (u8PreScaler & 0b00000111);
     e42:	a3 e5       	ldi	r26, 0x53	; 83
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e3 e5       	ldi	r30, 0x53	; 83
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	98 2f       	mov	r25, r24
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	87 70       	andi	r24, 0x07	; 7
     e52:	89 2b       	or	r24, r25
     e54:	8c 93       	st	X, r24

}
     e56:	0f 90       	pop	r0
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <TIM0_voidDisable>:
void TIM0_voidDisable(void)
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
	TCCR0&=0b11111000;
     e66:	a3 e5       	ldi	r26, 0x53	; 83
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e3 e5       	ldi	r30, 0x53	; 83
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	88 7f       	andi	r24, 0xF8	; 248
     e72:	8c 93       	st	X, r24
}
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <TIM0_voidEnableOvfINt>:
void TIM0_voidEnableOvfINt(void)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
     e82:	a9 e5       	ldi	r26, 0x59	; 89
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e9 e5       	ldi	r30, 0x59	; 89
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	81 60       	ori	r24, 0x01	; 1
     e8e:	8c 93       	st	X, r24

}
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <TIM0_voidDisableOvfINt>:
void TIM0_voidDisableOvfINt(void)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
     e9e:	a9 e5       	ldi	r26, 0x59	; 89
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e9 e5       	ldi	r30, 0x59	; 89
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	8e 7f       	andi	r24, 0xFE	; 254
     eaa:	8c 93       	st	X, r24

}
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <TIM0_voidEnableComparINt>:
void TIM0_voidEnableComparINt(void)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
     eba:	a9 e5       	ldi	r26, 0x59	; 89
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e9 e5       	ldi	r30, 0x59	; 89
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	82 60       	ori	r24, 0x02	; 2
     ec6:	8c 93       	st	X, r24

}
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <TIM0_voidDisableCompareINt>:
void TIM0_voidDisableCompareINt(void)
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
     ed6:	a9 e5       	ldi	r26, 0x59	; 89
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e9 e5       	ldi	r30, 0x59	; 89
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	8d 7f       	andi	r24, 0xFD	; 253
     ee2:	8c 93       	st	X, r24
}
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <TIM0_voidSetCallBackOvfInt>:

void TIM0_voidSetCallBackOvfInt(pf pfOvfcallBack)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <TIM0_voidSetCallBackOvfInt+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	9a 83       	std	Y+2, r25	; 0x02
     ef6:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfOVFCallBack=pfOvfcallBack;
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	90 93 0c 01 	sts	0x010C, r25
     f00:	80 93 0b 01 	sts	0x010B, r24
}
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <TIM0_voidSetCallBackCompareInt>:

void TIM0_voidSetCallBackCompareInt(pf pfComcallBack)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <TIM0_voidSetCallBackCompareInt+0x6>
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfCmpCallBack=pfComcallBack;
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	9a 81       	ldd	r25, Y+2	; 0x02
     f20:	90 93 0e 01 	sts	0x010E, r25
     f24:	80 93 0d 01 	sts	0x010D, r24
}
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <TIM0_voidSetTCNTValue>:

void TIM0_voidSetTCNTValue(uint8 u8TcntReg)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	0f 92       	push	r0
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8TcntReg;
     f3e:	e2 e5       	ldi	r30, 0x52	; 82
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	80 83       	st	Z, r24
}
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <TIM0_voidSetOCRValue>:

void TIM0_voidSetOCRValue(uint8 u8OcrReg)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8OcrReg;
     f5a:	ec e5       	ldi	r30, 0x5C	; 92
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	80 83       	st	Z, r24
}
     f62:	0f 90       	pop	r0
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <TIM0_u8ReadTcntReg>:

uint8 TIM0_u8ReadTcntReg(void)
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
     f72:	e2 e5       	ldi	r30, 0x52	; 82
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <TIM0_voidChangMode>:

void TIM0_voidChangMode(uint8 u8Mode)
{}
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	0f 92       	push	r0
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	89 83       	std	Y+1, r24	; 0x01
     f8a:	0f 90       	pop	r0
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <__vector_11>:


void __vector_11  (void)  __attribute__ ((signal,used));

void __vector_11  (void)
{
     f92:	1f 92       	push	r1
     f94:	0f 92       	push	r0
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	0f 92       	push	r0
     f9a:	11 24       	eor	r1, r1
     f9c:	2f 93       	push	r18
     f9e:	3f 93       	push	r19
     fa0:	4f 93       	push	r20
     fa2:	5f 93       	push	r21
     fa4:	6f 93       	push	r22
     fa6:	7f 93       	push	r23
     fa8:	8f 93       	push	r24
     faa:	9f 93       	push	r25
     fac:	af 93       	push	r26
     fae:	bf 93       	push	r27
     fb0:	ef 93       	push	r30
     fb2:	ff 93       	push	r31
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	TIM0_pfOVFCallBack();
     fbc:	e0 91 0b 01 	lds	r30, 0x010B
     fc0:	f0 91 0c 01 	lds	r31, 0x010C
     fc4:	09 95       	icall
}
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	ff 91       	pop	r31
     fcc:	ef 91       	pop	r30
     fce:	bf 91       	pop	r27
     fd0:	af 91       	pop	r26
     fd2:	9f 91       	pop	r25
     fd4:	8f 91       	pop	r24
     fd6:	7f 91       	pop	r23
     fd8:	6f 91       	pop	r22
     fda:	5f 91       	pop	r21
     fdc:	4f 91       	pop	r20
     fde:	3f 91       	pop	r19
     fe0:	2f 91       	pop	r18
     fe2:	0f 90       	pop	r0
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	0f 90       	pop	r0
     fe8:	1f 90       	pop	r1
     fea:	18 95       	reti

00000fec <__vector_10>:

/* COM ISR */
void __vector_10  (void)  __attribute__ ((signal,used));

void __vector_10  (void)
{
     fec:	1f 92       	push	r1
     fee:	0f 92       	push	r0
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	0f 92       	push	r0
     ff4:	11 24       	eor	r1, r1
     ff6:	2f 93       	push	r18
     ff8:	3f 93       	push	r19
     ffa:	4f 93       	push	r20
     ffc:	5f 93       	push	r21
     ffe:	6f 93       	push	r22
    1000:	7f 93       	push	r23
    1002:	8f 93       	push	r24
    1004:	9f 93       	push	r25
    1006:	af 93       	push	r26
    1008:	bf 93       	push	r27
    100a:	ef 93       	push	r30
    100c:	ff 93       	push	r31
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
	TIM0_pfCmpCallBack();
    1016:	e0 91 0d 01 	lds	r30, 0x010D
    101a:	f0 91 0e 01 	lds	r31, 0x010E
    101e:	09 95       	icall
}
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	ff 91       	pop	r31
    1026:	ef 91       	pop	r30
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	7f 91       	pop	r23
    1032:	6f 91       	pop	r22
    1034:	5f 91       	pop	r21
    1036:	4f 91       	pop	r20
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	0f 90       	pop	r0
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	0f 90       	pop	r0
    1042:	1f 90       	pop	r1
    1044:	18 95       	reti

00001046 <GIE_voidEnable>:
#include"GIE_priv.h"



void GIE_voidEnable(void)
{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,INTEURRPT_PIN);
    104e:	af e5       	ldi	r26, 0x5F	; 95
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	ef e5       	ldi	r30, 0x5F	; 95
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	80 68       	ori	r24, 0x80	; 128
    105a:	8c 93       	st	X, r24
}
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <GIE_voidDisable>:


void GIE_voidDisable(void)
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,INTEURRPT_PIN);
    106a:	af e5       	ldi	r26, 0x5F	; 95
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	ef e5       	ldi	r30, 0x5F	; 95
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	8f 77       	andi	r24, 0x7F	; 127
    1076:	8c 93       	st	X, r24
}
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <EXTINT0_voidEnable>:
#include "EXTINT0_priv.h"
#include "EXTINT0_cfg.h"

pf EXTINT_pfCall;
void EXTINT0_voidEnable(void)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR ,6);
    1086:	ab e5       	ldi	r26, 0x5B	; 91
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	eb e5       	ldi	r30, 0x5B	; 91
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	80 64       	ori	r24, 0x40	; 64
    1092:	8c 93       	st	X, r24
}
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <EXTINT0_voidDisable>:
void EXTINT0_voidDisable(void)
{
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR ,6);
    10a2:	ab e5       	ldi	r26, 0x5B	; 91
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	eb e5       	ldi	r30, 0x5B	; 91
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	8f 7b       	andi	r24, 0xBF	; 191
    10ae:	8c 93       	st	X, r24
}
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <EXTINT0_voidInit>:
void EXTINT0_voidInit(void)
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif EXTINT_SENSE_MODE == EXTINT0_ON_CHANGE
	SET_BIT(MCUCR,0);
	CLR_BIT(MCUCR,1);
#elif EXTINT_SENSE_MODE == EXTINT0_FALLING_EDGE
	CLR_BIT(MCUCR,0);
    10be:	a5 e5       	ldi	r26, 0x55	; 85
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e5 e5       	ldi	r30, 0x55	; 85
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	8e 7f       	andi	r24, 0xFE	; 254
    10ca:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
    10cc:	a5 e5       	ldi	r26, 0x55	; 85
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e5 e5       	ldi	r30, 0x55	; 85
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	82 60       	ori	r24, 0x02	; 2
    10d8:	8c 93       	st	X, r24
#else    // default as falling
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#endif

}
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <EXTINT0_voidChangeSense>:
void EXTINT0_voidChangeSense(uint8 u8SenseStateCpy)
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <EXTINT0_voidChangeSense+0x6>
    10e6:	0f 92       	push	r0
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	89 83       	std	Y+1, r24	; 0x01

	switch(u8SenseStateCpy)
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	3b 83       	std	Y+3, r19	; 0x03
    10f6:	2a 83       	std	Y+2, r18	; 0x02
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	9b 81       	ldd	r25, Y+3	; 0x03
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	91 05       	cpc	r25, r1
    1100:	21 f1       	breq	.+72     	; 0x114a <EXTINT0_voidChangeSense+0x6a>
    1102:	2a 81       	ldd	r18, Y+2	; 0x02
    1104:	3b 81       	ldd	r19, Y+3	; 0x03
    1106:	22 30       	cpi	r18, 0x02	; 2
    1108:	31 05       	cpc	r19, r1
    110a:	2c f4       	brge	.+10     	; 0x1116 <EXTINT0_voidChangeSense+0x36>
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	9b 81       	ldd	r25, Y+3	; 0x03
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	61 f0       	breq	.+24     	; 0x112c <EXTINT0_voidChangeSense+0x4c>
    1114:	47 c0       	rjmp	.+142    	; 0x11a4 <EXTINT0_voidChangeSense+0xc4>
    1116:	2a 81       	ldd	r18, Y+2	; 0x02
    1118:	3b 81       	ldd	r19, Y+3	; 0x03
    111a:	22 30       	cpi	r18, 0x02	; 2
    111c:	31 05       	cpc	r19, r1
    111e:	21 f1       	breq	.+72     	; 0x1168 <EXTINT0_voidChangeSense+0x88>
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	9b 81       	ldd	r25, Y+3	; 0x03
    1124:	83 30       	cpi	r24, 0x03	; 3
    1126:	91 05       	cpc	r25, r1
    1128:	71 f1       	breq	.+92     	; 0x1186 <EXTINT0_voidChangeSense+0xa6>
    112a:	3c c0       	rjmp	.+120    	; 0x11a4 <EXTINT0_voidChangeSense+0xc4>
	{
	case EXTINT0_LOW_LEVEL  :
		CLR_BIT(MCUCR,0);
    112c:	a5 e5       	ldi	r26, 0x55	; 85
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e5 e5       	ldi	r30, 0x55	; 85
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	8e 7f       	andi	r24, 0xFE	; 254
    1138:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,1);
    113a:	a5 e5       	ldi	r26, 0x55	; 85
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e5 e5       	ldi	r30, 0x55	; 85
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	8d 7f       	andi	r24, 0xFD	; 253
    1146:	8c 93       	st	X, r24
    1148:	3b c0       	rjmp	.+118    	; 0x11c0 <EXTINT0_voidChangeSense+0xe0>
		break;
	case EXTINT0_ON_CHANGE  :
		SET_BIT(MCUCR,0);
    114a:	a5 e5       	ldi	r26, 0x55	; 85
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e5 e5       	ldi	r30, 0x55	; 85
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	81 60       	ori	r24, 0x01	; 1
    1156:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,1);
    1158:	a5 e5       	ldi	r26, 0x55	; 85
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e5 e5       	ldi	r30, 0x55	; 85
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	8d 7f       	andi	r24, 0xFD	; 253
    1164:	8c 93       	st	X, r24
    1166:	2c c0       	rjmp	.+88     	; 0x11c0 <EXTINT0_voidChangeSense+0xe0>
		break;

	case EXTINT0_FALLING_EDGE :
		CLR_BIT(MCUCR,0);
    1168:	a5 e5       	ldi	r26, 0x55	; 85
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e5 e5       	ldi	r30, 0x55	; 85
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	8e 7f       	andi	r24, 0xFE	; 254
    1174:	8c 93       	st	X, r24
		SET_BIT(MCUCR,1);
    1176:	a5 e5       	ldi	r26, 0x55	; 85
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e5 e5       	ldi	r30, 0x55	; 85
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	82 60       	ori	r24, 0x02	; 2
    1182:	8c 93       	st	X, r24
    1184:	1d c0       	rjmp	.+58     	; 0x11c0 <EXTINT0_voidChangeSense+0xe0>
		break;
	case EXTINT0_RISING_EDGE :
		SET_BIT(MCUCR,0);
    1186:	a5 e5       	ldi	r26, 0x55	; 85
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e5 e5       	ldi	r30, 0x55	; 85
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	81 60       	ori	r24, 0x01	; 1
    1192:	8c 93       	st	X, r24
		SET_BIT(MCUCR,1);
    1194:	a5 e5       	ldi	r26, 0x55	; 85
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e5 e5       	ldi	r30, 0x55	; 85
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	82 60       	ori	r24, 0x02	; 2
    11a0:	8c 93       	st	X, r24
    11a2:	0e c0       	rjmp	.+28     	; 0x11c0 <EXTINT0_voidChangeSense+0xe0>
		break;
	default :
		CLR_BIT(MCUCR,0);
    11a4:	a5 e5       	ldi	r26, 0x55	; 85
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e5 e5       	ldi	r30, 0x55	; 85
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	8e 7f       	andi	r24, 0xFE	; 254
    11b0:	8c 93       	st	X, r24
		SET_BIT(MCUCR,1);
    11b2:	a5 e5       	ldi	r26, 0x55	; 85
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e5 e5       	ldi	r30, 0x55	; 85
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	82 60       	ori	r24, 0x02	; 2
    11be:	8c 93       	st	X, r24
		break;



	}
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <EXTINT0_voidSEtCallBack>:

void EXTINT0_voidSEtCallBack(pf pfCallBack)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <EXTINT0_voidSEtCallBack+0x6>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	9a 83       	std	Y+2, r25	; 0x02
    11d8:	89 83       	std	Y+1, r24	; 0x01
	EXTINT_pfCall =pfCallBack;
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
    11de:	90 93 10 01 	sts	0x0110, r25
    11e2:	80 93 0f 01 	sts	0x010F, r24
}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <__vector_1>:

void __vector_1(void)   __attribute__ ((signal,used)); // for optimize

void __vector_1(void)
{
    11f0:	1f 92       	push	r1
    11f2:	0f 92       	push	r0
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	0f 92       	push	r0
    11f8:	11 24       	eor	r1, r1
    11fa:	2f 93       	push	r18
    11fc:	3f 93       	push	r19
    11fe:	4f 93       	push	r20
    1200:	5f 93       	push	r21
    1202:	6f 93       	push	r22
    1204:	7f 93       	push	r23
    1206:	8f 93       	push	r24
    1208:	9f 93       	push	r25
    120a:	af 93       	push	r26
    120c:	bf 93       	push	r27
    120e:	ef 93       	push	r30
    1210:	ff 93       	push	r31
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
	EXTINT_pfCall();
    121a:	e0 91 0f 01 	lds	r30, 0x010F
    121e:	f0 91 10 01 	lds	r31, 0x0110
    1222:	09 95       	icall
}
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	ff 91       	pop	r31
    122a:	ef 91       	pop	r30
    122c:	bf 91       	pop	r27
    122e:	af 91       	pop	r26
    1230:	9f 91       	pop	r25
    1232:	8f 91       	pop	r24
    1234:	7f 91       	pop	r23
    1236:	6f 91       	pop	r22
    1238:	5f 91       	pop	r21
    123a:	4f 91       	pop	r20
    123c:	3f 91       	pop	r19
    123e:	2f 91       	pop	r18
    1240:	0f 90       	pop	r0
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	0f 90       	pop	r0
    1246:	1f 90       	pop	r1
    1248:	18 95       	reti

0000124a <DIO_voidInit>:
#include"DIO_configuration.h"
#include"DIO_private.h"


void DIO_voidInit(void)
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
	DDRA=CONC(DIO_PIN_NUM_A7_DIR,DIO_PIN_NUM_A6_DIR,DIO_PIN_NUM_A5_DIR,DIO_PIN_NUM_A4_DIR,DIO_PIN_NUM_A3_DIR,DIO_PIN_NUM_A2_DIR,DIO_PIN_NUM_A1_DIR,DIO_PIN_NUM_A0_DIR);
    1252:	ea e3       	ldi	r30, 0x3A	; 58
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	8f ef       	ldi	r24, 0xFF	; 255
    1258:	80 83       	st	Z, r24
	DDRB=CONC(DIO_PIN_NUM_B7_DIR,DIO_PIN_NUM_B6_DIR,DIO_PIN_NUM_B5_DIR,DIO_PIN_NUM_B4_DIR,DIO_PIN_NUM_B3_DIR,DIO_PIN_NUM_B2_DIR,DIO_PIN_NUM_B1_DIR,DIO_PIN_NUM_B0_DIR);
    125a:	e7 e3       	ldi	r30, 0x37	; 55
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	8f ef       	ldi	r24, 0xFF	; 255
    1260:	80 83       	st	Z, r24
	DDRC=CONC(DIO_PIN_NUM_C7_DIR,DIO_PIN_NUM_C6_DIR,DIO_PIN_NUM_C5_DIR,DIO_PIN_NUM_C4_DIR,DIO_PIN_NUM_C3_DIR,DIO_PIN_NUM_C2_DIR,DIO_PIN_NUM_C1_DIR,DIO_PIN_NUM_C0_DIR);
    1262:	e4 e3       	ldi	r30, 0x34	; 52
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	80 83       	st	Z, r24
	DDRD=CONC(DIO_PIN_NUM_D7_DIR,DIO_PIN_NUM_D6_DIR,DIO_PIN_NUM_D5_DIR,DIO_PIN_NUM_D4_DIR,DIO_PIN_NUM_D3_DIR,DIO_PIN_NUM_D2_DIR,DIO_PIN_NUM_D1_DIR,DIO_PIN_NUM_D0_DIR);
    126a:	e1 e3       	ldi	r30, 0x31	; 49
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 ef       	ldi	r24, 0xF0	; 240
    1270:	80 83       	st	Z, r24
}   
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <DIO_enuWritePin>:


tenuErrrorStatus DIO_enuWritePin(uint8 u8PinNumCpy , uint8 u8PinValueCpy)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	2b 97       	sbiw	r28, 0x0b	; 11
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	8a 83       	std	Y+2, r24	; 0x02
    128e:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrrorStatus enuReturnStateLoc =EOK ;
    1290:	19 82       	std	Y+1, r1	; 0x01
	
	
	if (u8PinNumCpy>=DIO_PIN_NUM_A0  && u8PinNumCpy<= DIO_PIN_NUM_A7)
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	88 30       	cpi	r24, 0x08	; 8
    1296:	d0 f5       	brcc	.+116    	; 0x130c <DIO_enuWritePin+0x94>
	{
		switch(u8PinValueCpy)
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3b 87       	std	Y+11, r19	; 0x0b
    12a0:	2a 87       	std	Y+10, r18	; 0x0a
    12a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    12a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	c9 f0       	breq	.+50     	; 0x12dc <DIO_enuWritePin+0x64>
    12aa:	2a 85       	ldd	r18, Y+10	; 0x0a
    12ac:	3b 85       	ldd	r19, Y+11	; 0x0b
    12ae:	21 30       	cpi	r18, 0x01	; 1
    12b0:	31 05       	cpc	r19, r1
    12b2:	49 f5       	brne	.+82     	; 0x1306 <DIO_enuWritePin+0x8e>
		{
			case DIO_HIGH :
			SET_BIT(PORTA ,u8PinNumCpy);
    12b4:	ab e3       	ldi	r26, 0x3B	; 59
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	eb e3       	ldi	r30, 0x3B	; 59
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_enuWritePin+0x5a>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_enuWritePin+0x56>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	f2 c0       	rjmp	.+484    	; 0x14c0 <DIO_enuWritePin+0x248>
			break;
			case DIO_LOW :
			CLR_BIT(PORTA,u8PinNumCpy);
    12dc:	ab e3       	ldi	r26, 0x3B	; 59
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	eb e3       	ldi	r30, 0x3B	; 59
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_enuWritePin+0x82>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_enuWritePin+0x7e>
    12fe:	80 95       	com	r24
    1300:	84 23       	and	r24, r20
    1302:	8c 93       	st	X, r24
    1304:	dd c0       	rjmp	.+442    	; 0x14c0 <DIO_enuWritePin+0x248>
			break;
			default :
			enuReturnStateLoc = PARAMRETER_OUT_RANGE;
    1306:	82 e0       	ldi	r24, 0x02	; 2
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	da c0       	rjmp	.+436    	; 0x14c0 <DIO_enuWritePin+0x248>
			break;
			
		}		
	}	
	else if (u8PinNumCpy>=DIO_PIN_NUM_B0 && u8PinNumCpy<=DIO_PIN_NUM_B7)
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	88 30       	cpi	r24, 0x08	; 8
    1310:	08 f4       	brcc	.+2      	; 0x1314 <DIO_enuWritePin+0x9c>
    1312:	44 c0       	rjmp	.+136    	; 0x139c <DIO_enuWritePin+0x124>
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	80 31       	cpi	r24, 0x10	; 16
    1318:	08 f0       	brcs	.+2      	; 0x131c <DIO_enuWritePin+0xa4>
    131a:	40 c0       	rjmp	.+128    	; 0x139c <DIO_enuWritePin+0x124>
	{
		switch(u8PinValueCpy)
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	39 87       	std	Y+9, r19	; 0x09
    1324:	28 87       	std	Y+8, r18	; 0x08
    1326:	88 85       	ldd	r24, Y+8	; 0x08
    1328:	99 85       	ldd	r25, Y+9	; 0x09
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	e1 f0       	breq	.+56     	; 0x1366 <DIO_enuWritePin+0xee>
    132e:	28 85       	ldd	r18, Y+8	; 0x08
    1330:	39 85       	ldd	r19, Y+9	; 0x09
    1332:	21 30       	cpi	r18, 0x01	; 1
    1334:	31 05       	cpc	r19, r1
    1336:	79 f5       	brne	.+94     	; 0x1396 <DIO_enuWritePin+0x11e>
		{
			case DIO_HIGH :
			SET_BIT(PORTB ,u8PinNumCpy%8);
    1338:	a8 e3       	ldi	r26, 0x38	; 56
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e8 e3       	ldi	r30, 0x38	; 56
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	9c 01       	movw	r18, r24
    134c:	27 70       	andi	r18, 0x07	; 7
    134e:	30 70       	andi	r19, 0x00	; 0
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	02 2e       	mov	r0, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <DIO_enuWritePin+0xe4>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	0a 94       	dec	r0
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <DIO_enuWritePin+0xe0>
    1360:	84 2b       	or	r24, r20
    1362:	8c 93       	st	X, r24
    1364:	ad c0       	rjmp	.+346    	; 0x14c0 <DIO_enuWritePin+0x248>
			break;
			case DIO_LOW :
			CLR_BIT(PORTB,u8PinNumCpy%8);  //-8
    1366:	a8 e3       	ldi	r26, 0x38	; 56
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e8 e3       	ldi	r30, 0x38	; 56
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	48 2f       	mov	r20, r24
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	88 2f       	mov	r24, r24
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	9c 01       	movw	r18, r24
    137a:	27 70       	andi	r18, 0x07	; 7
    137c:	30 70       	andi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 2e       	mov	r0, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <DIO_enuWritePin+0x112>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <DIO_enuWritePin+0x10e>
    138e:	80 95       	com	r24
    1390:	84 23       	and	r24, r20
    1392:	8c 93       	st	X, r24
    1394:	95 c0       	rjmp	.+298    	; 0x14c0 <DIO_enuWritePin+0x248>
			break;
			default :
			enuReturnStateLoc = PARAMRETER_OUT_RANGE;
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	92 c0       	rjmp	.+292    	; 0x14c0 <DIO_enuWritePin+0x248>
			break;
			
		}	
		
	}
	else if (u8PinNumCpy>=DIO_PIN_NUM_C0 && u8PinNumCpy<=DIO_PIN_NUM_C7)
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	80 31       	cpi	r24, 0x10	; 16
    13a0:	08 f4       	brcc	.+2      	; 0x13a4 <DIO_enuWritePin+0x12c>
    13a2:	44 c0       	rjmp	.+136    	; 0x142c <DIO_enuWritePin+0x1b4>
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	88 31       	cpi	r24, 0x18	; 24
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <DIO_enuWritePin+0x134>
    13aa:	40 c0       	rjmp	.+128    	; 0x142c <DIO_enuWritePin+0x1b4>
	{
		
		switch(u8PinValueCpy)
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	3f 83       	std	Y+7, r19	; 0x07
    13b4:	2e 83       	std	Y+6, r18	; 0x06
    13b6:	8e 81       	ldd	r24, Y+6	; 0x06
    13b8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	e1 f0       	breq	.+56     	; 0x13f6 <DIO_enuWritePin+0x17e>
    13be:	2e 81       	ldd	r18, Y+6	; 0x06
    13c0:	3f 81       	ldd	r19, Y+7	; 0x07
    13c2:	21 30       	cpi	r18, 0x01	; 1
    13c4:	31 05       	cpc	r19, r1
    13c6:	79 f5       	brne	.+94     	; 0x1426 <DIO_enuWritePin+0x1ae>
		{
			case DIO_HIGH :
			SET_BIT(PORTC ,u8PinNumCpy%8);  //-16
    13c8:	a5 e3       	ldi	r26, 0x35	; 53
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e5 e3       	ldi	r30, 0x35	; 53
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	48 2f       	mov	r20, r24
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	88 2f       	mov	r24, r24
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	9c 01       	movw	r18, r24
    13dc:	27 70       	andi	r18, 0x07	; 7
    13de:	30 70       	andi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_enuWritePin+0x174>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_enuWritePin+0x170>
    13f0:	84 2b       	or	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	65 c0       	rjmp	.+202    	; 0x14c0 <DIO_enuWritePin+0x248>
			break;
			case DIO_LOW :
			CLR_BIT(PORTC,u8PinNumCpy%8);
    13f6:	a5 e3       	ldi	r26, 0x35	; 53
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e5 e3       	ldi	r30, 0x35	; 53
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9c 01       	movw	r18, r24
    140a:	27 70       	andi	r18, 0x07	; 7
    140c:	30 70       	andi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_enuWritePin+0x1a2>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_enuWritePin+0x19e>
    141e:	80 95       	com	r24
    1420:	84 23       	and	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	4d c0       	rjmp	.+154    	; 0x14c0 <DIO_enuWritePin+0x248>
			break;
			default :
			enuReturnStateLoc = PARAMRETER_OUT_RANGE;
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	4a c0       	rjmp	.+148    	; 0x14c0 <DIO_enuWritePin+0x248>
			
		}	
		
		
	}
	else if (u8PinNumCpy>=DIO_PIN_NUM_D0 && u8PinNumCpy<=DIO_PIN_NUM_D7)
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	88 31       	cpi	r24, 0x18	; 24
    1430:	08 f4       	brcc	.+2      	; 0x1434 <DIO_enuWritePin+0x1bc>
    1432:	44 c0       	rjmp	.+136    	; 0x14bc <DIO_enuWritePin+0x244>
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	80 32       	cpi	r24, 0x20	; 32
    1438:	08 f0       	brcs	.+2      	; 0x143c <DIO_enuWritePin+0x1c4>
    143a:	40 c0       	rjmp	.+128    	; 0x14bc <DIO_enuWritePin+0x244>
	{
		
		switch(u8PinValueCpy)
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3d 83       	std	Y+5, r19	; 0x05
    1444:	2c 83       	std	Y+4, r18	; 0x04
    1446:	8c 81       	ldd	r24, Y+4	; 0x04
    1448:	9d 81       	ldd	r25, Y+5	; 0x05
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	e1 f0       	breq	.+56     	; 0x1486 <DIO_enuWritePin+0x20e>
    144e:	2c 81       	ldd	r18, Y+4	; 0x04
    1450:	3d 81       	ldd	r19, Y+5	; 0x05
    1452:	21 30       	cpi	r18, 0x01	; 1
    1454:	31 05       	cpc	r19, r1
    1456:	79 f5       	brne	.+94     	; 0x14b6 <DIO_enuWritePin+0x23e>
		{
			case DIO_HIGH :
			SET_BIT(PORTD ,(u8PinNumCpy%8));  //-16
    1458:	a2 e3       	ldi	r26, 0x32	; 50
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e2 e3       	ldi	r30, 0x32	; 50
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	9c 01       	movw	r18, r24
    146c:	27 70       	andi	r18, 0x07	; 7
    146e:	30 70       	andi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 2e       	mov	r0, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <DIO_enuWritePin+0x204>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	0a 94       	dec	r0
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <DIO_enuWritePin+0x200>
    1480:	84 2b       	or	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	1d c0       	rjmp	.+58     	; 0x14c0 <DIO_enuWritePin+0x248>
			break;
			case DIO_LOW :
			CLR_BIT(PORTD,(u8PinNumCpy%8));
    1486:	a2 e3       	ldi	r26, 0x32	; 50
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e2 e3       	ldi	r30, 0x32	; 50
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	9c 01       	movw	r18, r24
    149a:	27 70       	andi	r18, 0x07	; 7
    149c:	30 70       	andi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <DIO_enuWritePin+0x232>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <DIO_enuWritePin+0x22e>
    14ae:	80 95       	com	r24
    14b0:	84 23       	and	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	05 c0       	rjmp	.+10     	; 0x14c0 <DIO_enuWritePin+0x248>
			break;
			default :
			enuReturnStateLoc = PARAMRETER_OUT_RANGE;
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <DIO_enuWritePin+0x248>
		
		
	}
	else 
	{
		enuReturnStateLoc=PARAMRETER_OUT_RANGE;
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	return enuReturnStateLoc;
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    14c2:	2b 96       	adiw	r28, 0x0b	; 11
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <DIO_enuReadPin>:
 
tenuErrrorStatus DIO_enuReadPin(uint8 u8PinNumCpy , uint8* pu8PinValue)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	00 d0       	rcall	.+0      	; 0x14da <DIO_enuReadPin+0x6>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <DIO_enuReadPin+0x8>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    14e2:	7c 83       	std	Y+4, r23	; 0x04
    14e4:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrrorStatus enuReturnStateLoc =EOK ;
    14e6:	19 82       	std	Y+1, r1	; 0x01
	
	
	if (pu8PinValue!= NULL_PTR)
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <DIO_enuReadPin+0x1e>
    14f0:	6e c0       	rjmp	.+220    	; 0x15ce <DIO_enuReadPin+0xfa>
	{
		if (u8PinNumCpy>=DIO_PIN_NUM_A0  && u8PinNumCpy<= DIO_PIN_NUM_A7)
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	88 30       	cpi	r24, 0x08	; 8
    14f6:	a0 f4       	brcc	.+40     	; 0x1520 <DIO_enuReadPin+0x4c>
		{
			
			*pu8PinValue=GET_BIT(PINA,u8PinNumCpy);
    14f8:	e9 e3       	ldi	r30, 0x39	; 57
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	88 2f       	mov	r24, r24
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a9 01       	movw	r20, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_enuReadPin+0x3c>
    150c:	55 95       	asr	r21
    150e:	47 95       	ror	r20
    1510:	8a 95       	dec	r24
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_enuReadPin+0x38>
    1514:	ca 01       	movw	r24, r20
    1516:	81 70       	andi	r24, 0x01	; 1
    1518:	eb 81       	ldd	r30, Y+3	; 0x03
    151a:	fc 81       	ldd	r31, Y+4	; 0x04
    151c:	80 83       	st	Z, r24
    151e:	59 c0       	rjmp	.+178    	; 0x15d2 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy>=DIO_PIN_NUM_B0 && u8PinNumCpy<=DIO_PIN_NUM_B7)
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	88 30       	cpi	r24, 0x08	; 8
    1524:	c8 f0       	brcs	.+50     	; 0x1558 <DIO_enuReadPin+0x84>
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	80 31       	cpi	r24, 0x10	; 16
    152a:	b0 f4       	brcc	.+44     	; 0x1558 <DIO_enuReadPin+0x84>
		{
			*pu8PinValue=GET_BIT(PINB,u8PinNumCpy%8);
    152c:	e6 e3       	ldi	r30, 0x36	; 54
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	87 70       	andi	r24, 0x07	; 7
    153e:	90 70       	andi	r25, 0x00	; 0
    1540:	a9 01       	movw	r20, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_enuReadPin+0x74>
    1544:	55 95       	asr	r21
    1546:	47 95       	ror	r20
    1548:	8a 95       	dec	r24
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_enuReadPin+0x70>
    154c:	ca 01       	movw	r24, r20
    154e:	81 70       	andi	r24, 0x01	; 1
    1550:	eb 81       	ldd	r30, Y+3	; 0x03
    1552:	fc 81       	ldd	r31, Y+4	; 0x04
    1554:	80 83       	st	Z, r24
    1556:	3d c0       	rjmp	.+122    	; 0x15d2 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy>=DIO_PIN_NUM_C0 && u8PinNumCpy<=DIO_PIN_NUM_C7)
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	80 31       	cpi	r24, 0x10	; 16
    155c:	c8 f0       	brcs	.+50     	; 0x1590 <DIO_enuReadPin+0xbc>
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	88 31       	cpi	r24, 0x18	; 24
    1562:	b0 f4       	brcc	.+44     	; 0x1590 <DIO_enuReadPin+0xbc>
		{
			*pu8PinValue=GET_BIT(PINC,u8PinNumCpy%8);
    1564:	e3 e3       	ldi	r30, 0x33	; 51
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	87 70       	andi	r24, 0x07	; 7
    1576:	90 70       	andi	r25, 0x00	; 0
    1578:	a9 01       	movw	r20, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DIO_enuReadPin+0xac>
    157c:	55 95       	asr	r21
    157e:	47 95       	ror	r20
    1580:	8a 95       	dec	r24
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DIO_enuReadPin+0xa8>
    1584:	ca 01       	movw	r24, r20
    1586:	81 70       	andi	r24, 0x01	; 1
    1588:	eb 81       	ldd	r30, Y+3	; 0x03
    158a:	fc 81       	ldd	r31, Y+4	; 0x04
    158c:	80 83       	st	Z, r24
    158e:	21 c0       	rjmp	.+66     	; 0x15d2 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy>=DIO_PIN_NUM_D0 && u8PinNumCpy<=DIO_PIN_NUM_D7)
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	88 31       	cpi	r24, 0x18	; 24
    1594:	c8 f0       	brcs	.+50     	; 0x15c8 <DIO_enuReadPin+0xf4>
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	80 32       	cpi	r24, 0x20	; 32
    159a:	b0 f4       	brcc	.+44     	; 0x15c8 <DIO_enuReadPin+0xf4>
		{
			*pu8PinValue=GET_BIT(PIND,u8PinNumCpy%8);
    159c:	e0 e3       	ldi	r30, 0x30	; 48
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	87 70       	andi	r24, 0x07	; 7
    15ae:	90 70       	andi	r25, 0x00	; 0
    15b0:	a9 01       	movw	r20, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <DIO_enuReadPin+0xe4>
    15b4:	55 95       	asr	r21
    15b6:	47 95       	ror	r20
    15b8:	8a 95       	dec	r24
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <DIO_enuReadPin+0xe0>
    15bc:	ca 01       	movw	r24, r20
    15be:	81 70       	andi	r24, 0x01	; 1
    15c0:	eb 81       	ldd	r30, Y+3	; 0x03
    15c2:	fc 81       	ldd	r31, Y+4	; 0x04
    15c4:	80 83       	st	Z, r24
    15c6:	05 c0       	rjmp	.+10     	; 0x15d2 <DIO_enuReadPin+0xfe>
		}
		else
		{
			enuReturnStateLoc= PARAMRETER_OUT_RANGE;
    15c8:	82 e0       	ldi	r24, 0x02	; 2
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <DIO_enuReadPin+0xfe>
		}
	}
	else
	{
		enuReturnStateLoc=PARAMERTE_NULL_PTR;
    15ce:	83 e0       	ldi	r24, 0x03	; 3
    15d0:	89 83       	std	Y+1, r24	; 0x01
	}
	return enuReturnStateLoc;
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <DIO_enuStatePullup>:

tenuErrrorStatus DIO_enuStatePullup(uint8 u8PinNumCpy , uint8 u8StateCpy)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <DIO_enuStatePullup+0x6>
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	6a 83       	std	Y+2, r22	; 0x02
	
	return DIO_enuWritePin(u8PinNumCpy,u8StateCpy);
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	6a 81       	ldd	r22, Y+2	; 0x02
    15f4:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>
	
}
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <DIO_enuWriteGroup>:


tenuErrrorStatus DIO_enuWriteGroup(uint8* pau8PinNumCpy , uint8* pau8PinValueCpy,uint8 u8Sizecpy)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	27 97       	sbiw	r28, 0x07	; 7
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	9c 83       	std	Y+4, r25	; 0x04
    1618:	8b 83       	std	Y+3, r24	; 0x03
    161a:	7e 83       	std	Y+6, r23	; 0x06
    161c:	6d 83       	std	Y+5, r22	; 0x05
    161e:	4f 83       	std	Y+7, r20	; 0x07
	tenuErrrorStatus enuReturnStateLoc =EOK;
    1620:	1a 82       	std	Y+2, r1	; 0x02
	
	uint8 u8CounterLoc=0;
    1622:	19 82       	std	Y+1, r1	; 0x01
	
	for ( u8CounterLoc=0 ;   u8CounterLoc< u8Sizecpy ;u8CounterLoc++)
    1624:	19 82       	std	Y+1, r1	; 0x01
    1626:	1d c0       	rjmp	.+58     	; 0x1662 <DIO_enuWriteGroup+0x60>
	{
		enuReturnStateLoc=DIO_enuWritePin(pau8PinNumCpy[u8CounterLoc],pau8PinValueCpy[u8CounterLoc]);
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	fc 01       	movw	r30, r24
    1634:	e2 0f       	add	r30, r18
    1636:	f3 1f       	adc	r31, r19
    1638:	40 81       	ld	r20, Z
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	9e 81       	ldd	r25, Y+6	; 0x06
    1644:	fc 01       	movw	r30, r24
    1646:	e2 0f       	add	r30, r18
    1648:	f3 1f       	adc	r31, r19
    164a:	90 81       	ld	r25, Z
    164c:	84 2f       	mov	r24, r20
    164e:	69 2f       	mov	r22, r25
    1650:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>
    1654:	8a 83       	std	Y+2, r24	; 0x02
		
		if (enuReturnStateLoc !=EOK)
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	88 23       	and	r24, r24
    165a:	39 f4       	brne	.+14     	; 0x166a <DIO_enuWriteGroup+0x68>
{
	tenuErrrorStatus enuReturnStateLoc =EOK;
	
	uint8 u8CounterLoc=0;
	
	for ( u8CounterLoc=0 ;   u8CounterLoc< u8Sizecpy ;u8CounterLoc++)
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	8f 5f       	subi	r24, 0xFF	; 255
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	99 81       	ldd	r25, Y+1	; 0x01
    1664:	8f 81       	ldd	r24, Y+7	; 0x07
    1666:	98 17       	cp	r25, r24
    1668:	f8 f2       	brcs	.-66     	; 0x1628 <DIO_enuWriteGroup+0x26>
		{
			break;
		}
	}
	
	return enuReturnStateLoc;
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    166c:	27 96       	adiw	r28, 0x07	; 7
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <SEV_enuDisplay>:




tenuErrrorStatus SEV_enuDisplay(uint8 u8SevIndexCpy, uint8 u8NumCpy)
{
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	62 97       	sbiw	r28, 0x12	; 18
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
    1692:	8c 87       	std	Y+12, r24	; 0x0c
    1694:	6d 87       	std	Y+13, r22	; 0x0d

	tenuErrrorStatus enuReturnLoc =EOK;
    1696:	19 82       	std	Y+1, r1	; 0x01
	uint8 au8cathode[10] = {0x3f, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
    1698:	ce 01       	movw	r24, r28
    169a:	02 96       	adiw	r24, 0x02	; 2
    169c:	9f 87       	std	Y+15, r25	; 0x0f
    169e:	8e 87       	std	Y+14, r24	; 0x0e
    16a0:	ea ef       	ldi	r30, 0xFA	; 250
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	f9 8b       	std	Y+17, r31	; 0x11
    16a6:	e8 8b       	std	Y+16, r30	; 0x10
    16a8:	fa e0       	ldi	r31, 0x0A	; 10
    16aa:	fa 8b       	std	Y+18, r31	; 0x12
    16ac:	e8 89       	ldd	r30, Y+16	; 0x10
    16ae:	f9 89       	ldd	r31, Y+17	; 0x11
    16b0:	00 80       	ld	r0, Z
    16b2:	88 89       	ldd	r24, Y+16	; 0x10
    16b4:	99 89       	ldd	r25, Y+17	; 0x11
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	99 8b       	std	Y+17, r25	; 0x11
    16ba:	88 8b       	std	Y+16, r24	; 0x10
    16bc:	ee 85       	ldd	r30, Y+14	; 0x0e
    16be:	ff 85       	ldd	r31, Y+15	; 0x0f
    16c0:	00 82       	st	Z, r0
    16c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    16c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    16c6:	01 96       	adiw	r24, 0x01	; 1
    16c8:	9f 87       	std	Y+15, r25	; 0x0f
    16ca:	8e 87       	std	Y+14, r24	; 0x0e
    16cc:	9a 89       	ldd	r25, Y+18	; 0x12
    16ce:	91 50       	subi	r25, 0x01	; 1
    16d0:	9a 8b       	std	Y+18, r25	; 0x12
    16d2:	ea 89       	ldd	r30, Y+18	; 0x12
    16d4:	ee 23       	and	r30, r30
    16d6:	51 f7       	brne	.-44     	; 0x16ac <SEV_enuDisplay+0x2e>
	if (u8NumCpy<10)
    16d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16da:	8a 30       	cpi	r24, 0x0A	; 10
    16dc:	08 f0       	brcs	.+2      	; 0x16e0 <SEV_enuDisplay+0x62>
    16de:	45 c0       	rjmp	.+138    	; 0x176a <SEV_enuDisplay+0xec>
	{
		if (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_CATHODE)
    16e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	c9 01       	movw	r24, r18
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	82 0f       	add	r24, r18
    16f6:	93 1f       	adc	r25, r19
    16f8:	fc 01       	movw	r30, r24
    16fa:	e9 55       	subi	r30, 0x59	; 89
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	80 81       	ld	r24, Z
    1700:	84 31       	cpi	r24, 0x14	; 20
    1702:	71 f4       	brne	.+28     	; 0x1720 <SEV_enuDisplay+0xa2>
		{
			SEV_HexToBin(u8SevIndexCpy,au8cathode[u8NumCpy]);
    1704:	8d 85       	ldd	r24, Y+13	; 0x0d
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	ce 01       	movw	r24, r28
    170c:	02 96       	adiw	r24, 0x02	; 2
    170e:	fc 01       	movw	r30, r24
    1710:	e2 0f       	add	r30, r18
    1712:	f3 1f       	adc	r31, r19
    1714:	90 81       	ld	r25, Z
    1716:	8c 85       	ldd	r24, Y+12	; 0x0c
    1718:	69 2f       	mov	r22, r25
    171a:	0e 94 c1 0b 	call	0x1782	; 0x1782 <SEV_HexToBin>
    171e:	27 c0       	rjmp	.+78     	; 0x176e <SEV_enuDisplay+0xf0>
		}
		else if (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_ANODE)
    1720:	8c 85       	ldd	r24, Y+12	; 0x0c
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	c9 01       	movw	r24, r18
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	82 0f       	add	r24, r18
    1736:	93 1f       	adc	r25, r19
    1738:	fc 01       	movw	r30, r24
    173a:	e9 55       	subi	r30, 0x59	; 89
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	80 81       	ld	r24, Z
    1740:	8a 30       	cpi	r24, 0x0A	; 10
    1742:	81 f4       	brne	.+32     	; 0x1764 <SEV_enuDisplay+0xe6>
		{
			SEV_HexToBin(u8SevIndexCpy,~au8cathode[u8NumCpy]);
    1744:	8d 85       	ldd	r24, Y+13	; 0x0d
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	ce 01       	movw	r24, r28
    174c:	02 96       	adiw	r24, 0x02	; 2
    174e:	fc 01       	movw	r30, r24
    1750:	e2 0f       	add	r30, r18
    1752:	f3 1f       	adc	r31, r19
    1754:	80 81       	ld	r24, Z
    1756:	98 2f       	mov	r25, r24
    1758:	90 95       	com	r25
    175a:	8c 85       	ldd	r24, Y+12	; 0x0c
    175c:	69 2f       	mov	r22, r25
    175e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <SEV_HexToBin>
    1762:	05 c0       	rjmp	.+10     	; 0x176e <SEV_enuDisplay+0xf0>
		}
		else
		{
			enuReturnLoc=ENOK;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	02 c0       	rjmp	.+4      	; 0x176e <SEV_enuDisplay+0xf0>
		}
	}
	else
	{
		enuReturnLoc=PARAMRETER_OUT_RANGE;
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	89 83       	std	Y+1, r24	; 0x01
	}
	return enuReturnLoc;
    176e:	89 81       	ldd	r24, Y+1	; 0x01


}
    1770:	62 96       	adiw	r28, 0x12	; 18
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	de bf       	out	0x3e, r29	; 62
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	cd bf       	out	0x3d, r28	; 61
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <SEV_HexToBin>:


static void SEV_HexToBin(uint8 u8SevIndexCpy,uint8 u8HexCpy ) // 0b0111111  num 0
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	2a 97       	sbiw	r28, 0x0a	; 10
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	89 87       	std	Y+9, r24	; 0x09
    1798:	6a 87       	std	Y+10, r22	; 0x0a
	uint8 au8BinValuesLoc[7];
	uint8 u8CounterLoc;
	for (u8CounterLoc=0; u8CounterLoc<7;u8CounterLoc++)
    179a:	19 82       	std	Y+1, r1	; 0x01
    179c:	1b c0       	rjmp	.+54     	; 0x17d4 <SEV_HexToBin+0x52>
	{
		au8BinValuesLoc[u8CounterLoc]=GET_BIT(u8HexCpy,u8CounterLoc);
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	48 2f       	mov	r20, r24
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	88 2f       	mov	r24, r24
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	b9 01       	movw	r22, r18
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <SEV_HexToBin+0x36>
    17b4:	75 95       	asr	r23
    17b6:	67 95       	ror	r22
    17b8:	8a 95       	dec	r24
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <SEV_HexToBin+0x32>
    17bc:	cb 01       	movw	r24, r22
    17be:	28 2f       	mov	r18, r24
    17c0:	21 70       	andi	r18, 0x01	; 1
    17c2:	ce 01       	movw	r24, r28
    17c4:	02 96       	adiw	r24, 0x02	; 2
    17c6:	fc 01       	movw	r30, r24
    17c8:	e4 0f       	add	r30, r20
    17ca:	f5 1f       	adc	r31, r21
    17cc:	20 83       	st	Z, r18

static void SEV_HexToBin(uint8 u8SevIndexCpy,uint8 u8HexCpy ) // 0b0111111  num 0
{
	uint8 au8BinValuesLoc[7];
	uint8 u8CounterLoc;
	for (u8CounterLoc=0; u8CounterLoc<7;u8CounterLoc++)
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	8f 5f       	subi	r24, 0xFF	; 255
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	87 30       	cpi	r24, 0x07	; 7
    17d8:	10 f3       	brcs	.-60     	; 0x179e <SEV_HexToBin+0x1c>
	{
		au8BinValuesLoc[u8CounterLoc]=GET_BIT(u8HexCpy,u8CounterLoc);
	}
	DIO_enuWriteGroup(SEV_ConfigSet[u8SevIndexCpy].au8SevCon,au8BinValuesLoc,7);
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	c9 01       	movw	r24, r18
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	82 0f       	add	r24, r18
    17f0:	93 1f       	adc	r25, r19
    17f2:	81 56       	subi	r24, 0x61	; 97
    17f4:	9f 4f       	sbci	r25, 0xFF	; 255
    17f6:	9e 01       	movw	r18, r28
    17f8:	2e 5f       	subi	r18, 0xFE	; 254
    17fa:	3f 4f       	sbci	r19, 0xFF	; 255
    17fc:	b9 01       	movw	r22, r18
    17fe:	47 e0       	ldi	r20, 0x07	; 7
    1800:	0e 94 01 0b 	call	0x1602	; 0x1602 <DIO_enuWriteGroup>

}
    1804:	2a 96       	adiw	r28, 0x0a	; 10
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <SEV_enuEnable>:

tenuErrrorStatus SEV_enuEnable(uint8 u8SevIndexCpy)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <SEV_enuEnable+0x6>
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	8a 83       	std	Y+2, r24	; 0x02

	tenuErrrorStatus enuReturnLoc =EOK;
    1822:	19 82       	std	Y+1, r1	; 0x01
	if (u8SevIndexCpy < SEV_MAX_NUM)
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	86 30       	cpi	r24, 0x06	; 6
    1828:	08 f0       	brcs	.+2      	; 0x182c <SEV_enuEnable+0x16>
    182a:	4f c0       	rjmp	.+158    	; 0x18ca <SEV_enuEnable+0xb4>
	{
		if (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_CATHODE)
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	c9 01       	movw	r24, r18
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	82 0f       	add	r24, r18
    1842:	93 1f       	adc	r25, r19
    1844:	fc 01       	movw	r30, r24
    1846:	e9 55       	subi	r30, 0x59	; 89
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	80 81       	ld	r24, Z
    184c:	84 31       	cpi	r24, 0x14	; 20
    184e:	a1 f4       	brne	.+40     	; 0x1878 <SEV_enuEnable+0x62>
		{
			DIO_enuWritePin(SEV_ConfigSet[u8SevIndexCpy].u8common ,DIO_LOW);
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	c9 01       	movw	r24, r18
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	82 0f       	add	r24, r18
    1866:	93 1f       	adc	r25, r19
    1868:	fc 01       	movw	r30, r24
    186a:	ea 55       	subi	r30, 0x5A	; 90
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	80 81       	ld	r24, Z
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>
    1876:	2b c0       	rjmp	.+86     	; 0x18ce <SEV_enuEnable+0xb8>
		}
		else if  (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_ANODE)
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	c9 01       	movw	r24, r18
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	82 0f       	add	r24, r18
    188e:	93 1f       	adc	r25, r19
    1890:	fc 01       	movw	r30, r24
    1892:	e9 55       	subi	r30, 0x59	; 89
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	80 81       	ld	r24, Z
    1898:	8a 30       	cpi	r24, 0x0A	; 10
    189a:	a1 f4       	brne	.+40     	; 0x18c4 <SEV_enuEnable+0xae>
		{
			DIO_enuWritePin(SEV_ConfigSet[u8SevIndexCpy].u8common ,DIO_HIGH);
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	c9 01       	movw	r24, r18
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	82 0f       	add	r24, r18
    18b2:	93 1f       	adc	r25, r19
    18b4:	fc 01       	movw	r30, r24
    18b6:	ea 55       	subi	r30, 0x5A	; 90
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	80 81       	ld	r24, Z
    18bc:	61 e0       	ldi	r22, 0x01	; 1
    18be:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>
    18c2:	05 c0       	rjmp	.+10     	; 0x18ce <SEV_enuEnable+0xb8>
		}
		else
		{
			enuReturnLoc=ENOK;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	89 83       	std	Y+1, r24	; 0x01
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <SEV_enuEnable+0xb8>

		}
	}
	else
	{
		enuReturnLoc =PARAMRETER_OUT_RANGE;
    18ca:	82 e0       	ldi	r24, 0x02	; 2
    18cc:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnLoc;
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <SEV_enuDisable>:
tenuErrrorStatus SEV_enuDisable(uint8 u8SevIndexCpy)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <SEV_enuDisable+0x6>
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	8a 83       	std	Y+2, r24	; 0x02
	tenuErrrorStatus enuReturnLoc =EOK;
    18e6:	19 82       	std	Y+1, r1	; 0x01
		if (u8SevIndexCpy < SEV_MAX_NUM)
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	86 30       	cpi	r24, 0x06	; 6
    18ec:	08 f0       	brcs	.+2      	; 0x18f0 <SEV_enuDisable+0x16>
    18ee:	4f c0       	rjmp	.+158    	; 0x198e <SEV_enuDisable+0xb4>
		{
			if (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_CATHODE)
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	c9 01       	movw	r24, r18
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	82 0f       	add	r24, r18
    1906:	93 1f       	adc	r25, r19
    1908:	fc 01       	movw	r30, r24
    190a:	e9 55       	subi	r30, 0x59	; 89
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	80 81       	ld	r24, Z
    1910:	84 31       	cpi	r24, 0x14	; 20
    1912:	a1 f4       	brne	.+40     	; 0x193c <SEV_enuDisable+0x62>
			{
				DIO_enuWritePin(SEV_ConfigSet[u8SevIndexCpy].u8common ,DIO_HIGH);
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	c9 01       	movw	r24, r18
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	82 0f       	add	r24, r18
    192a:	93 1f       	adc	r25, r19
    192c:	fc 01       	movw	r30, r24
    192e:	ea 55       	subi	r30, 0x5A	; 90
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	80 81       	ld	r24, Z
    1934:	61 e0       	ldi	r22, 0x01	; 1
    1936:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>
    193a:	2b c0       	rjmp	.+86     	; 0x1992 <SEV_enuDisable+0xb8>
			}
			else if  (SEV_ConfigSet[u8SevIndexCpy].u8ConMode==COMMON_ANODE)
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	c9 01       	movw	r24, r18
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	82 0f       	add	r24, r18
    1952:	93 1f       	adc	r25, r19
    1954:	fc 01       	movw	r30, r24
    1956:	e9 55       	subi	r30, 0x59	; 89
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	80 81       	ld	r24, Z
    195c:	8a 30       	cpi	r24, 0x0A	; 10
    195e:	a1 f4       	brne	.+40     	; 0x1988 <SEV_enuDisable+0xae>
			{
				DIO_enuWritePin(SEV_ConfigSet[u8SevIndexCpy].u8common ,DIO_LOW);
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	c9 01       	movw	r24, r18
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	82 0f       	add	r24, r18
    1976:	93 1f       	adc	r25, r19
    1978:	fc 01       	movw	r30, r24
    197a:	ea 55       	subi	r30, 0x5A	; 90
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	80 81       	ld	r24, Z
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>
    1986:	05 c0       	rjmp	.+10     	; 0x1992 <SEV_enuDisable+0xb8>
			}
			else
			{
				enuReturnLoc=ENOK;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <SEV_enuDisable+0xb8>

			}
		}
		else
		{
			enuReturnLoc =PARAMRETER_OUT_RANGE;
    198e:	82 e0       	ldi	r24, 0x02	; 2
    1990:	89 83       	std	Y+1, r24	; 0x01
		}

		return enuReturnLoc;
    1992:	89 81       	ldd	r24, Y+1	; 0x01
}
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <LCD_voidInit>:
#include "LCD_cfg.h"
#include "LCD_priv.h"


void LCD_voidInit(void)
{
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	ce 58       	subi	r28, 0x8E	; 142
    19ac:	d0 40       	sbci	r29, 0x00	; 0
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CntLoc;
	uint8 u8commnad=0;
    19b8:	fe 01       	movw	r30, r28
    19ba:	e3 57       	subi	r30, 0x73	; 115
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	10 82       	st	Z, r1
	for (u8CntLoc =0  ; u8CntLoc <MAX_NUM ; u8CntLoc++)
    19c0:	fe 01       	movw	r30, r28
    19c2:	e2 57       	subi	r30, 0x72	; 114
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	10 82       	st	Z, r1
    19c8:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <LCD_voidInit+0x1068>
	{
		/*inilize 8 bit */
		if(lcdarr[u8CntLoc].lcdswconfig.u8mode ==LCD_8_BIT_MODE)
    19cc:	fe 01       	movw	r30, r28
    19ce:	e2 57       	subi	r30, 0x72	; 114
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	80 81       	ld	r24, Z
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	c9 01       	movw	r24, r18
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	82 0f       	add	r24, r18
    19e0:	93 1f       	adc	r25, r19
    19e2:	88 0f       	add	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	fc 01       	movw	r30, r24
    19ec:	eb 52       	subi	r30, 0x2B	; 43
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 81       	ld	r24, Z
    19f2:	81 70       	andi	r24, 0x01	; 1
    19f4:	81 30       	cpi	r24, 0x01	; 1
    19f6:	09 f0       	breq	.+2      	; 0x19fa <LCD_voidInit+0x5c>
    19f8:	75 c4       	rjmp	.+2282   	; 0x22e4 <LCD_voidInit+0x946>
    19fa:	fe 01       	movw	r30, r28
    19fc:	e7 57       	subi	r30, 0x77	; 119
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	a0 ef       	ldi	r26, 0xF0	; 240
    1a06:	b1 e4       	ldi	r27, 0x41	; 65
    1a08:	80 83       	st	Z, r24
    1a0a:	91 83       	std	Z+1, r25	; 0x01
    1a0c:	a2 83       	std	Z+2, r26	; 0x02
    1a0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a10:	8e 01       	movw	r16, r28
    1a12:	0b 57       	subi	r16, 0x7B	; 123
    1a14:	1f 4f       	sbci	r17, 0xFF	; 255
    1a16:	fe 01       	movw	r30, r28
    1a18:	e7 57       	subi	r30, 0x77	; 119
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	60 81       	ld	r22, Z
    1a1e:	71 81       	ldd	r23, Z+1	; 0x01
    1a20:	82 81       	ldd	r24, Z+2	; 0x02
    1a22:	93 81       	ldd	r25, Z+3	; 0x03
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	4a ef       	ldi	r20, 0xFA	; 250
    1a2a:	54 e4       	ldi	r21, 0x44	; 68
    1a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	f8 01       	movw	r30, r16
    1a36:	80 83       	st	Z, r24
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	a2 83       	std	Z+2, r26	; 0x02
    1a3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a3e:	fe 01       	movw	r30, r28
    1a40:	eb 57       	subi	r30, 0x7B	; 123
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e8       	ldi	r20, 0x80	; 128
    1a52:	5f e3       	ldi	r21, 0x3F	; 63
    1a54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a58:	88 23       	and	r24, r24
    1a5a:	44 f4       	brge	.+16     	; 0x1a6c <LCD_voidInit+0xce>
		__ticks = 1;
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	ed 57       	subi	r30, 0x7D	; 125
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	80 83       	st	Z, r24
    1a6a:	64 c0       	rjmp	.+200    	; 0x1b34 <LCD_voidInit+0x196>
	else if (__tmp > 65535)
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	eb 57       	subi	r30, 0x7B	; 123
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	60 81       	ld	r22, Z
    1a74:	71 81       	ldd	r23, Z+1	; 0x01
    1a76:	82 81       	ldd	r24, Z+2	; 0x02
    1a78:	93 81       	ldd	r25, Z+3	; 0x03
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	3f ef       	ldi	r19, 0xFF	; 255
    1a7e:	4f e7       	ldi	r20, 0x7F	; 127
    1a80:	57 e4       	ldi	r21, 0x47	; 71
    1a82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a86:	18 16       	cp	r1, r24
    1a88:	0c f0       	brlt	.+2      	; 0x1a8c <LCD_voidInit+0xee>
    1a8a:	43 c0       	rjmp	.+134    	; 0x1b12 <LCD_voidInit+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e7 57       	subi	r30, 0x77	; 119
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e2       	ldi	r20, 0x20	; 32
    1aa0:	51 e4       	ldi	r21, 0x41	; 65
    1aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	8e 01       	movw	r16, r28
    1aac:	0d 57       	subi	r16, 0x7D	; 125
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	f8 01       	movw	r30, r16
    1abe:	91 83       	std	Z+1, r25	; 0x01
    1ac0:	80 83       	st	Z, r24
    1ac2:	1f c0       	rjmp	.+62     	; 0x1b02 <LCD_voidInit+0x164>
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	ef 57       	subi	r30, 0x7F	; 127
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	88 ec       	ldi	r24, 0xC8	; 200
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	91 83       	std	Z+1, r25	; 0x01
    1ad0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	ef 57       	subi	r30, 0x7F	; 127
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	80 81       	ld	r24, Z
    1ada:	91 81       	ldd	r25, Z+1	; 0x01
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <LCD_voidInit+0x13e>
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	ef 57       	subi	r30, 0x7F	; 127
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	91 83       	std	Z+1, r25	; 0x01
    1ae8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aea:	de 01       	movw	r26, r28
    1aec:	ad 57       	subi	r26, 0x7D	; 125
    1aee:	bf 4f       	sbci	r27, 0xFF	; 255
    1af0:	fe 01       	movw	r30, r28
    1af2:	ed 57       	subi	r30, 0x7D	; 125
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 81       	ld	r24, Z
    1af8:	91 81       	ldd	r25, Z+1	; 0x01
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	11 96       	adiw	r26, 0x01	; 1
    1afe:	9c 93       	st	X, r25
    1b00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b02:	fe 01       	movw	r30, r28
    1b04:	ed 57       	subi	r30, 0x7D	; 125
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	80 81       	ld	r24, Z
    1b0a:	91 81       	ldd	r25, Z+1	; 0x01
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	d1 f6       	brne	.-76     	; 0x1ac4 <LCD_voidInit+0x126>
    1b10:	27 c0       	rjmp	.+78     	; 0x1b60 <LCD_voidInit+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	8e 01       	movw	r16, r28
    1b14:	0d 57       	subi	r16, 0x7D	; 125
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	fe 01       	movw	r30, r28
    1b1a:	eb 57       	subi	r30, 0x7B	; 123
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	f8 01       	movw	r30, r16
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	80 83       	st	Z, r24
    1b34:	de 01       	movw	r26, r28
    1b36:	a1 58       	subi	r26, 0x81	; 129
    1b38:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	ed 57       	subi	r30, 0x7D	; 125
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	80 81       	ld	r24, Z
    1b42:	91 81       	ldd	r25, Z+1	; 0x01
    1b44:	8d 93       	st	X+, r24
    1b46:	9c 93       	st	X, r25
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e1 58       	subi	r30, 0x81	; 129
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	80 81       	ld	r24, Z
    1b50:	91 81       	ldd	r25, Z+1	; 0x01
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <LCD_voidInit+0x1b4>
    1b56:	fe 01       	movw	r30, r28
    1b58:	e1 58       	subi	r30, 0x81	; 129
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	91 83       	std	Z+1, r25	; 0x01
    1b5e:	80 83       	st	Z, r24
		{
			/*step 1*/
			_delay_ms(30);

			u8commnad=0b00110000 |lcdarr[u8CntLoc].lcdswconfig.u8font <<2
    1b60:	fe 01       	movw	r30, r28
    1b62:	e2 57       	subi	r30, 0x72	; 114
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	80 81       	ld	r24, Z
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	c9 01       	movw	r24, r18
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	82 0f       	add	r24, r18
    1b74:	93 1f       	adc	r25, r19
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	fc 01       	movw	r30, r24
    1b80:	eb 52       	subi	r30, 0x2B	; 43
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 81       	ld	r24, Z
    1b86:	86 95       	lsr	r24
    1b88:	86 95       	lsr	r24
    1b8a:	81 70       	andi	r24, 0x01	; 1
    1b8c:	88 2f       	mov	r24, r24
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	48 2f       	mov	r20, r24
    1b9a:	40 63       	ori	r20, 0x30	; 48
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e2 57       	subi	r30, 0x72	; 114
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	80 81       	ld	r24, Z
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	c9 01       	movw	r24, r18
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	82 0f       	add	r24, r18
    1bb0:	93 1f       	adc	r25, r19
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	fc 01       	movw	r30, r24
    1bbc:	eb 52       	subi	r30, 0x2B	; 43
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	80 81       	ld	r24, Z
    1bc2:	86 95       	lsr	r24
    1bc4:	81 70       	andi	r24, 0x01	; 1
    1bc6:	88 2f       	mov	r24, r24
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	84 2b       	or	r24, r20
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e3 57       	subi	r30, 0x73	; 115
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	80 83       	st	Z, r24
					|lcdarr[u8CntLoc].lcdswconfig.u8line<<3 ;
			/* send command */
			voidWriteCmd(u8CntLoc,u8commnad);
    1be0:	fe 01       	movw	r30, r28
    1be2:	e2 57       	subi	r30, 0x72	; 114
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	de 01       	movw	r26, r28
    1be8:	a3 57       	subi	r26, 0x73	; 115
    1bea:	bf 4f       	sbci	r27, 0xFF	; 255
    1bec:	80 81       	ld	r24, Z
    1bee:	6c 91       	ld	r22, X
    1bf0:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <voidWriteCmd>
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e5 58       	subi	r30, 0x85	; 133
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	a0 e8       	ldi	r26, 0x80	; 128
    1c00:	bf e3       	ldi	r27, 0x3F	; 63
    1c02:	80 83       	st	Z, r24
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	a2 83       	std	Z+2, r26	; 0x02
    1c08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0a:	8e 01       	movw	r16, r28
    1c0c:	09 58       	subi	r16, 0x89	; 137
    1c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c10:	fe 01       	movw	r30, r28
    1c12:	e5 58       	subi	r30, 0x85	; 133
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	4a ef       	ldi	r20, 0xFA	; 250
    1c24:	54 e4       	ldi	r21, 0x44	; 68
    1c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	f8 01       	movw	r30, r16
    1c30:	80 83       	st	Z, r24
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	a2 83       	std	Z+2, r26	; 0x02
    1c36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c38:	fe 01       	movw	r30, r28
    1c3a:	e9 58       	subi	r30, 0x89	; 137
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	60 81       	ld	r22, Z
    1c40:	71 81       	ldd	r23, Z+1	; 0x01
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e8       	ldi	r20, 0x80	; 128
    1c4c:	5f e3       	ldi	r21, 0x3F	; 63
    1c4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c52:	88 23       	and	r24, r24
    1c54:	44 f4       	brge	.+16     	; 0x1c66 <LCD_voidInit+0x2c8>
		__ticks = 1;
    1c56:	fe 01       	movw	r30, r28
    1c58:	eb 58       	subi	r30, 0x8B	; 139
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	91 83       	std	Z+1, r25	; 0x01
    1c62:	80 83       	st	Z, r24
    1c64:	64 c0       	rjmp	.+200    	; 0x1d2e <LCD_voidInit+0x390>
	else if (__tmp > 65535)
    1c66:	fe 01       	movw	r30, r28
    1c68:	e9 58       	subi	r30, 0x89	; 137
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	60 81       	ld	r22, Z
    1c6e:	71 81       	ldd	r23, Z+1	; 0x01
    1c70:	82 81       	ldd	r24, Z+2	; 0x02
    1c72:	93 81       	ldd	r25, Z+3	; 0x03
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	3f ef       	ldi	r19, 0xFF	; 255
    1c78:	4f e7       	ldi	r20, 0x7F	; 127
    1c7a:	57 e4       	ldi	r21, 0x47	; 71
    1c7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c80:	18 16       	cp	r1, r24
    1c82:	0c f0       	brlt	.+2      	; 0x1c86 <LCD_voidInit+0x2e8>
    1c84:	43 c0       	rjmp	.+134    	; 0x1d0c <LCD_voidInit+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c86:	fe 01       	movw	r30, r28
    1c88:	e5 58       	subi	r30, 0x85	; 133
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	60 81       	ld	r22, Z
    1c8e:	71 81       	ldd	r23, Z+1	; 0x01
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e2       	ldi	r20, 0x20	; 32
    1c9a:	51 e4       	ldi	r21, 0x41	; 65
    1c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	8e 01       	movw	r16, r28
    1ca6:	0b 58       	subi	r16, 0x8B	; 139
    1ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    1caa:	bc 01       	movw	r22, r24
    1cac:	cd 01       	movw	r24, r26
    1cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	80 83       	st	Z, r24
    1cbc:	1f c0       	rjmp	.+62     	; 0x1cfc <LCD_voidInit+0x35e>
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	ed 58       	subi	r30, 0x8D	; 141
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	88 ec       	ldi	r24, 0xC8	; 200
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	91 83       	std	Z+1, r25	; 0x01
    1cca:	80 83       	st	Z, r24
    1ccc:	fe 01       	movw	r30, r28
    1cce:	ed 58       	subi	r30, 0x8D	; 141
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	80 81       	ld	r24, Z
    1cd4:	91 81       	ldd	r25, Z+1	; 0x01
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	f1 f7       	brne	.-4      	; 0x1cd6 <LCD_voidInit+0x338>
    1cda:	fe 01       	movw	r30, r28
    1cdc:	ed 58       	subi	r30, 0x8D	; 141
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce4:	de 01       	movw	r26, r28
    1ce6:	ab 58       	subi	r26, 0x8B	; 139
    1ce8:	bf 4f       	sbci	r27, 0xFF	; 255
    1cea:	fe 01       	movw	r30, r28
    1cec:	eb 58       	subi	r30, 0x8B	; 139
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	80 81       	ld	r24, Z
    1cf2:	91 81       	ldd	r25, Z+1	; 0x01
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	11 96       	adiw	r26, 0x01	; 1
    1cf8:	9c 93       	st	X, r25
    1cfa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	eb 58       	subi	r30, 0x8B	; 139
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	d1 f6       	brne	.-76     	; 0x1cbe <LCD_voidInit+0x320>
    1d0a:	27 c0       	rjmp	.+78     	; 0x1d5a <LCD_voidInit+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0c:	8e 01       	movw	r16, r28
    1d0e:	0b 58       	subi	r16, 0x8B	; 139
    1d10:	1f 4f       	sbci	r17, 0xFF	; 255
    1d12:	fe 01       	movw	r30, r28
    1d14:	e9 58       	subi	r30, 0x89	; 137
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	60 81       	ld	r22, Z
    1d1a:	71 81       	ldd	r23, Z+1	; 0x01
    1d1c:	82 81       	ldd	r24, Z+2	; 0x02
    1d1e:	93 81       	ldd	r25, Z+3	; 0x03
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	f8 01       	movw	r30, r16
    1d2a:	91 83       	std	Z+1, r25	; 0x01
    1d2c:	80 83       	st	Z, r24
    1d2e:	de 01       	movw	r26, r28
    1d30:	af 58       	subi	r26, 0x8F	; 143
    1d32:	bf 4f       	sbci	r27, 0xFF	; 255
    1d34:	fe 01       	movw	r30, r28
    1d36:	eb 58       	subi	r30, 0x8B	; 139
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 81       	ld	r24, Z
    1d3c:	91 81       	ldd	r25, Z+1	; 0x01
    1d3e:	8d 93       	st	X+, r24
    1d40:	9c 93       	st	X, r25
    1d42:	fe 01       	movw	r30, r28
    1d44:	ef 58       	subi	r30, 0x8F	; 143
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	80 81       	ld	r24, Z
    1d4a:	91 81       	ldd	r25, Z+1	; 0x01
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <LCD_voidInit+0x3ae>
    1d50:	fe 01       	movw	r30, r28
    1d52:	ef 58       	subi	r30, 0x8F	; 143
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	91 83       	std	Z+1, r25	; 0x01
    1d58:	80 83       	st	Z, r24
			/*more than 39 micro*/
			_delay_ms(1);
			u8commnad=0b00001000 |lcdarr[u8CntLoc].lcdswconfig.u8display<<2 |
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e2 57       	subi	r30, 0x72	; 114
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	80 81       	ld	r24, Z
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	c9 01       	movw	r24, r18
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	82 0f       	add	r24, r18
    1d6e:	93 1f       	adc	r25, r19
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	fc 01       	movw	r30, r24
    1d7a:	eb 52       	subi	r30, 0x2B	; 43
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	80 81       	ld	r24, Z
    1d80:	82 95       	swap	r24
    1d82:	86 95       	lsr	r24
    1d84:	86 95       	lsr	r24
    1d86:	83 70       	andi	r24, 0x03	; 3
    1d88:	81 70       	andi	r24, 0x01	; 1
    1d8a:	88 2f       	mov	r24, r24
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	48 2f       	mov	r20, r24
    1d98:	48 60       	ori	r20, 0x08	; 8
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	e2 57       	subi	r30, 0x72	; 114
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	80 81       	ld	r24, Z
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	c9 01       	movw	r24, r18
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	82 0f       	add	r24, r18
    1dae:	93 1f       	adc	r25, r19
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	fc 01       	movw	r30, r24
    1dba:	eb 52       	subi	r30, 0x2B	; 43
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	80 81       	ld	r24, Z
    1dc0:	86 95       	lsr	r24
    1dc2:	86 95       	lsr	r24
    1dc4:	86 95       	lsr	r24
    1dc6:	81 70       	andi	r24, 0x01	; 1
    1dc8:	88 2f       	mov	r24, r24
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	48 2b       	or	r20, r24
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	e2 57       	subi	r30, 0x72	; 114
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	80 81       	ld	r24, Z
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	c9 01       	movw	r24, r18
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	82 0f       	add	r24, r18
    1de6:	93 1f       	adc	r25, r19
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	fc 01       	movw	r30, r24
    1df2:	eb 52       	subi	r30, 0x2B	; 43
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	80 81       	ld	r24, Z
    1df8:	82 95       	swap	r24
    1dfa:	8f 70       	andi	r24, 0x0F	; 15
    1dfc:	81 70       	andi	r24, 0x01	; 1
    1dfe:	84 2b       	or	r24, r20
    1e00:	fe 01       	movw	r30, r28
    1e02:	e3 57       	subi	r30, 0x73	; 115
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	80 83       	st	Z, r24
									lcdarr[u8CntLoc].lcdswconfig.u8coursorstate<<1 |
									lcdarr[u8CntLoc].lcdswconfig.u8coursorblink<<0 ;

			voidWriteCmd(u8CntLoc,u8commnad);
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e2 57       	subi	r30, 0x72	; 114
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	de 01       	movw	r26, r28
    1e10:	a3 57       	subi	r26, 0x73	; 115
    1e12:	bf 4f       	sbci	r27, 0xFF	; 255
    1e14:	80 81       	ld	r24, Z
    1e16:	6c 91       	ld	r22, X
    1e18:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <voidWriteCmd>
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	e3 59       	subi	r30, 0x93	; 147
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	a0 e8       	ldi	r26, 0x80	; 128
    1e28:	bf e3       	ldi	r27, 0x3F	; 63
    1e2a:	80 83       	st	Z, r24
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	a2 83       	std	Z+2, r26	; 0x02
    1e30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e32:	8e 01       	movw	r16, r28
    1e34:	07 59       	subi	r16, 0x97	; 151
    1e36:	1f 4f       	sbci	r17, 0xFF	; 255
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e3 59       	subi	r30, 0x93	; 147
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	60 81       	ld	r22, Z
    1e40:	71 81       	ldd	r23, Z+1	; 0x01
    1e42:	82 81       	ldd	r24, Z+2	; 0x02
    1e44:	93 81       	ldd	r25, Z+3	; 0x03
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	4a ef       	ldi	r20, 0xFA	; 250
    1e4c:	54 e4       	ldi	r21, 0x44	; 68
    1e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	f8 01       	movw	r30, r16
    1e58:	80 83       	st	Z, r24
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	a2 83       	std	Z+2, r26	; 0x02
    1e5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e60:	fe 01       	movw	r30, r28
    1e62:	e7 59       	subi	r30, 0x97	; 151
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	60 81       	ld	r22, Z
    1e68:	71 81       	ldd	r23, Z+1	; 0x01
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	93 81       	ldd	r25, Z+3	; 0x03
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e8       	ldi	r20, 0x80	; 128
    1e74:	5f e3       	ldi	r21, 0x3F	; 63
    1e76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e7a:	88 23       	and	r24, r24
    1e7c:	44 f4       	brge	.+16     	; 0x1e8e <LCD_voidInit+0x4f0>
		__ticks = 1;
    1e7e:	fe 01       	movw	r30, r28
    1e80:	e9 59       	subi	r30, 0x99	; 153
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	91 83       	std	Z+1, r25	; 0x01
    1e8a:	80 83       	st	Z, r24
    1e8c:	64 c0       	rjmp	.+200    	; 0x1f56 <LCD_voidInit+0x5b8>
	else if (__tmp > 65535)
    1e8e:	fe 01       	movw	r30, r28
    1e90:	e7 59       	subi	r30, 0x97	; 151
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	60 81       	ld	r22, Z
    1e96:	71 81       	ldd	r23, Z+1	; 0x01
    1e98:	82 81       	ldd	r24, Z+2	; 0x02
    1e9a:	93 81       	ldd	r25, Z+3	; 0x03
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ea0:	4f e7       	ldi	r20, 0x7F	; 127
    1ea2:	57 e4       	ldi	r21, 0x47	; 71
    1ea4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea8:	18 16       	cp	r1, r24
    1eaa:	0c f0       	brlt	.+2      	; 0x1eae <LCD_voidInit+0x510>
    1eac:	43 c0       	rjmp	.+134    	; 0x1f34 <LCD_voidInit+0x596>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e3 59       	subi	r30, 0x93	; 147
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	60 81       	ld	r22, Z
    1eb6:	71 81       	ldd	r23, Z+1	; 0x01
    1eb8:	82 81       	ldd	r24, Z+2	; 0x02
    1eba:	93 81       	ldd	r25, Z+3	; 0x03
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e2       	ldi	r20, 0x20	; 32
    1ec2:	51 e4       	ldi	r21, 0x41	; 65
    1ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	8e 01       	movw	r16, r28
    1ece:	09 59       	subi	r16, 0x99	; 153
    1ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	f8 01       	movw	r30, r16
    1ee0:	91 83       	std	Z+1, r25	; 0x01
    1ee2:	80 83       	st	Z, r24
    1ee4:	1f c0       	rjmp	.+62     	; 0x1f24 <LCD_voidInit+0x586>
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	eb 59       	subi	r30, 0x9B	; 155
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	88 ec       	ldi	r24, 0xC8	; 200
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	91 83       	std	Z+1, r25	; 0x01
    1ef2:	80 83       	st	Z, r24
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	eb 59       	subi	r30, 0x9B	; 155
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	80 81       	ld	r24, Z
    1efc:	91 81       	ldd	r25, Z+1	; 0x01
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <LCD_voidInit+0x560>
    1f02:	fe 01       	movw	r30, r28
    1f04:	eb 59       	subi	r30, 0x9B	; 155
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	91 83       	std	Z+1, r25	; 0x01
    1f0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0c:	de 01       	movw	r26, r28
    1f0e:	a9 59       	subi	r26, 0x99	; 153
    1f10:	bf 4f       	sbci	r27, 0xFF	; 255
    1f12:	fe 01       	movw	r30, r28
    1f14:	e9 59       	subi	r30, 0x99	; 153
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	80 81       	ld	r24, Z
    1f1a:	91 81       	ldd	r25, Z+1	; 0x01
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	11 96       	adiw	r26, 0x01	; 1
    1f20:	9c 93       	st	X, r25
    1f22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f24:	fe 01       	movw	r30, r28
    1f26:	e9 59       	subi	r30, 0x99	; 153
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	80 81       	ld	r24, Z
    1f2c:	91 81       	ldd	r25, Z+1	; 0x01
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	d1 f6       	brne	.-76     	; 0x1ee6 <LCD_voidInit+0x548>
    1f32:	27 c0       	rjmp	.+78     	; 0x1f82 <LCD_voidInit+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f34:	8e 01       	movw	r16, r28
    1f36:	09 59       	subi	r16, 0x99	; 153
    1f38:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	e7 59       	subi	r30, 0x97	; 151
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	60 81       	ld	r22, Z
    1f42:	71 81       	ldd	r23, Z+1	; 0x01
    1f44:	82 81       	ldd	r24, Z+2	; 0x02
    1f46:	93 81       	ldd	r25, Z+3	; 0x03
    1f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	f8 01       	movw	r30, r16
    1f52:	91 83       	std	Z+1, r25	; 0x01
    1f54:	80 83       	st	Z, r24
    1f56:	de 01       	movw	r26, r28
    1f58:	ad 59       	subi	r26, 0x9D	; 157
    1f5a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e9 59       	subi	r30, 0x99	; 153
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	80 81       	ld	r24, Z
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	8d 93       	st	X+, r24
    1f68:	9c 93       	st	X, r25
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	ed 59       	subi	r30, 0x9D	; 157
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	80 81       	ld	r24, Z
    1f72:	91 81       	ldd	r25, Z+1	; 0x01
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_voidInit+0x5d6>
    1f78:	fe 01       	movw	r30, r28
    1f7a:	ed 59       	subi	r30, 0x9D	; 157
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
			_delay_ms(1);
			voidWriteCmd(u8CntLoc,0x01);
    1f82:	fe 01       	movw	r30, r28
    1f84:	e2 57       	subi	r30, 0x72	; 114
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	80 81       	ld	r24, Z
    1f8a:	61 e0       	ldi	r22, 0x01	; 1
    1f8c:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <voidWriteCmd>
    1f90:	fe 01       	movw	r30, r28
    1f92:	e1 5a       	subi	r30, 0xA1	; 161
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a0 e4       	ldi	r26, 0x40	; 64
    1f9c:	b0 e4       	ldi	r27, 0x40	; 64
    1f9e:	80 83       	st	Z, r24
    1fa0:	91 83       	std	Z+1, r25	; 0x01
    1fa2:	a2 83       	std	Z+2, r26	; 0x02
    1fa4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa6:	8e 01       	movw	r16, r28
    1fa8:	05 5a       	subi	r16, 0xA5	; 165
    1faa:	1f 4f       	sbci	r17, 0xFF	; 255
    1fac:	fe 01       	movw	r30, r28
    1fae:	e1 5a       	subi	r30, 0xA1	; 161
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	60 81       	ld	r22, Z
    1fb4:	71 81       	ldd	r23, Z+1	; 0x01
    1fb6:	82 81       	ldd	r24, Z+2	; 0x02
    1fb8:	93 81       	ldd	r25, Z+3	; 0x03
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	4a ef       	ldi	r20, 0xFA	; 250
    1fc0:	54 e4       	ldi	r21, 0x44	; 68
    1fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	f8 01       	movw	r30, r16
    1fcc:	80 83       	st	Z, r24
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	a2 83       	std	Z+2, r26	; 0x02
    1fd2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e5 5a       	subi	r30, 0xA5	; 165
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	60 81       	ld	r22, Z
    1fdc:	71 81       	ldd	r23, Z+1	; 0x01
    1fde:	82 81       	ldd	r24, Z+2	; 0x02
    1fe0:	93 81       	ldd	r25, Z+3	; 0x03
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e8       	ldi	r20, 0x80	; 128
    1fe8:	5f e3       	ldi	r21, 0x3F	; 63
    1fea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fee:	88 23       	and	r24, r24
    1ff0:	44 f4       	brge	.+16     	; 0x2002 <LCD_voidInit+0x664>
		__ticks = 1;
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e7 5a       	subi	r30, 0xA7	; 167
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	91 83       	std	Z+1, r25	; 0x01
    1ffe:	80 83       	st	Z, r24
    2000:	64 c0       	rjmp	.+200    	; 0x20ca <LCD_voidInit+0x72c>
	else if (__tmp > 65535)
    2002:	fe 01       	movw	r30, r28
    2004:	e5 5a       	subi	r30, 0xA5	; 165
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	60 81       	ld	r22, Z
    200a:	71 81       	ldd	r23, Z+1	; 0x01
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	93 81       	ldd	r25, Z+3	; 0x03
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	3f ef       	ldi	r19, 0xFF	; 255
    2014:	4f e7       	ldi	r20, 0x7F	; 127
    2016:	57 e4       	ldi	r21, 0x47	; 71
    2018:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    201c:	18 16       	cp	r1, r24
    201e:	0c f0       	brlt	.+2      	; 0x2022 <LCD_voidInit+0x684>
    2020:	43 c0       	rjmp	.+134    	; 0x20a8 <LCD_voidInit+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2022:	fe 01       	movw	r30, r28
    2024:	e1 5a       	subi	r30, 0xA1	; 161
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	60 81       	ld	r22, Z
    202a:	71 81       	ldd	r23, Z+1	; 0x01
    202c:	82 81       	ldd	r24, Z+2	; 0x02
    202e:	93 81       	ldd	r25, Z+3	; 0x03
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e2       	ldi	r20, 0x20	; 32
    2036:	51 e4       	ldi	r21, 0x41	; 65
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	8e 01       	movw	r16, r28
    2042:	07 5a       	subi	r16, 0xA7	; 167
    2044:	1f 4f       	sbci	r17, 0xFF	; 255
    2046:	bc 01       	movw	r22, r24
    2048:	cd 01       	movw	r24, r26
    204a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	f8 01       	movw	r30, r16
    2054:	91 83       	std	Z+1, r25	; 0x01
    2056:	80 83       	st	Z, r24
    2058:	1f c0       	rjmp	.+62     	; 0x2098 <LCD_voidInit+0x6fa>
    205a:	fe 01       	movw	r30, r28
    205c:	e9 5a       	subi	r30, 0xA9	; 169
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	88 ec       	ldi	r24, 0xC8	; 200
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	91 83       	std	Z+1, r25	; 0x01
    2066:	80 83       	st	Z, r24
    2068:	fe 01       	movw	r30, r28
    206a:	e9 5a       	subi	r30, 0xA9	; 169
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	80 81       	ld	r24, Z
    2070:	91 81       	ldd	r25, Z+1	; 0x01
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <LCD_voidInit+0x6d4>
    2076:	fe 01       	movw	r30, r28
    2078:	e9 5a       	subi	r30, 0xA9	; 169
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	91 83       	std	Z+1, r25	; 0x01
    207e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2080:	de 01       	movw	r26, r28
    2082:	a7 5a       	subi	r26, 0xA7	; 167
    2084:	bf 4f       	sbci	r27, 0xFF	; 255
    2086:	fe 01       	movw	r30, r28
    2088:	e7 5a       	subi	r30, 0xA7	; 167
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	80 81       	ld	r24, Z
    208e:	91 81       	ldd	r25, Z+1	; 0x01
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	11 96       	adiw	r26, 0x01	; 1
    2094:	9c 93       	st	X, r25
    2096:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2098:	fe 01       	movw	r30, r28
    209a:	e7 5a       	subi	r30, 0xA7	; 167
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	80 81       	ld	r24, Z
    20a0:	91 81       	ldd	r25, Z+1	; 0x01
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	d1 f6       	brne	.-76     	; 0x205a <LCD_voidInit+0x6bc>
    20a6:	27 c0       	rjmp	.+78     	; 0x20f6 <LCD_voidInit+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a8:	8e 01       	movw	r16, r28
    20aa:	07 5a       	subi	r16, 0xA7	; 167
    20ac:	1f 4f       	sbci	r17, 0xFF	; 255
    20ae:	fe 01       	movw	r30, r28
    20b0:	e5 5a       	subi	r30, 0xA5	; 165
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	60 81       	ld	r22, Z
    20b6:	71 81       	ldd	r23, Z+1	; 0x01
    20b8:	82 81       	ldd	r24, Z+2	; 0x02
    20ba:	93 81       	ldd	r25, Z+3	; 0x03
    20bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	f8 01       	movw	r30, r16
    20c6:	91 83       	std	Z+1, r25	; 0x01
    20c8:	80 83       	st	Z, r24
    20ca:	de 01       	movw	r26, r28
    20cc:	ab 5a       	subi	r26, 0xAB	; 171
    20ce:	bf 4f       	sbci	r27, 0xFF	; 255
    20d0:	fe 01       	movw	r30, r28
    20d2:	e7 5a       	subi	r30, 0xA7	; 167
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	80 81       	ld	r24, Z
    20d8:	91 81       	ldd	r25, Z+1	; 0x01
    20da:	8d 93       	st	X+, r24
    20dc:	9c 93       	st	X, r25
    20de:	fe 01       	movw	r30, r28
    20e0:	eb 5a       	subi	r30, 0xAB	; 171
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	80 81       	ld	r24, Z
    20e6:	91 81       	ldd	r25, Z+1	; 0x01
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <LCD_voidInit+0x74a>
    20ec:	fe 01       	movw	r30, r28
    20ee:	eb 5a       	subi	r30, 0xAB	; 171
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	91 83       	std	Z+1, r25	; 0x01
    20f4:	80 83       	st	Z, r24
			_delay_ms(3);
			u8commnad=0b00000100 | lcdarr[u8CntLoc].lcdswconfig.u8direction<<1 |
    20f6:	fe 01       	movw	r30, r28
    20f8:	e2 57       	subi	r30, 0x72	; 114
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	80 81       	ld	r24, Z
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	c9 01       	movw	r24, r18
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	82 0f       	add	r24, r18
    210a:	93 1f       	adc	r25, r19
    210c:	88 0f       	add	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	fc 01       	movw	r30, r24
    2116:	eb 52       	subi	r30, 0x2B	; 43
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	80 81       	ld	r24, Z
    211c:	88 1f       	adc	r24, r24
    211e:	88 27       	eor	r24, r24
    2120:	88 1f       	adc	r24, r24
    2122:	88 2f       	mov	r24, r24
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	48 2f       	mov	r20, r24
    212c:	44 60       	ori	r20, 0x04	; 4
    212e:	fe 01       	movw	r30, r28
    2130:	e2 57       	subi	r30, 0x72	; 114
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 81       	ld	r24, Z
    2136:	28 2f       	mov	r18, r24
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	c9 01       	movw	r24, r18
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	82 0f       	add	r24, r18
    2142:	93 1f       	adc	r25, r19
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	fc 01       	movw	r30, r24
    214e:	eb 52       	subi	r30, 0x2B	; 43
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	80 81       	ld	r24, Z
    2154:	82 95       	swap	r24
    2156:	86 95       	lsr	r24
    2158:	87 70       	andi	r24, 0x07	; 7
    215a:	81 70       	andi	r24, 0x01	; 1
    215c:	84 2b       	or	r24, r20
    215e:	fe 01       	movw	r30, r28
    2160:	e3 57       	subi	r30, 0x73	; 115
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	80 83       	st	Z, r24

								lcdarr[u8CntLoc].lcdswconfig.u8shift<<0;


			voidWriteCmd(u8CntLoc,u8commnad);
    2166:	fe 01       	movw	r30, r28
    2168:	e2 57       	subi	r30, 0x72	; 114
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	de 01       	movw	r26, r28
    216e:	a3 57       	subi	r26, 0x73	; 115
    2170:	bf 4f       	sbci	r27, 0xFF	; 255
    2172:	80 81       	ld	r24, Z
    2174:	6c 91       	ld	r22, X
    2176:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <voidWriteCmd>
    217a:	fe 01       	movw	r30, r28
    217c:	ef 5a       	subi	r30, 0xAF	; 175
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	a0 e4       	ldi	r26, 0x40	; 64
    2186:	b0 e4       	ldi	r27, 0x40	; 64
    2188:	80 83       	st	Z, r24
    218a:	91 83       	std	Z+1, r25	; 0x01
    218c:	a2 83       	std	Z+2, r26	; 0x02
    218e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2190:	8e 01       	movw	r16, r28
    2192:	03 5b       	subi	r16, 0xB3	; 179
    2194:	1f 4f       	sbci	r17, 0xFF	; 255
    2196:	fe 01       	movw	r30, r28
    2198:	ef 5a       	subi	r30, 0xAF	; 175
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	60 81       	ld	r22, Z
    219e:	71 81       	ldd	r23, Z+1	; 0x01
    21a0:	82 81       	ldd	r24, Z+2	; 0x02
    21a2:	93 81       	ldd	r25, Z+3	; 0x03
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	4a ef       	ldi	r20, 0xFA	; 250
    21aa:	54 e4       	ldi	r21, 0x44	; 68
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	f8 01       	movw	r30, r16
    21b6:	80 83       	st	Z, r24
    21b8:	91 83       	std	Z+1, r25	; 0x01
    21ba:	a2 83       	std	Z+2, r26	; 0x02
    21bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21be:	fe 01       	movw	r30, r28
    21c0:	e3 5b       	subi	r30, 0xB3	; 179
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	60 81       	ld	r22, Z
    21c6:	71 81       	ldd	r23, Z+1	; 0x01
    21c8:	82 81       	ldd	r24, Z+2	; 0x02
    21ca:	93 81       	ldd	r25, Z+3	; 0x03
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e8       	ldi	r20, 0x80	; 128
    21d2:	5f e3       	ldi	r21, 0x3F	; 63
    21d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d8:	88 23       	and	r24, r24
    21da:	44 f4       	brge	.+16     	; 0x21ec <LCD_voidInit+0x84e>
		__ticks = 1;
    21dc:	fe 01       	movw	r30, r28
    21de:	e5 5b       	subi	r30, 0xB5	; 181
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	91 83       	std	Z+1, r25	; 0x01
    21e8:	80 83       	st	Z, r24
    21ea:	64 c0       	rjmp	.+200    	; 0x22b4 <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    21ec:	fe 01       	movw	r30, r28
    21ee:	e3 5b       	subi	r30, 0xB3	; 179
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	60 81       	ld	r22, Z
    21f4:	71 81       	ldd	r23, Z+1	; 0x01
    21f6:	82 81       	ldd	r24, Z+2	; 0x02
    21f8:	93 81       	ldd	r25, Z+3	; 0x03
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	3f ef       	ldi	r19, 0xFF	; 255
    21fe:	4f e7       	ldi	r20, 0x7F	; 127
    2200:	57 e4       	ldi	r21, 0x47	; 71
    2202:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2206:	18 16       	cp	r1, r24
    2208:	0c f0       	brlt	.+2      	; 0x220c <LCD_voidInit+0x86e>
    220a:	43 c0       	rjmp	.+134    	; 0x2292 <LCD_voidInit+0x8f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220c:	fe 01       	movw	r30, r28
    220e:	ef 5a       	subi	r30, 0xAF	; 175
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	60 81       	ld	r22, Z
    2214:	71 81       	ldd	r23, Z+1	; 0x01
    2216:	82 81       	ldd	r24, Z+2	; 0x02
    2218:	93 81       	ldd	r25, Z+3	; 0x03
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e2       	ldi	r20, 0x20	; 32
    2220:	51 e4       	ldi	r21, 0x41	; 65
    2222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	8e 01       	movw	r16, r28
    222c:	05 5b       	subi	r16, 0xB5	; 181
    222e:	1f 4f       	sbci	r17, 0xFF	; 255
    2230:	bc 01       	movw	r22, r24
    2232:	cd 01       	movw	r24, r26
    2234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	f8 01       	movw	r30, r16
    223e:	91 83       	std	Z+1, r25	; 0x01
    2240:	80 83       	st	Z, r24
    2242:	1f c0       	rjmp	.+62     	; 0x2282 <LCD_voidInit+0x8e4>
    2244:	fe 01       	movw	r30, r28
    2246:	e7 5b       	subi	r30, 0xB7	; 183
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	88 ec       	ldi	r24, 0xC8	; 200
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	91 83       	std	Z+1, r25	; 0x01
    2250:	80 83       	st	Z, r24
    2252:	fe 01       	movw	r30, r28
    2254:	e7 5b       	subi	r30, 0xB7	; 183
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	80 81       	ld	r24, Z
    225a:	91 81       	ldd	r25, Z+1	; 0x01
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <LCD_voidInit+0x8be>
    2260:	fe 01       	movw	r30, r28
    2262:	e7 5b       	subi	r30, 0xB7	; 183
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	91 83       	std	Z+1, r25	; 0x01
    2268:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226a:	de 01       	movw	r26, r28
    226c:	a5 5b       	subi	r26, 0xB5	; 181
    226e:	bf 4f       	sbci	r27, 0xFF	; 255
    2270:	fe 01       	movw	r30, r28
    2272:	e5 5b       	subi	r30, 0xB5	; 181
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	80 81       	ld	r24, Z
    2278:	91 81       	ldd	r25, Z+1	; 0x01
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	11 96       	adiw	r26, 0x01	; 1
    227e:	9c 93       	st	X, r25
    2280:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2282:	fe 01       	movw	r30, r28
    2284:	e5 5b       	subi	r30, 0xB5	; 181
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	80 81       	ld	r24, Z
    228a:	91 81       	ldd	r25, Z+1	; 0x01
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	d1 f6       	brne	.-76     	; 0x2244 <LCD_voidInit+0x8a6>
    2290:	b1 c3       	rjmp	.+1890   	; 0x29f4 <LCD_voidInit+0x1056>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2292:	8e 01       	movw	r16, r28
    2294:	05 5b       	subi	r16, 0xB5	; 181
    2296:	1f 4f       	sbci	r17, 0xFF	; 255
    2298:	fe 01       	movw	r30, r28
    229a:	e3 5b       	subi	r30, 0xB3	; 179
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	60 81       	ld	r22, Z
    22a0:	71 81       	ldd	r23, Z+1	; 0x01
    22a2:	82 81       	ldd	r24, Z+2	; 0x02
    22a4:	93 81       	ldd	r25, Z+3	; 0x03
    22a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	f8 01       	movw	r30, r16
    22b0:	91 83       	std	Z+1, r25	; 0x01
    22b2:	80 83       	st	Z, r24
    22b4:	de 01       	movw	r26, r28
    22b6:	a9 5b       	subi	r26, 0xB9	; 185
    22b8:	bf 4f       	sbci	r27, 0xFF	; 255
    22ba:	fe 01       	movw	r30, r28
    22bc:	e5 5b       	subi	r30, 0xB5	; 181
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	80 81       	ld	r24, Z
    22c2:	91 81       	ldd	r25, Z+1	; 0x01
    22c4:	11 96       	adiw	r26, 0x01	; 1
    22c6:	9c 93       	st	X, r25
    22c8:	8e 93       	st	-X, r24
    22ca:	fe 01       	movw	r30, r28
    22cc:	e9 5b       	subi	r30, 0xB9	; 185
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	80 81       	ld	r24, Z
    22d2:	91 81       	ldd	r25, Z+1	; 0x01
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <LCD_voidInit+0x936>
    22d8:	fe 01       	movw	r30, r28
    22da:	e9 5b       	subi	r30, 0xB9	; 185
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	80 83       	st	Z, r24
    22e2:	88 c3       	rjmp	.+1808   	; 0x29f4 <LCD_voidInit+0x1056>
    22e4:	fe 01       	movw	r30, r28
    22e6:	ed 5b       	subi	r30, 0xBD	; 189
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	a0 ef       	ldi	r26, 0xF0	; 240
    22f0:	b1 e4       	ldi	r27, 0x41	; 65
    22f2:	80 83       	st	Z, r24
    22f4:	91 83       	std	Z+1, r25	; 0x01
    22f6:	a2 83       	std	Z+2, r26	; 0x02
    22f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fa:	8e 01       	movw	r16, r28
    22fc:	01 5c       	subi	r16, 0xC1	; 193
    22fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2300:	fe 01       	movw	r30, r28
    2302:	ed 5b       	subi	r30, 0xBD	; 189
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	60 81       	ld	r22, Z
    2308:	71 81       	ldd	r23, Z+1	; 0x01
    230a:	82 81       	ldd	r24, Z+2	; 0x02
    230c:	93 81       	ldd	r25, Z+3	; 0x03
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a ef       	ldi	r20, 0xFA	; 250
    2314:	54 e4       	ldi	r21, 0x44	; 68
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	f8 01       	movw	r30, r16
    2320:	80 83       	st	Z, r24
    2322:	91 83       	std	Z+1, r25	; 0x01
    2324:	a2 83       	std	Z+2, r26	; 0x02
    2326:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2328:	fe 01       	movw	r30, r28
    232a:	ff 96       	adiw	r30, 0x3f	; 63
    232c:	60 81       	ld	r22, Z
    232e:	71 81       	ldd	r23, Z+1	; 0x01
    2330:	82 81       	ldd	r24, Z+2	; 0x02
    2332:	93 81       	ldd	r25, Z+3	; 0x03
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e8       	ldi	r20, 0x80	; 128
    233a:	5f e3       	ldi	r21, 0x3F	; 63
    233c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2340:	88 23       	and	r24, r24
    2342:	2c f4       	brge	.+10     	; 0x234e <LCD_voidInit+0x9b0>
		__ticks = 1;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	9e af       	std	Y+62, r25	; 0x3e
    234a:	8d af       	std	Y+61, r24	; 0x3d
    234c:	46 c0       	rjmp	.+140    	; 0x23da <LCD_voidInit+0xa3c>
	else if (__tmp > 65535)
    234e:	fe 01       	movw	r30, r28
    2350:	ff 96       	adiw	r30, 0x3f	; 63
    2352:	60 81       	ld	r22, Z
    2354:	71 81       	ldd	r23, Z+1	; 0x01
    2356:	82 81       	ldd	r24, Z+2	; 0x02
    2358:	93 81       	ldd	r25, Z+3	; 0x03
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	4f e7       	ldi	r20, 0x7F	; 127
    2360:	57 e4       	ldi	r21, 0x47	; 71
    2362:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2366:	18 16       	cp	r1, r24
    2368:	64 f5       	brge	.+88     	; 0x23c2 <LCD_voidInit+0xa24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236a:	fe 01       	movw	r30, r28
    236c:	ed 5b       	subi	r30, 0xBD	; 189
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	60 81       	ld	r22, Z
    2372:	71 81       	ldd	r23, Z+1	; 0x01
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e2       	ldi	r20, 0x20	; 32
    237e:	51 e4       	ldi	r21, 0x41	; 65
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9e af       	std	Y+62, r25	; 0x3e
    2396:	8d af       	std	Y+61, r24	; 0x3d
    2398:	0f c0       	rjmp	.+30     	; 0x23b8 <LCD_voidInit+0xa1a>
    239a:	88 ec       	ldi	r24, 0xC8	; 200
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9c af       	std	Y+60, r25	; 0x3c
    23a0:	8b af       	std	Y+59, r24	; 0x3b
    23a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    23a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <LCD_voidInit+0xa08>
    23aa:	9c af       	std	Y+60, r25	; 0x3c
    23ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    23b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	9e af       	std	Y+62, r25	; 0x3e
    23b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    23ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	69 f7       	brne	.-38     	; 0x239a <LCD_voidInit+0x9fc>
    23c0:	16 c0       	rjmp	.+44     	; 0x23ee <LCD_voidInit+0xa50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c2:	fe 01       	movw	r30, r28
    23c4:	ff 96       	adiw	r30, 0x3f	; 63
    23c6:	60 81       	ld	r22, Z
    23c8:	71 81       	ldd	r23, Z+1	; 0x01
    23ca:	82 81       	ldd	r24, Z+2	; 0x02
    23cc:	93 81       	ldd	r25, Z+3	; 0x03
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9e af       	std	Y+62, r25	; 0x3e
    23d8:	8d af       	std	Y+61, r24	; 0x3d
    23da:	8d ad       	ldd	r24, Y+61	; 0x3d
    23dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    23de:	9a af       	std	Y+58, r25	; 0x3a
    23e0:	89 af       	std	Y+57, r24	; 0x39
    23e2:	89 ad       	ldd	r24, Y+57	; 0x39
    23e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <LCD_voidInit+0xa48>
    23ea:	9a af       	std	Y+58, r25	; 0x3a
    23ec:	89 af       	std	Y+57, r24	; 0x39
		}
		else
		{
			/*step 1*/
			_delay_ms(30);
			voidWriteCmd(u8CntLoc,0b00100000);
    23ee:	fe 01       	movw	r30, r28
    23f0:	e2 57       	subi	r30, 0x72	; 114
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 81       	ld	r24, Z
    23f6:	60 e2       	ldi	r22, 0x20	; 32
    23f8:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <voidWriteCmd>

			voidWriteCmd(u8CntLoc,0b00100000);
    23fc:	fe 01       	movw	r30, r28
    23fe:	e2 57       	subi	r30, 0x72	; 114
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	80 81       	ld	r24, Z
    2404:	60 e2       	ldi	r22, 0x20	; 32
    2406:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <voidWriteCmd>

			u8commnad=0b00000000 |lcdarr[u8CntLoc].lcdswconfig.u8line<<7 |
    240a:	fe 01       	movw	r30, r28
    240c:	e2 57       	subi	r30, 0x72	; 114
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	80 81       	ld	r24, Z
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	c9 01       	movw	r24, r18
    2418:	88 0f       	add	r24, r24
    241a:	99 1f       	adc	r25, r25
    241c:	82 0f       	add	r24, r18
    241e:	93 1f       	adc	r25, r19
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	fc 01       	movw	r30, r24
    242a:	eb 52       	subi	r30, 0x2B	; 43
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	80 81       	ld	r24, Z
    2430:	86 95       	lsr	r24
    2432:	81 70       	andi	r24, 0x01	; 1
    2434:	88 2f       	mov	r24, r24
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	96 95       	lsr	r25
    243a:	98 2f       	mov	r25, r24
    243c:	88 27       	eor	r24, r24
    243e:	97 95       	ror	r25
    2440:	87 95       	ror	r24
    2442:	48 2f       	mov	r20, r24
    2444:	fe 01       	movw	r30, r28
    2446:	e2 57       	subi	r30, 0x72	; 114
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	80 81       	ld	r24, Z
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	c9 01       	movw	r24, r18
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	82 0f       	add	r24, r18
    2458:	93 1f       	adc	r25, r19
    245a:	88 0f       	add	r24, r24
    245c:	99 1f       	adc	r25, r25
    245e:	88 0f       	add	r24, r24
    2460:	99 1f       	adc	r25, r25
    2462:	fc 01       	movw	r30, r24
    2464:	eb 52       	subi	r30, 0x2B	; 43
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 81       	ld	r24, Z
    246a:	86 95       	lsr	r24
    246c:	86 95       	lsr	r24
    246e:	81 70       	andi	r24, 0x01	; 1
    2470:	88 2f       	mov	r24, r24
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	00 24       	eor	r0, r0
    2476:	96 95       	lsr	r25
    2478:	87 95       	ror	r24
    247a:	07 94       	ror	r0
    247c:	96 95       	lsr	r25
    247e:	87 95       	ror	r24
    2480:	07 94       	ror	r0
    2482:	98 2f       	mov	r25, r24
    2484:	80 2d       	mov	r24, r0
    2486:	84 2b       	or	r24, r20
    2488:	fe 01       	movw	r30, r28
    248a:	e3 57       	subi	r30, 0x73	; 115
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 83       	st	Z, r24
			lcdarr[u8CntLoc].lcdswconfig.u8font <<6 ;

			voidWriteCmd(u8CntLoc,u8commnad);
    2490:	fe 01       	movw	r30, r28
    2492:	e2 57       	subi	r30, 0x72	; 114
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	de 01       	movw	r26, r28
    2498:	a3 57       	subi	r26, 0x73	; 115
    249a:	bf 4f       	sbci	r27, 0xFF	; 255
    249c:	80 81       	ld	r24, Z
    249e:	6c 91       	ld	r22, X
    24a0:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <voidWriteCmd>
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	a0 e8       	ldi	r26, 0x80	; 128
    24aa:	bf e3       	ldi	r27, 0x3F	; 63
    24ac:	8d ab       	std	Y+53, r24	; 0x35
    24ae:	9e ab       	std	Y+54, r25	; 0x36
    24b0:	af ab       	std	Y+55, r26	; 0x37
    24b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b4:	6d a9       	ldd	r22, Y+53	; 0x35
    24b6:	7e a9       	ldd	r23, Y+54	; 0x36
    24b8:	8f a9       	ldd	r24, Y+55	; 0x37
    24ba:	98 ad       	ldd	r25, Y+56	; 0x38
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	4a ef       	ldi	r20, 0xFA	; 250
    24c2:	54 e4       	ldi	r21, 0x44	; 68
    24c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	89 ab       	std	Y+49, r24	; 0x31
    24ce:	9a ab       	std	Y+50, r25	; 0x32
    24d0:	ab ab       	std	Y+51, r26	; 0x33
    24d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24d4:	69 a9       	ldd	r22, Y+49	; 0x31
    24d6:	7a a9       	ldd	r23, Y+50	; 0x32
    24d8:	8b a9       	ldd	r24, Y+51	; 0x33
    24da:	9c a9       	ldd	r25, Y+52	; 0x34
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e8       	ldi	r20, 0x80	; 128
    24e2:	5f e3       	ldi	r21, 0x3F	; 63
    24e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e8:	88 23       	and	r24, r24
    24ea:	2c f4       	brge	.+10     	; 0x24f6 <LCD_voidInit+0xb58>
		__ticks = 1;
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	98 ab       	std	Y+48, r25	; 0x30
    24f2:	8f a7       	std	Y+47, r24	; 0x2f
    24f4:	3f c0       	rjmp	.+126    	; 0x2574 <LCD_voidInit+0xbd6>
	else if (__tmp > 65535)
    24f6:	69 a9       	ldd	r22, Y+49	; 0x31
    24f8:	7a a9       	ldd	r23, Y+50	; 0x32
    24fa:	8b a9       	ldd	r24, Y+51	; 0x33
    24fc:	9c a9       	ldd	r25, Y+52	; 0x34
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	3f ef       	ldi	r19, 0xFF	; 255
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	57 e4       	ldi	r21, 0x47	; 71
    2506:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250a:	18 16       	cp	r1, r24
    250c:	4c f5       	brge	.+82     	; 0x2560 <LCD_voidInit+0xbc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250e:	6d a9       	ldd	r22, Y+53	; 0x35
    2510:	7e a9       	ldd	r23, Y+54	; 0x36
    2512:	8f a9       	ldd	r24, Y+55	; 0x37
    2514:	98 ad       	ldd	r25, Y+56	; 0x38
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e2       	ldi	r20, 0x20	; 32
    251c:	51 e4       	ldi	r21, 0x41	; 65
    251e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	bc 01       	movw	r22, r24
    2528:	cd 01       	movw	r24, r26
    252a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	98 ab       	std	Y+48, r25	; 0x30
    2534:	8f a7       	std	Y+47, r24	; 0x2f
    2536:	0f c0       	rjmp	.+30     	; 0x2556 <LCD_voidInit+0xbb8>
    2538:	88 ec       	ldi	r24, 0xC8	; 200
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	9e a7       	std	Y+46, r25	; 0x2e
    253e:	8d a7       	std	Y+45, r24	; 0x2d
    2540:	8d a5       	ldd	r24, Y+45	; 0x2d
    2542:	9e a5       	ldd	r25, Y+46	; 0x2e
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	f1 f7       	brne	.-4      	; 0x2544 <LCD_voidInit+0xba6>
    2548:	9e a7       	std	Y+46, r25	; 0x2e
    254a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254c:	8f a5       	ldd	r24, Y+47	; 0x2f
    254e:	98 a9       	ldd	r25, Y+48	; 0x30
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	98 ab       	std	Y+48, r25	; 0x30
    2554:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2556:	8f a5       	ldd	r24, Y+47	; 0x2f
    2558:	98 a9       	ldd	r25, Y+48	; 0x30
    255a:	00 97       	sbiw	r24, 0x00	; 0
    255c:	69 f7       	brne	.-38     	; 0x2538 <LCD_voidInit+0xb9a>
    255e:	14 c0       	rjmp	.+40     	; 0x2588 <LCD_voidInit+0xbea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2560:	69 a9       	ldd	r22, Y+49	; 0x31
    2562:	7a a9       	ldd	r23, Y+50	; 0x32
    2564:	8b a9       	ldd	r24, Y+51	; 0x33
    2566:	9c a9       	ldd	r25, Y+52	; 0x34
    2568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	98 ab       	std	Y+48, r25	; 0x30
    2572:	8f a7       	std	Y+47, r24	; 0x2f
    2574:	8f a5       	ldd	r24, Y+47	; 0x2f
    2576:	98 a9       	ldd	r25, Y+48	; 0x30
    2578:	9c a7       	std	Y+44, r25	; 0x2c
    257a:	8b a7       	std	Y+43, r24	; 0x2b
    257c:	8b a5       	ldd	r24, Y+43	; 0x2b
    257e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <LCD_voidInit+0xbe2>
    2584:	9c a7       	std	Y+44, r25	; 0x2c
    2586:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);

			voidWriteCmd(u8CntLoc,0b00000000);
    2588:	fe 01       	movw	r30, r28
    258a:	e2 57       	subi	r30, 0x72	; 114
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 81       	ld	r24, Z
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <voidWriteCmd>

			u8commnad=0b10000000 |lcdarr[u8CntLoc].lcdswconfig.u8display<<6|
    2596:	fe 01       	movw	r30, r28
    2598:	e2 57       	subi	r30, 0x72	; 114
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 81       	ld	r24, Z
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	c9 01       	movw	r24, r18
    25a4:	88 0f       	add	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	82 0f       	add	r24, r18
    25aa:	93 1f       	adc	r25, r19
    25ac:	88 0f       	add	r24, r24
    25ae:	99 1f       	adc	r25, r25
    25b0:	88 0f       	add	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	fc 01       	movw	r30, r24
    25b6:	eb 52       	subi	r30, 0x2B	; 43
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	82 95       	swap	r24
    25be:	86 95       	lsr	r24
    25c0:	86 95       	lsr	r24
    25c2:	83 70       	andi	r24, 0x03	; 3
    25c4:	81 70       	andi	r24, 0x01	; 1
    25c6:	88 2f       	mov	r24, r24
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	00 24       	eor	r0, r0
    25cc:	96 95       	lsr	r25
    25ce:	87 95       	ror	r24
    25d0:	07 94       	ror	r0
    25d2:	96 95       	lsr	r25
    25d4:	87 95       	ror	r24
    25d6:	07 94       	ror	r0
    25d8:	98 2f       	mov	r25, r24
    25da:	80 2d       	mov	r24, r0
    25dc:	48 2f       	mov	r20, r24
    25de:	40 68       	ori	r20, 0x80	; 128
    25e0:	fe 01       	movw	r30, r28
    25e2:	e2 57       	subi	r30, 0x72	; 114
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	80 81       	ld	r24, Z
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	c9 01       	movw	r24, r18
    25ee:	88 0f       	add	r24, r24
    25f0:	99 1f       	adc	r25, r25
    25f2:	82 0f       	add	r24, r18
    25f4:	93 1f       	adc	r25, r19
    25f6:	88 0f       	add	r24, r24
    25f8:	99 1f       	adc	r25, r25
    25fa:	88 0f       	add	r24, r24
    25fc:	99 1f       	adc	r25, r25
    25fe:	fc 01       	movw	r30, r24
    2600:	eb 52       	subi	r30, 0x2B	; 43
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	80 81       	ld	r24, Z
    2606:	86 95       	lsr	r24
    2608:	86 95       	lsr	r24
    260a:	86 95       	lsr	r24
    260c:	81 70       	andi	r24, 0x01	; 1
    260e:	88 2f       	mov	r24, r24
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	82 95       	swap	r24
    2618:	92 95       	swap	r25
    261a:	90 7f       	andi	r25, 0xF0	; 240
    261c:	98 27       	eor	r25, r24
    261e:	80 7f       	andi	r24, 0xF0	; 240
    2620:	98 27       	eor	r25, r24
    2622:	48 2b       	or	r20, r24
    2624:	fe 01       	movw	r30, r28
    2626:	e2 57       	subi	r30, 0x72	; 114
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	80 81       	ld	r24, Z
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	c9 01       	movw	r24, r18
    2632:	88 0f       	add	r24, r24
    2634:	99 1f       	adc	r25, r25
    2636:	82 0f       	add	r24, r18
    2638:	93 1f       	adc	r25, r19
    263a:	88 0f       	add	r24, r24
    263c:	99 1f       	adc	r25, r25
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	fc 01       	movw	r30, r24
    2644:	eb 52       	subi	r30, 0x2B	; 43
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	80 81       	ld	r24, Z
    264a:	82 95       	swap	r24
    264c:	8f 70       	andi	r24, 0x0F	; 15
    264e:	81 70       	andi	r24, 0x01	; 1
    2650:	88 2f       	mov	r24, r24
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	82 95       	swap	r24
    2656:	92 95       	swap	r25
    2658:	90 7f       	andi	r25, 0xF0	; 240
    265a:	98 27       	eor	r25, r24
    265c:	80 7f       	andi	r24, 0xF0	; 240
    265e:	98 27       	eor	r25, r24
    2660:	84 2b       	or	r24, r20
    2662:	fe 01       	movw	r30, r28
    2664:	e3 57       	subi	r30, 0x73	; 115
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	80 83       	st	Z, r24
			lcdarr[u8CntLoc].lcdswconfig.u8coursorstate<<5 |
			lcdarr[u8CntLoc].lcdswconfig.u8coursorblink<<4 ;
			voidWriteCmd(u8CntLoc,u8commnad);
    266a:	fe 01       	movw	r30, r28
    266c:	e2 57       	subi	r30, 0x72	; 114
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	de 01       	movw	r26, r28
    2672:	a3 57       	subi	r26, 0x73	; 115
    2674:	bf 4f       	sbci	r27, 0xFF	; 255
    2676:	80 81       	ld	r24, Z
    2678:	6c 91       	ld	r22, X
    267a:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <voidWriteCmd>
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	a0 e8       	ldi	r26, 0x80	; 128
    2684:	bf e3       	ldi	r27, 0x3F	; 63
    2686:	8f a3       	std	Y+39, r24	; 0x27
    2688:	98 a7       	std	Y+40, r25	; 0x28
    268a:	a9 a7       	std	Y+41, r26	; 0x29
    268c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268e:	6f a1       	ldd	r22, Y+39	; 0x27
    2690:	78 a5       	ldd	r23, Y+40	; 0x28
    2692:	89 a5       	ldd	r24, Y+41	; 0x29
    2694:	9a a5       	ldd	r25, Y+42	; 0x2a
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	4a ef       	ldi	r20, 0xFA	; 250
    269c:	54 e4       	ldi	r21, 0x44	; 68
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	8b a3       	std	Y+35, r24	; 0x23
    26a8:	9c a3       	std	Y+36, r25	; 0x24
    26aa:	ad a3       	std	Y+37, r26	; 0x25
    26ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26ae:	6b a1       	ldd	r22, Y+35	; 0x23
    26b0:	7c a1       	ldd	r23, Y+36	; 0x24
    26b2:	8d a1       	ldd	r24, Y+37	; 0x25
    26b4:	9e a1       	ldd	r25, Y+38	; 0x26
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e8       	ldi	r20, 0x80	; 128
    26bc:	5f e3       	ldi	r21, 0x3F	; 63
    26be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c2:	88 23       	and	r24, r24
    26c4:	2c f4       	brge	.+10     	; 0x26d0 <LCD_voidInit+0xd32>
		__ticks = 1;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	9a a3       	std	Y+34, r25	; 0x22
    26cc:	89 a3       	std	Y+33, r24	; 0x21
    26ce:	3f c0       	rjmp	.+126    	; 0x274e <LCD_voidInit+0xdb0>
	else if (__tmp > 65535)
    26d0:	6b a1       	ldd	r22, Y+35	; 0x23
    26d2:	7c a1       	ldd	r23, Y+36	; 0x24
    26d4:	8d a1       	ldd	r24, Y+37	; 0x25
    26d6:	9e a1       	ldd	r25, Y+38	; 0x26
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	3f ef       	ldi	r19, 0xFF	; 255
    26dc:	4f e7       	ldi	r20, 0x7F	; 127
    26de:	57 e4       	ldi	r21, 0x47	; 71
    26e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e4:	18 16       	cp	r1, r24
    26e6:	4c f5       	brge	.+82     	; 0x273a <LCD_voidInit+0xd9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e8:	6f a1       	ldd	r22, Y+39	; 0x27
    26ea:	78 a5       	ldd	r23, Y+40	; 0x28
    26ec:	89 a5       	ldd	r24, Y+41	; 0x29
    26ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e2       	ldi	r20, 0x20	; 32
    26f6:	51 e4       	ldi	r21, 0x41	; 65
    26f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	bc 01       	movw	r22, r24
    2702:	cd 01       	movw	r24, r26
    2704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	9a a3       	std	Y+34, r25	; 0x22
    270e:	89 a3       	std	Y+33, r24	; 0x21
    2710:	0f c0       	rjmp	.+30     	; 0x2730 <LCD_voidInit+0xd92>
    2712:	88 ec       	ldi	r24, 0xC8	; 200
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	98 a3       	std	Y+32, r25	; 0x20
    2718:	8f 8f       	std	Y+31, r24	; 0x1f
    271a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    271c:	98 a1       	ldd	r25, Y+32	; 0x20
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <LCD_voidInit+0xd80>
    2722:	98 a3       	std	Y+32, r25	; 0x20
    2724:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2726:	89 a1       	ldd	r24, Y+33	; 0x21
    2728:	9a a1       	ldd	r25, Y+34	; 0x22
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	9a a3       	std	Y+34, r25	; 0x22
    272e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2730:	89 a1       	ldd	r24, Y+33	; 0x21
    2732:	9a a1       	ldd	r25, Y+34	; 0x22
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	69 f7       	brne	.-38     	; 0x2712 <LCD_voidInit+0xd74>
    2738:	14 c0       	rjmp	.+40     	; 0x2762 <LCD_voidInit+0xdc4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273a:	6b a1       	ldd	r22, Y+35	; 0x23
    273c:	7c a1       	ldd	r23, Y+36	; 0x24
    273e:	8d a1       	ldd	r24, Y+37	; 0x25
    2740:	9e a1       	ldd	r25, Y+38	; 0x26
    2742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	9a a3       	std	Y+34, r25	; 0x22
    274c:	89 a3       	std	Y+33, r24	; 0x21
    274e:	89 a1       	ldd	r24, Y+33	; 0x21
    2750:	9a a1       	ldd	r25, Y+34	; 0x22
    2752:	9e 8f       	std	Y+30, r25	; 0x1e
    2754:	8d 8f       	std	Y+29, r24	; 0x1d
    2756:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2758:	9e 8d       	ldd	r25, Y+30	; 0x1e
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	f1 f7       	brne	.-4      	; 0x275a <LCD_voidInit+0xdbc>
    275e:	9e 8f       	std	Y+30, r25	; 0x1e
    2760:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
			voidWriteCmd(u8CntLoc,0b00000000);
    2762:	fe 01       	movw	r30, r28
    2764:	e2 57       	subi	r30, 0x72	; 114
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	80 81       	ld	r24, Z
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <voidWriteCmd>
			voidWriteCmd(u8CntLoc,0b00010000);
    2770:	fe 01       	movw	r30, r28
    2772:	e2 57       	subi	r30, 0x72	; 114
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	80 81       	ld	r24, Z
    2778:	60 e1       	ldi	r22, 0x10	; 16
    277a:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <voidWriteCmd>
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	a0 e4       	ldi	r26, 0x40	; 64
    2784:	b0 e4       	ldi	r27, 0x40	; 64
    2786:	89 8f       	std	Y+25, r24	; 0x19
    2788:	9a 8f       	std	Y+26, r25	; 0x1a
    278a:	ab 8f       	std	Y+27, r26	; 0x1b
    278c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278e:	69 8d       	ldd	r22, Y+25	; 0x19
    2790:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2792:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2794:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	4a ef       	ldi	r20, 0xFA	; 250
    279c:	54 e4       	ldi	r21, 0x44	; 68
    279e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	8d 8b       	std	Y+21, r24	; 0x15
    27a8:	9e 8b       	std	Y+22, r25	; 0x16
    27aa:	af 8b       	std	Y+23, r26	; 0x17
    27ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27ae:	6d 89       	ldd	r22, Y+21	; 0x15
    27b0:	7e 89       	ldd	r23, Y+22	; 0x16
    27b2:	8f 89       	ldd	r24, Y+23	; 0x17
    27b4:	98 8d       	ldd	r25, Y+24	; 0x18
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e8       	ldi	r20, 0x80	; 128
    27bc:	5f e3       	ldi	r21, 0x3F	; 63
    27be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27c2:	88 23       	and	r24, r24
    27c4:	2c f4       	brge	.+10     	; 0x27d0 <LCD_voidInit+0xe32>
		__ticks = 1;
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	9c 8b       	std	Y+20, r25	; 0x14
    27cc:	8b 8b       	std	Y+19, r24	; 0x13
    27ce:	3f c0       	rjmp	.+126    	; 0x284e <LCD_voidInit+0xeb0>
	else if (__tmp > 65535)
    27d0:	6d 89       	ldd	r22, Y+21	; 0x15
    27d2:	7e 89       	ldd	r23, Y+22	; 0x16
    27d4:	8f 89       	ldd	r24, Y+23	; 0x17
    27d6:	98 8d       	ldd	r25, Y+24	; 0x18
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	3f ef       	ldi	r19, 0xFF	; 255
    27dc:	4f e7       	ldi	r20, 0x7F	; 127
    27de:	57 e4       	ldi	r21, 0x47	; 71
    27e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e4:	18 16       	cp	r1, r24
    27e6:	4c f5       	brge	.+82     	; 0x283a <LCD_voidInit+0xe9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e8:	69 8d       	ldd	r22, Y+25	; 0x19
    27ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e2       	ldi	r20, 0x20	; 32
    27f6:	51 e4       	ldi	r21, 0x41	; 65
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	bc 01       	movw	r22, r24
    2802:	cd 01       	movw	r24, r26
    2804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	9c 8b       	std	Y+20, r25	; 0x14
    280e:	8b 8b       	std	Y+19, r24	; 0x13
    2810:	0f c0       	rjmp	.+30     	; 0x2830 <LCD_voidInit+0xe92>
    2812:	88 ec       	ldi	r24, 0xC8	; 200
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	9a 8b       	std	Y+18, r25	; 0x12
    2818:	89 8b       	std	Y+17, r24	; 0x11
    281a:	89 89       	ldd	r24, Y+17	; 0x11
    281c:	9a 89       	ldd	r25, Y+18	; 0x12
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <LCD_voidInit+0xe80>
    2822:	9a 8b       	std	Y+18, r25	; 0x12
    2824:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2826:	8b 89       	ldd	r24, Y+19	; 0x13
    2828:	9c 89       	ldd	r25, Y+20	; 0x14
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	9c 8b       	std	Y+20, r25	; 0x14
    282e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2830:	8b 89       	ldd	r24, Y+19	; 0x13
    2832:	9c 89       	ldd	r25, Y+20	; 0x14
    2834:	00 97       	sbiw	r24, 0x00	; 0
    2836:	69 f7       	brne	.-38     	; 0x2812 <LCD_voidInit+0xe74>
    2838:	14 c0       	rjmp	.+40     	; 0x2862 <LCD_voidInit+0xec4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283a:	6d 89       	ldd	r22, Y+21	; 0x15
    283c:	7e 89       	ldd	r23, Y+22	; 0x16
    283e:	8f 89       	ldd	r24, Y+23	; 0x17
    2840:	98 8d       	ldd	r25, Y+24	; 0x18
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9c 8b       	std	Y+20, r25	; 0x14
    284c:	8b 8b       	std	Y+19, r24	; 0x13
    284e:	8b 89       	ldd	r24, Y+19	; 0x13
    2850:	9c 89       	ldd	r25, Y+20	; 0x14
    2852:	98 8b       	std	Y+16, r25	; 0x10
    2854:	8f 87       	std	Y+15, r24	; 0x0f
    2856:	8f 85       	ldd	r24, Y+15	; 0x0f
    2858:	98 89       	ldd	r25, Y+16	; 0x10
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	f1 f7       	brne	.-4      	; 0x285a <LCD_voidInit+0xebc>
    285e:	98 8b       	std	Y+16, r25	; 0x10
    2860:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(3);
			voidWriteCmd(u8CntLoc,0b00000000);
    2862:	fe 01       	movw	r30, r28
    2864:	e2 57       	subi	r30, 0x72	; 114
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	80 81       	ld	r24, Z
    286a:	60 e0       	ldi	r22, 0x00	; 0
    286c:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <voidWriteCmd>

			u8commnad= 0b01000000 | lcdarr[u8CntLoc].lcdswconfig.u8direction<<5 |
    2870:	fe 01       	movw	r30, r28
    2872:	e2 57       	subi	r30, 0x72	; 114
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	80 81       	ld	r24, Z
    2878:	28 2f       	mov	r18, r24
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	c9 01       	movw	r24, r18
    287e:	88 0f       	add	r24, r24
    2880:	99 1f       	adc	r25, r25
    2882:	82 0f       	add	r24, r18
    2884:	93 1f       	adc	r25, r19
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	fc 01       	movw	r30, r24
    2890:	eb 52       	subi	r30, 0x2B	; 43
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	80 81       	ld	r24, Z
    2896:	88 1f       	adc	r24, r24
    2898:	88 27       	eor	r24, r24
    289a:	88 1f       	adc	r24, r24
    289c:	88 2f       	mov	r24, r24
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	88 0f       	add	r24, r24
    28a2:	99 1f       	adc	r25, r25
    28a4:	82 95       	swap	r24
    28a6:	92 95       	swap	r25
    28a8:	90 7f       	andi	r25, 0xF0	; 240
    28aa:	98 27       	eor	r25, r24
    28ac:	80 7f       	andi	r24, 0xF0	; 240
    28ae:	98 27       	eor	r25, r24
    28b0:	48 2f       	mov	r20, r24
    28b2:	40 64       	ori	r20, 0x40	; 64
    28b4:	fe 01       	movw	r30, r28
    28b6:	e2 57       	subi	r30, 0x72	; 114
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	80 81       	ld	r24, Z
    28bc:	28 2f       	mov	r18, r24
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	c9 01       	movw	r24, r18
    28c2:	88 0f       	add	r24, r24
    28c4:	99 1f       	adc	r25, r25
    28c6:	82 0f       	add	r24, r18
    28c8:	93 1f       	adc	r25, r19
    28ca:	88 0f       	add	r24, r24
    28cc:	99 1f       	adc	r25, r25
    28ce:	88 0f       	add	r24, r24
    28d0:	99 1f       	adc	r25, r25
    28d2:	fc 01       	movw	r30, r24
    28d4:	eb 52       	subi	r30, 0x2B	; 43
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	80 81       	ld	r24, Z
    28da:	82 95       	swap	r24
    28dc:	86 95       	lsr	r24
    28de:	87 70       	andi	r24, 0x07	; 7
    28e0:	81 70       	andi	r24, 0x01	; 1
    28e2:	88 2f       	mov	r24, r24
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	82 95       	swap	r24
    28e8:	92 95       	swap	r25
    28ea:	90 7f       	andi	r25, 0xF0	; 240
    28ec:	98 27       	eor	r25, r24
    28ee:	80 7f       	andi	r24, 0xF0	; 240
    28f0:	98 27       	eor	r25, r24
    28f2:	84 2b       	or	r24, r20
    28f4:	fe 01       	movw	r30, r28
    28f6:	e3 57       	subi	r30, 0x73	; 115
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	80 83       	st	Z, r24
					   lcdarr[u8CntLoc].lcdswconfig.u8shift<<4 ;


			voidWriteCmd(u8CntLoc,u8commnad);
    28fc:	fe 01       	movw	r30, r28
    28fe:	e2 57       	subi	r30, 0x72	; 114
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	de 01       	movw	r26, r28
    2904:	a3 57       	subi	r26, 0x73	; 115
    2906:	bf 4f       	sbci	r27, 0xFF	; 255
    2908:	80 81       	ld	r24, Z
    290a:	6c 91       	ld	r22, X
    290c:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <voidWriteCmd>
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	a0 e4       	ldi	r26, 0x40	; 64
    2916:	b0 e4       	ldi	r27, 0x40	; 64
    2918:	8b 87       	std	Y+11, r24	; 0x0b
    291a:	9c 87       	std	Y+12, r25	; 0x0c
    291c:	ad 87       	std	Y+13, r26	; 0x0d
    291e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2920:	6b 85       	ldd	r22, Y+11	; 0x0b
    2922:	7c 85       	ldd	r23, Y+12	; 0x0c
    2924:	8d 85       	ldd	r24, Y+13	; 0x0d
    2926:	9e 85       	ldd	r25, Y+14	; 0x0e
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	4a ef       	ldi	r20, 0xFA	; 250
    292e:	54 e4       	ldi	r21, 0x44	; 68
    2930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	8f 83       	std	Y+7, r24	; 0x07
    293a:	98 87       	std	Y+8, r25	; 0x08
    293c:	a9 87       	std	Y+9, r26	; 0x09
    293e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2940:	6f 81       	ldd	r22, Y+7	; 0x07
    2942:	78 85       	ldd	r23, Y+8	; 0x08
    2944:	89 85       	ldd	r24, Y+9	; 0x09
    2946:	9a 85       	ldd	r25, Y+10	; 0x0a
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	40 e8       	ldi	r20, 0x80	; 128
    294e:	5f e3       	ldi	r21, 0x3F	; 63
    2950:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2954:	88 23       	and	r24, r24
    2956:	2c f4       	brge	.+10     	; 0x2962 <LCD_voidInit+0xfc4>
		__ticks = 1;
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	9e 83       	std	Y+6, r25	; 0x06
    295e:	8d 83       	std	Y+5, r24	; 0x05
    2960:	3f c0       	rjmp	.+126    	; 0x29e0 <LCD_voidInit+0x1042>
	else if (__tmp > 65535)
    2962:	6f 81       	ldd	r22, Y+7	; 0x07
    2964:	78 85       	ldd	r23, Y+8	; 0x08
    2966:	89 85       	ldd	r24, Y+9	; 0x09
    2968:	9a 85       	ldd	r25, Y+10	; 0x0a
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	3f ef       	ldi	r19, 0xFF	; 255
    296e:	4f e7       	ldi	r20, 0x7F	; 127
    2970:	57 e4       	ldi	r21, 0x47	; 71
    2972:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2976:	18 16       	cp	r1, r24
    2978:	4c f5       	brge	.+82     	; 0x29cc <LCD_voidInit+0x102e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297a:	6b 85       	ldd	r22, Y+11	; 0x0b
    297c:	7c 85       	ldd	r23, Y+12	; 0x0c
    297e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2980:	9e 85       	ldd	r25, Y+14	; 0x0e
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	40 e2       	ldi	r20, 0x20	; 32
    2988:	51 e4       	ldi	r21, 0x41	; 65
    298a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	bc 01       	movw	r22, r24
    2994:	cd 01       	movw	r24, r26
    2996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	9e 83       	std	Y+6, r25	; 0x06
    29a0:	8d 83       	std	Y+5, r24	; 0x05
    29a2:	0f c0       	rjmp	.+30     	; 0x29c2 <LCD_voidInit+0x1024>
    29a4:	88 ec       	ldi	r24, 0xC8	; 200
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	9c 83       	std	Y+4, r25	; 0x04
    29aa:	8b 83       	std	Y+3, r24	; 0x03
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	9c 81       	ldd	r25, Y+4	; 0x04
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	f1 f7       	brne	.-4      	; 0x29b0 <LCD_voidInit+0x1012>
    29b4:	9c 83       	std	Y+4, r25	; 0x04
    29b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ba:	9e 81       	ldd	r25, Y+6	; 0x06
    29bc:	01 97       	sbiw	r24, 0x01	; 1
    29be:	9e 83       	std	Y+6, r25	; 0x06
    29c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c2:	8d 81       	ldd	r24, Y+5	; 0x05
    29c4:	9e 81       	ldd	r25, Y+6	; 0x06
    29c6:	00 97       	sbiw	r24, 0x00	; 0
    29c8:	69 f7       	brne	.-38     	; 0x29a4 <LCD_voidInit+0x1006>
    29ca:	14 c0       	rjmp	.+40     	; 0x29f4 <LCD_voidInit+0x1056>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29cc:	6f 81       	ldd	r22, Y+7	; 0x07
    29ce:	78 85       	ldd	r23, Y+8	; 0x08
    29d0:	89 85       	ldd	r24, Y+9	; 0x09
    29d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	9e 83       	std	Y+6, r25	; 0x06
    29de:	8d 83       	std	Y+5, r24	; 0x05
    29e0:	8d 81       	ldd	r24, Y+5	; 0x05
    29e2:	9e 81       	ldd	r25, Y+6	; 0x06
    29e4:	9a 83       	std	Y+2, r25	; 0x02
    29e6:	89 83       	std	Y+1, r24	; 0x01
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	9a 81       	ldd	r25, Y+2	; 0x02
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	f1 f7       	brne	.-4      	; 0x29ec <LCD_voidInit+0x104e>
    29f0:	9a 83       	std	Y+2, r25	; 0x02
    29f2:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidInit(void)
{
	uint8 u8CntLoc;
	uint8 u8commnad=0;
	for (u8CntLoc =0  ; u8CntLoc <MAX_NUM ; u8CntLoc++)
    29f4:	de 01       	movw	r26, r28
    29f6:	a2 57       	subi	r26, 0x72	; 114
    29f8:	bf 4f       	sbci	r27, 0xFF	; 255
    29fa:	fe 01       	movw	r30, r28
    29fc:	e2 57       	subi	r30, 0x72	; 114
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	80 81       	ld	r24, Z
    2a02:	8f 5f       	subi	r24, 0xFF	; 255
    2a04:	8c 93       	st	X, r24
    2a06:	fe 01       	movw	r30, r28
    2a08:	e2 57       	subi	r30, 0x72	; 114
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	80 81       	ld	r24, Z
    2a0e:	88 23       	and	r24, r24
    2a10:	11 f4       	brne	.+4      	; 0x2a16 <LCD_voidInit+0x1078>
    2a12:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <LCD_voidInit+0x2e>

	}



}
    2a16:	c2 57       	subi	r28, 0x72	; 114
    2a18:	df 4f       	sbci	r29, 0xFF	; 255
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	1f 91       	pop	r17
    2a2a:	0f 91       	pop	r16
    2a2c:	08 95       	ret

00002a2e <voidWriteCmd>:


static void voidWriteCmd(uint8 u8Index , uint8 u8CmdCPy)
 {
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	00 d0       	rcall	.+0      	; 0x2a34 <voidWriteCmd+0x6>
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62
    2a38:	89 83       	std	Y+1, r24	; 0x01
    2a3a:	6a 83       	std	Y+2, r22	; 0x02

	/*RS   0*/
	DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8RS , DIO_LOW);
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	c9 01       	movw	r24, r18
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	82 0f       	add	r24, r18
    2a4a:	93 1f       	adc	r25, r19
    2a4c:	88 0f       	add	r24, r24
    2a4e:	99 1f       	adc	r25, r25
    2a50:	88 0f       	add	r24, r24
    2a52:	99 1f       	adc	r25, r25
    2a54:	fc 01       	movw	r30, r24
    2a56:	ea 52       	subi	r30, 0x2A	; 42
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 81       	ld	r24, Z
    2a5c:	60 e0       	ldi	r22, 0x00	; 0
    2a5e:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>

	/*help*/
	LCDHelp(u8Index,u8CmdCPy);
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	6a 81       	ldd	r22, Y+2	; 0x02
    2a66:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <LCDHelp>

 }
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	cf 91       	pop	r28
    2a70:	df 91       	pop	r29
    2a72:	08 95       	ret

00002a74 <LCDHelp>:

static void  LCDHelp(uint8 u8Index , uint8 u8dataCmdCPy)
	{
    2a74:	df 93       	push	r29
    2a76:	cf 93       	push	r28
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	6f 97       	sbiw	r28, 0x1f	; 31
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	8e 8f       	std	Y+30, r24	; 0x1e
    2a8a:	6f 8f       	std	Y+31, r22	; 0x1f
		uint8 u8CntLoc=0;
    2a8c:	1d 8e       	std	Y+29, r1	; 0x1d
		/*set to write to lCD */
		DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8RW , DIO_LOW);
    2a8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a90:	28 2f       	mov	r18, r24
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	c9 01       	movw	r24, r18
    2a96:	88 0f       	add	r24, r24
    2a98:	99 1f       	adc	r25, r25
    2a9a:	82 0f       	add	r24, r18
    2a9c:	93 1f       	adc	r25, r19
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	88 0f       	add	r24, r24
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	e8 52       	subi	r30, 0x28	; 40
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	80 81       	ld	r24, Z
    2aae:	60 e0       	ldi	r22, 0x00	; 0
    2ab0:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>

		DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8E , DIO_HIGH);
    2ab4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ab6:	28 2f       	mov	r18, r24
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	c9 01       	movw	r24, r18
    2abc:	88 0f       	add	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	82 0f       	add	r24, r18
    2ac2:	93 1f       	adc	r25, r19
    2ac4:	88 0f       	add	r24, r24
    2ac6:	99 1f       	adc	r25, r25
    2ac8:	01 96       	adiw	r24, 0x01	; 1
    2aca:	88 0f       	add	r24, r24
    2acc:	99 1f       	adc	r25, r25
    2ace:	fc 01       	movw	r30, r24
    2ad0:	eb 52       	subi	r30, 0x2B	; 43
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	80 81       	ld	r24, Z
    2ad6:	61 e0       	ldi	r22, 0x01	; 1
    2ad8:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>

		if (lcdarr[u8Index].lcdswconfig.u8mode==LCD_8_BIT_MODE)
    2adc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ade:	28 2f       	mov	r18, r24
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	c9 01       	movw	r24, r18
    2ae4:	88 0f       	add	r24, r24
    2ae6:	99 1f       	adc	r25, r25
    2ae8:	82 0f       	add	r24, r18
    2aea:	93 1f       	adc	r25, r19
    2aec:	88 0f       	add	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	88 0f       	add	r24, r24
    2af2:	99 1f       	adc	r25, r25
    2af4:	fc 01       	movw	r30, r24
    2af6:	eb 52       	subi	r30, 0x2B	; 43
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	80 81       	ld	r24, Z
    2afc:	81 70       	andi	r24, 0x01	; 1
    2afe:	81 30       	cpi	r24, 0x01	; 1
    2b00:	89 f5       	brne	.+98     	; 0x2b64 <LCDHelp+0xf0>
		{
			for (u8CntLoc =0 ;u8CntLoc<8;u8CntLoc++)
    2b02:	1d 8e       	std	Y+29, r1	; 0x1d
    2b04:	2b c0       	rjmp	.+86     	; 0x2b5c <LCDHelp+0xe8>
			{
				DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.au8data[u8CntLoc],GET_BIT(u8dataCmdCPy,u8CntLoc));
    2b06:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b08:	28 2f       	mov	r18, r24
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b0e:	48 2f       	mov	r20, r24
    2b10:	50 e0       	ldi	r21, 0x00	; 0
    2b12:	c9 01       	movw	r24, r18
    2b14:	88 0f       	add	r24, r24
    2b16:	99 1f       	adc	r25, r25
    2b18:	82 0f       	add	r24, r18
    2b1a:	93 1f       	adc	r25, r19
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	84 0f       	add	r24, r20
    2b26:	95 1f       	adc	r25, r21
    2b28:	fc 01       	movw	r30, r24
    2b2a:	e7 52       	subi	r30, 0x27	; 39
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	40 81       	ld	r20, Z
    2b30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b32:	28 2f       	mov	r18, r24
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b38:	88 2f       	mov	r24, r24
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	b9 01       	movw	r22, r18
    2b3e:	02 c0       	rjmp	.+4      	; 0x2b44 <LCDHelp+0xd0>
    2b40:	75 95       	asr	r23
    2b42:	67 95       	ror	r22
    2b44:	8a 95       	dec	r24
    2b46:	e2 f7       	brpl	.-8      	; 0x2b40 <LCDHelp+0xcc>
    2b48:	cb 01       	movw	r24, r22
    2b4a:	98 2f       	mov	r25, r24
    2b4c:	91 70       	andi	r25, 0x01	; 1
    2b4e:	84 2f       	mov	r24, r20
    2b50:	69 2f       	mov	r22, r25
    2b52:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>

		DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8E , DIO_HIGH);

		if (lcdarr[u8Index].lcdswconfig.u8mode==LCD_8_BIT_MODE)
		{
			for (u8CntLoc =0 ;u8CntLoc<8;u8CntLoc++)
    2b56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b58:	8f 5f       	subi	r24, 0xFF	; 255
    2b5a:	8d 8f       	std	Y+29, r24	; 0x1d
    2b5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b5e:	88 30       	cpi	r24, 0x08	; 8
    2b60:	90 f2       	brcs	.-92     	; 0x2b06 <LCDHelp+0x92>
    2b62:	31 c0       	rjmp	.+98     	; 0x2bc6 <LCDHelp+0x152>

		}

		else
		{
			for (u8CntLoc =4 ;u8CntLoc<8;u8CntLoc++)
    2b64:	84 e0       	ldi	r24, 0x04	; 4
    2b66:	8d 8f       	std	Y+29, r24	; 0x1d
    2b68:	2b c0       	rjmp	.+86     	; 0x2bc0 <LCDHelp+0x14c>
			{
				DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.au8data[u8CntLoc],GET_BIT(u8dataCmdCPy,u8CntLoc));
    2b6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b6c:	28 2f       	mov	r18, r24
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b72:	48 2f       	mov	r20, r24
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    2b76:	c9 01       	movw	r24, r18
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	82 0f       	add	r24, r18
    2b7e:	93 1f       	adc	r25, r19
    2b80:	88 0f       	add	r24, r24
    2b82:	99 1f       	adc	r25, r25
    2b84:	88 0f       	add	r24, r24
    2b86:	99 1f       	adc	r25, r25
    2b88:	84 0f       	add	r24, r20
    2b8a:	95 1f       	adc	r25, r21
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	e7 52       	subi	r30, 0x27	; 39
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	40 81       	ld	r20, Z
    2b94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b96:	28 2f       	mov	r18, r24
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b9c:	88 2f       	mov	r24, r24
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	b9 01       	movw	r22, r18
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <LCDHelp+0x134>
    2ba4:	75 95       	asr	r23
    2ba6:	67 95       	ror	r22
    2ba8:	8a 95       	dec	r24
    2baa:	e2 f7       	brpl	.-8      	; 0x2ba4 <LCDHelp+0x130>
    2bac:	cb 01       	movw	r24, r22
    2bae:	98 2f       	mov	r25, r24
    2bb0:	91 70       	andi	r25, 0x01	; 1
    2bb2:	84 2f       	mov	r24, r20
    2bb4:	69 2f       	mov	r22, r25
    2bb6:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>

		}

		else
		{
			for (u8CntLoc =4 ;u8CntLoc<8;u8CntLoc++)
    2bba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bbc:	8f 5f       	subi	r24, 0xFF	; 255
    2bbe:	8d 8f       	std	Y+29, r24	; 0x1d
    2bc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bc2:	88 30       	cpi	r24, 0x08	; 8
    2bc4:	90 f2       	brcs	.-92     	; 0x2b6a <LCDHelp+0xf6>
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	a0 e2       	ldi	r26, 0x20	; 32
    2bcc:	b1 e4       	ldi	r27, 0x41	; 65
    2bce:	89 8f       	std	Y+25, r24	; 0x19
    2bd0:	9a 8f       	std	Y+26, r25	; 0x1a
    2bd2:	ab 8f       	std	Y+27, r26	; 0x1b
    2bd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd6:	69 8d       	ldd	r22, Y+25	; 0x19
    2bd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	4a ef       	ldi	r20, 0xFA	; 250
    2be4:	54 e4       	ldi	r21, 0x44	; 68
    2be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	8d 8b       	std	Y+21, r24	; 0x15
    2bf0:	9e 8b       	std	Y+22, r25	; 0x16
    2bf2:	af 8b       	std	Y+23, r26	; 0x17
    2bf4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bf6:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf8:	7e 89       	ldd	r23, Y+22	; 0x16
    2bfa:	8f 89       	ldd	r24, Y+23	; 0x17
    2bfc:	98 8d       	ldd	r25, Y+24	; 0x18
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	40 e8       	ldi	r20, 0x80	; 128
    2c04:	5f e3       	ldi	r21, 0x3F	; 63
    2c06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c0a:	88 23       	and	r24, r24
    2c0c:	2c f4       	brge	.+10     	; 0x2c18 <LCDHelp+0x1a4>
		__ticks = 1;
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	9c 8b       	std	Y+20, r25	; 0x14
    2c14:	8b 8b       	std	Y+19, r24	; 0x13
    2c16:	3f c0       	rjmp	.+126    	; 0x2c96 <LCDHelp+0x222>
	else if (__tmp > 65535)
    2c18:	6d 89       	ldd	r22, Y+21	; 0x15
    2c1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	3f ef       	ldi	r19, 0xFF	; 255
    2c24:	4f e7       	ldi	r20, 0x7F	; 127
    2c26:	57 e4       	ldi	r21, 0x47	; 71
    2c28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c2c:	18 16       	cp	r1, r24
    2c2e:	4c f5       	brge	.+82     	; 0x2c82 <LCDHelp+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c30:	69 8d       	ldd	r22, Y+25	; 0x19
    2c32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	40 e2       	ldi	r20, 0x20	; 32
    2c3e:	51 e4       	ldi	r21, 0x41	; 65
    2c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	bc 01       	movw	r22, r24
    2c4a:	cd 01       	movw	r24, r26
    2c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	9c 8b       	std	Y+20, r25	; 0x14
    2c56:	8b 8b       	std	Y+19, r24	; 0x13
    2c58:	0f c0       	rjmp	.+30     	; 0x2c78 <LCDHelp+0x204>
    2c5a:	88 ec       	ldi	r24, 0xC8	; 200
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	9a 8b       	std	Y+18, r25	; 0x12
    2c60:	89 8b       	std	Y+17, r24	; 0x11
    2c62:	89 89       	ldd	r24, Y+17	; 0x11
    2c64:	9a 89       	ldd	r25, Y+18	; 0x12
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	f1 f7       	brne	.-4      	; 0x2c66 <LCDHelp+0x1f2>
    2c6a:	9a 8b       	std	Y+18, r25	; 0x12
    2c6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c70:	9c 89       	ldd	r25, Y+20	; 0x14
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	9c 8b       	std	Y+20, r25	; 0x14
    2c76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c78:	8b 89       	ldd	r24, Y+19	; 0x13
    2c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c7c:	00 97       	sbiw	r24, 0x00	; 0
    2c7e:	69 f7       	brne	.-38     	; 0x2c5a <LCDHelp+0x1e6>
    2c80:	14 c0       	rjmp	.+40     	; 0x2caa <LCDHelp+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c82:	6d 89       	ldd	r22, Y+21	; 0x15
    2c84:	7e 89       	ldd	r23, Y+22	; 0x16
    2c86:	8f 89       	ldd	r24, Y+23	; 0x17
    2c88:	98 8d       	ldd	r25, Y+24	; 0x18
    2c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	9c 8b       	std	Y+20, r25	; 0x14
    2c94:	8b 8b       	std	Y+19, r24	; 0x13
    2c96:	8b 89       	ldd	r24, Y+19	; 0x13
    2c98:	9c 89       	ldd	r25, Y+20	; 0x14
    2c9a:	98 8b       	std	Y+16, r25	; 0x10
    2c9c:	8f 87       	std	Y+15, r24	; 0x0f
    2c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ca0:	98 89       	ldd	r25, Y+16	; 0x10
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	f1 f7       	brne	.-4      	; 0x2ca2 <LCDHelp+0x22e>
    2ca6:	98 8b       	std	Y+16, r25	; 0x10
    2ca8:	8f 87       	std	Y+15, r24	; 0x0f
				DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.au8data[u8CntLoc],GET_BIT(u8dataCmdCPy,u8CntLoc));
			}
		}
			/* latch */
		_delay_ms(10);
		DIO_enuWritePin(lcdarr[u8Index].lcdhwconfig.u8E , DIO_LOW);
    2caa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cac:	28 2f       	mov	r18, r24
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	c9 01       	movw	r24, r18
    2cb2:	88 0f       	add	r24, r24
    2cb4:	99 1f       	adc	r25, r25
    2cb6:	82 0f       	add	r24, r18
    2cb8:	93 1f       	adc	r25, r19
    2cba:	88 0f       	add	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	01 96       	adiw	r24, 0x01	; 1
    2cc0:	88 0f       	add	r24, r24
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	eb 52       	subi	r30, 0x2B	; 43
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	80 81       	ld	r24, Z
    2ccc:	60 e0       	ldi	r22, 0x00	; 0
    2cce:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	a0 e2       	ldi	r26, 0x20	; 32
    2cd8:	b1 e4       	ldi	r27, 0x41	; 65
    2cda:	8b 87       	std	Y+11, r24	; 0x0b
    2cdc:	9c 87       	std	Y+12, r25	; 0x0c
    2cde:	ad 87       	std	Y+13, r26	; 0x0d
    2ce0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	4a ef       	ldi	r20, 0xFA	; 250
    2cf0:	54 e4       	ldi	r21, 0x44	; 68
    2cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	8f 83       	std	Y+7, r24	; 0x07
    2cfc:	98 87       	std	Y+8, r25	; 0x08
    2cfe:	a9 87       	std	Y+9, r26	; 0x09
    2d00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d02:	6f 81       	ldd	r22, Y+7	; 0x07
    2d04:	78 85       	ldd	r23, Y+8	; 0x08
    2d06:	89 85       	ldd	r24, Y+9	; 0x09
    2d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	40 e8       	ldi	r20, 0x80	; 128
    2d10:	5f e3       	ldi	r21, 0x3F	; 63
    2d12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d16:	88 23       	and	r24, r24
    2d18:	2c f4       	brge	.+10     	; 0x2d24 <LCDHelp+0x2b0>
		__ticks = 1;
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	9e 83       	std	Y+6, r25	; 0x06
    2d20:	8d 83       	std	Y+5, r24	; 0x05
    2d22:	3f c0       	rjmp	.+126    	; 0x2da2 <LCDHelp+0x32e>
	else if (__tmp > 65535)
    2d24:	6f 81       	ldd	r22, Y+7	; 0x07
    2d26:	78 85       	ldd	r23, Y+8	; 0x08
    2d28:	89 85       	ldd	r24, Y+9	; 0x09
    2d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	3f ef       	ldi	r19, 0xFF	; 255
    2d30:	4f e7       	ldi	r20, 0x7F	; 127
    2d32:	57 e4       	ldi	r21, 0x47	; 71
    2d34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d38:	18 16       	cp	r1, r24
    2d3a:	4c f5       	brge	.+82     	; 0x2d8e <LCDHelp+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e2       	ldi	r20, 0x20	; 32
    2d4a:	51 e4       	ldi	r21, 0x41	; 65
    2d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	bc 01       	movw	r22, r24
    2d56:	cd 01       	movw	r24, r26
    2d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	9e 83       	std	Y+6, r25	; 0x06
    2d62:	8d 83       	std	Y+5, r24	; 0x05
    2d64:	0f c0       	rjmp	.+30     	; 0x2d84 <LCDHelp+0x310>
    2d66:	88 ec       	ldi	r24, 0xC8	; 200
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	9c 83       	std	Y+4, r25	; 0x04
    2d6c:	8b 83       	std	Y+3, r24	; 0x03
    2d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d70:	9c 81       	ldd	r25, Y+4	; 0x04
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	f1 f7       	brne	.-4      	; 0x2d72 <LCDHelp+0x2fe>
    2d76:	9c 83       	std	Y+4, r25	; 0x04
    2d78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	9e 83       	std	Y+6, r25	; 0x06
    2d82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d84:	8d 81       	ldd	r24, Y+5	; 0x05
    2d86:	9e 81       	ldd	r25, Y+6	; 0x06
    2d88:	00 97       	sbiw	r24, 0x00	; 0
    2d8a:	69 f7       	brne	.-38     	; 0x2d66 <LCDHelp+0x2f2>
    2d8c:	14 c0       	rjmp	.+40     	; 0x2db6 <LCDHelp+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d90:	78 85       	ldd	r23, Y+8	; 0x08
    2d92:	89 85       	ldd	r24, Y+9	; 0x09
    2d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	9e 83       	std	Y+6, r25	; 0x06
    2da0:	8d 83       	std	Y+5, r24	; 0x05
    2da2:	8d 81       	ldd	r24, Y+5	; 0x05
    2da4:	9e 81       	ldd	r25, Y+6	; 0x06
    2da6:	9a 83       	std	Y+2, r25	; 0x02
    2da8:	89 83       	std	Y+1, r24	; 0x01
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	9a 81       	ldd	r25, Y+2	; 0x02
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	f1 f7       	brne	.-4      	; 0x2dae <LCDHelp+0x33a>
    2db2:	9a 83       	std	Y+2, r25	; 0x02
    2db4:	89 83       	std	Y+1, r24	; 0x01
		/*extra delay*/
		_delay_ms(10);
	}
    2db6:	6f 96       	adiw	r28, 0x1f	; 31
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	f8 94       	cli
    2dbc:	de bf       	out	0x3e, r29	; 62
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	cd bf       	out	0x3d, r28	; 61
    2dc2:	cf 91       	pop	r28
    2dc4:	df 91       	pop	r29
    2dc6:	08 95       	ret

00002dc8 <LCD_voidSendChar>:

void LCD_voidSendChar(uint8 u8IndexCpy, uint8 u8CharCpy)

{
    2dc8:	df 93       	push	r29
    2dca:	cf 93       	push	r28
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
    2dd0:	ac 97       	sbiw	r28, 0x2c	; 44
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	f8 94       	cli
    2dd6:	de bf       	out	0x3e, r29	; 62
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	cd bf       	out	0x3d, r28	; 61
    2ddc:	8b a7       	std	Y+43, r24	; 0x2b
    2dde:	6c a7       	std	Y+44, r22	; 0x2c
	/*RS  1*/
	DIO_enuWritePin(lcdarr[u8IndexCpy].lcdhwconfig.u8RS , DIO_HIGH);
    2de0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2de2:	28 2f       	mov	r18, r24
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	c9 01       	movw	r24, r18
    2de8:	88 0f       	add	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	82 0f       	add	r24, r18
    2dee:	93 1f       	adc	r25, r19
    2df0:	88 0f       	add	r24, r24
    2df2:	99 1f       	adc	r25, r25
    2df4:	88 0f       	add	r24, r24
    2df6:	99 1f       	adc	r25, r25
    2df8:	fc 01       	movw	r30, r24
    2dfa:	ea 52       	subi	r30, 0x2A	; 42
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	80 81       	ld	r24, Z
    2e00:	61 e0       	ldi	r22, 0x01	; 1
    2e02:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>


	if (lcdarr[u8IndexCpy].lcdswconfig.u8mode==LCD_8_BIT_MODE)
    2e06:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e08:	28 2f       	mov	r18, r24
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	c9 01       	movw	r24, r18
    2e0e:	88 0f       	add	r24, r24
    2e10:	99 1f       	adc	r25, r25
    2e12:	82 0f       	add	r24, r18
    2e14:	93 1f       	adc	r25, r19
    2e16:	88 0f       	add	r24, r24
    2e18:	99 1f       	adc	r25, r25
    2e1a:	88 0f       	add	r24, r24
    2e1c:	99 1f       	adc	r25, r25
    2e1e:	fc 01       	movw	r30, r24
    2e20:	eb 52       	subi	r30, 0x2B	; 43
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	80 81       	ld	r24, Z
    2e26:	81 70       	andi	r24, 0x01	; 1
    2e28:	81 30       	cpi	r24, 0x01	; 1
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <LCD_voidSendChar+0x66>
    2e2c:	77 c0       	rjmp	.+238    	; 0x2f1c <LCD_voidSendChar+0x154>
	{
		LCDHelp(u8IndexCpy,u8CharCpy);
    2e2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e30:	6c a5       	ldd	r22, Y+44	; 0x2c
    2e32:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <LCDHelp>
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	a0 e8       	ldi	r26, 0x80	; 128
    2e3c:	bf e3       	ldi	r27, 0x3F	; 63
    2e3e:	8f a3       	std	Y+39, r24	; 0x27
    2e40:	98 a7       	std	Y+40, r25	; 0x28
    2e42:	a9 a7       	std	Y+41, r26	; 0x29
    2e44:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e46:	6f a1       	ldd	r22, Y+39	; 0x27
    2e48:	78 a5       	ldd	r23, Y+40	; 0x28
    2e4a:	89 a5       	ldd	r24, Y+41	; 0x29
    2e4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	4a ef       	ldi	r20, 0xFA	; 250
    2e54:	54 e4       	ldi	r21, 0x44	; 68
    2e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	8b a3       	std	Y+35, r24	; 0x23
    2e60:	9c a3       	std	Y+36, r25	; 0x24
    2e62:	ad a3       	std	Y+37, r26	; 0x25
    2e64:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e66:	6b a1       	ldd	r22, Y+35	; 0x23
    2e68:	7c a1       	ldd	r23, Y+36	; 0x24
    2e6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e8       	ldi	r20, 0x80	; 128
    2e74:	5f e3       	ldi	r21, 0x3F	; 63
    2e76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e7a:	88 23       	and	r24, r24
    2e7c:	2c f4       	brge	.+10     	; 0x2e88 <LCD_voidSendChar+0xc0>
		__ticks = 1;
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	9a a3       	std	Y+34, r25	; 0x22
    2e84:	89 a3       	std	Y+33, r24	; 0x21
    2e86:	3f c0       	rjmp	.+126    	; 0x2f06 <LCD_voidSendChar+0x13e>
	else if (__tmp > 65535)
    2e88:	6b a1       	ldd	r22, Y+35	; 0x23
    2e8a:	7c a1       	ldd	r23, Y+36	; 0x24
    2e8c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e8e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	3f ef       	ldi	r19, 0xFF	; 255
    2e94:	4f e7       	ldi	r20, 0x7F	; 127
    2e96:	57 e4       	ldi	r21, 0x47	; 71
    2e98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e9c:	18 16       	cp	r1, r24
    2e9e:	4c f5       	brge	.+82     	; 0x2ef2 <LCD_voidSendChar+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea0:	6f a1       	ldd	r22, Y+39	; 0x27
    2ea2:	78 a5       	ldd	r23, Y+40	; 0x28
    2ea4:	89 a5       	ldd	r24, Y+41	; 0x29
    2ea6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	40 e2       	ldi	r20, 0x20	; 32
    2eae:	51 e4       	ldi	r21, 0x41	; 65
    2eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	bc 01       	movw	r22, r24
    2eba:	cd 01       	movw	r24, r26
    2ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	9a a3       	std	Y+34, r25	; 0x22
    2ec6:	89 a3       	std	Y+33, r24	; 0x21
    2ec8:	0f c0       	rjmp	.+30     	; 0x2ee8 <LCD_voidSendChar+0x120>
    2eca:	88 ec       	ldi	r24, 0xC8	; 200
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	98 a3       	std	Y+32, r25	; 0x20
    2ed0:	8f 8f       	std	Y+31, r24	; 0x1f
    2ed2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ed4:	98 a1       	ldd	r25, Y+32	; 0x20
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <LCD_voidSendChar+0x10e>
    2eda:	98 a3       	std	Y+32, r25	; 0x20
    2edc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ede:	89 a1       	ldd	r24, Y+33	; 0x21
    2ee0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	9a a3       	std	Y+34, r25	; 0x22
    2ee6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee8:	89 a1       	ldd	r24, Y+33	; 0x21
    2eea:	9a a1       	ldd	r25, Y+34	; 0x22
    2eec:	00 97       	sbiw	r24, 0x00	; 0
    2eee:	69 f7       	brne	.-38     	; 0x2eca <LCD_voidSendChar+0x102>
    2ef0:	05 c1       	rjmp	.+522    	; 0x30fc <LCD_voidSendChar+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ef4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ef6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ef8:	9e a1       	ldd	r25, Y+38	; 0x26
    2efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	9a a3       	std	Y+34, r25	; 0x22
    2f04:	89 a3       	std	Y+33, r24	; 0x21
    2f06:	89 a1       	ldd	r24, Y+33	; 0x21
    2f08:	9a a1       	ldd	r25, Y+34	; 0x22
    2f0a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f0c:	8d 8f       	std	Y+29, r24	; 0x1d
    2f0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	f1 f7       	brne	.-4      	; 0x2f12 <LCD_voidSendChar+0x14a>
    2f16:	9e 8f       	std	Y+30, r25	; 0x1e
    2f18:	8d 8f       	std	Y+29, r24	; 0x1d
    2f1a:	f0 c0       	rjmp	.+480    	; 0x30fc <LCD_voidSendChar+0x334>
		_delay_ms(1);

	}
	else
	{
		LCDHelp(u8IndexCpy,u8CharCpy);
    2f1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f1e:	6c a5       	ldd	r22, Y+44	; 0x2c
    2f20:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <LCDHelp>
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	a0 e8       	ldi	r26, 0x80	; 128
    2f2a:	bf e3       	ldi	r27, 0x3F	; 63
    2f2c:	89 8f       	std	Y+25, r24	; 0x19
    2f2e:	9a 8f       	std	Y+26, r25	; 0x1a
    2f30:	ab 8f       	std	Y+27, r26	; 0x1b
    2f32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f34:	69 8d       	ldd	r22, Y+25	; 0x19
    2f36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	4a ef       	ldi	r20, 0xFA	; 250
    2f42:	54 e4       	ldi	r21, 0x44	; 68
    2f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	8d 8b       	std	Y+21, r24	; 0x15
    2f4e:	9e 8b       	std	Y+22, r25	; 0x16
    2f50:	af 8b       	std	Y+23, r26	; 0x17
    2f52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f54:	6d 89       	ldd	r22, Y+21	; 0x15
    2f56:	7e 89       	ldd	r23, Y+22	; 0x16
    2f58:	8f 89       	ldd	r24, Y+23	; 0x17
    2f5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e8       	ldi	r20, 0x80	; 128
    2f62:	5f e3       	ldi	r21, 0x3F	; 63
    2f64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f68:	88 23       	and	r24, r24
    2f6a:	2c f4       	brge	.+10     	; 0x2f76 <LCD_voidSendChar+0x1ae>
		__ticks = 1;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	9c 8b       	std	Y+20, r25	; 0x14
    2f72:	8b 8b       	std	Y+19, r24	; 0x13
    2f74:	3f c0       	rjmp	.+126    	; 0x2ff4 <LCD_voidSendChar+0x22c>
	else if (__tmp > 65535)
    2f76:	6d 89       	ldd	r22, Y+21	; 0x15
    2f78:	7e 89       	ldd	r23, Y+22	; 0x16
    2f7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	3f ef       	ldi	r19, 0xFF	; 255
    2f82:	4f e7       	ldi	r20, 0x7F	; 127
    2f84:	57 e4       	ldi	r21, 0x47	; 71
    2f86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f8a:	18 16       	cp	r1, r24
    2f8c:	4c f5       	brge	.+82     	; 0x2fe0 <LCD_voidSendChar+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8e:	69 8d       	ldd	r22, Y+25	; 0x19
    2f90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e2       	ldi	r20, 0x20	; 32
    2f9c:	51 e4       	ldi	r21, 0x41	; 65
    2f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	bc 01       	movw	r22, r24
    2fa8:	cd 01       	movw	r24, r26
    2faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	9c 8b       	std	Y+20, r25	; 0x14
    2fb4:	8b 8b       	std	Y+19, r24	; 0x13
    2fb6:	0f c0       	rjmp	.+30     	; 0x2fd6 <LCD_voidSendChar+0x20e>
    2fb8:	88 ec       	ldi	r24, 0xC8	; 200
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	9a 8b       	std	Y+18, r25	; 0x12
    2fbe:	89 8b       	std	Y+17, r24	; 0x11
    2fc0:	89 89       	ldd	r24, Y+17	; 0x11
    2fc2:	9a 89       	ldd	r25, Y+18	; 0x12
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	f1 f7       	brne	.-4      	; 0x2fc4 <LCD_voidSendChar+0x1fc>
    2fc8:	9a 8b       	std	Y+18, r25	; 0x12
    2fca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fcc:	8b 89       	ldd	r24, Y+19	; 0x13
    2fce:	9c 89       	ldd	r25, Y+20	; 0x14
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	9c 8b       	std	Y+20, r25	; 0x14
    2fd4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd6:	8b 89       	ldd	r24, Y+19	; 0x13
    2fd8:	9c 89       	ldd	r25, Y+20	; 0x14
    2fda:	00 97       	sbiw	r24, 0x00	; 0
    2fdc:	69 f7       	brne	.-38     	; 0x2fb8 <LCD_voidSendChar+0x1f0>
    2fde:	14 c0       	rjmp	.+40     	; 0x3008 <LCD_voidSendChar+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe0:	6d 89       	ldd	r22, Y+21	; 0x15
    2fe2:	7e 89       	ldd	r23, Y+22	; 0x16
    2fe4:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe6:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	9c 8b       	std	Y+20, r25	; 0x14
    2ff2:	8b 8b       	std	Y+19, r24	; 0x13
    2ff4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff8:	98 8b       	std	Y+16, r25	; 0x10
    2ffa:	8f 87       	std	Y+15, r24	; 0x0f
    2ffc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ffe:	98 89       	ldd	r25, Y+16	; 0x10
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <LCD_voidSendChar+0x238>
    3004:	98 8b       	std	Y+16, r25	; 0x10
    3006:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		LCDHelp(u8IndexCpy,u8CharCpy<<4);
    3008:	8c a5       	ldd	r24, Y+44	; 0x2c
    300a:	98 2f       	mov	r25, r24
    300c:	92 95       	swap	r25
    300e:	90 7f       	andi	r25, 0xF0	; 240
    3010:	8b a5       	ldd	r24, Y+43	; 0x2b
    3012:	69 2f       	mov	r22, r25
    3014:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <LCDHelp>
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	a0 e8       	ldi	r26, 0x80	; 128
    301e:	bf e3       	ldi	r27, 0x3F	; 63
    3020:	8b 87       	std	Y+11, r24	; 0x0b
    3022:	9c 87       	std	Y+12, r25	; 0x0c
    3024:	ad 87       	std	Y+13, r26	; 0x0d
    3026:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3028:	6b 85       	ldd	r22, Y+11	; 0x0b
    302a:	7c 85       	ldd	r23, Y+12	; 0x0c
    302c:	8d 85       	ldd	r24, Y+13	; 0x0d
    302e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	4a ef       	ldi	r20, 0xFA	; 250
    3036:	54 e4       	ldi	r21, 0x44	; 68
    3038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	8f 83       	std	Y+7, r24	; 0x07
    3042:	98 87       	std	Y+8, r25	; 0x08
    3044:	a9 87       	std	Y+9, r26	; 0x09
    3046:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3048:	6f 81       	ldd	r22, Y+7	; 0x07
    304a:	78 85       	ldd	r23, Y+8	; 0x08
    304c:	89 85       	ldd	r24, Y+9	; 0x09
    304e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	40 e8       	ldi	r20, 0x80	; 128
    3056:	5f e3       	ldi	r21, 0x3F	; 63
    3058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    305c:	88 23       	and	r24, r24
    305e:	2c f4       	brge	.+10     	; 0x306a <LCD_voidSendChar+0x2a2>
		__ticks = 1;
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	9e 83       	std	Y+6, r25	; 0x06
    3066:	8d 83       	std	Y+5, r24	; 0x05
    3068:	3f c0       	rjmp	.+126    	; 0x30e8 <LCD_voidSendChar+0x320>
	else if (__tmp > 65535)
    306a:	6f 81       	ldd	r22, Y+7	; 0x07
    306c:	78 85       	ldd	r23, Y+8	; 0x08
    306e:	89 85       	ldd	r24, Y+9	; 0x09
    3070:	9a 85       	ldd	r25, Y+10	; 0x0a
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	3f ef       	ldi	r19, 0xFF	; 255
    3076:	4f e7       	ldi	r20, 0x7F	; 127
    3078:	57 e4       	ldi	r21, 0x47	; 71
    307a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    307e:	18 16       	cp	r1, r24
    3080:	4c f5       	brge	.+82     	; 0x30d4 <LCD_voidSendChar+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3082:	6b 85       	ldd	r22, Y+11	; 0x0b
    3084:	7c 85       	ldd	r23, Y+12	; 0x0c
    3086:	8d 85       	ldd	r24, Y+13	; 0x0d
    3088:	9e 85       	ldd	r25, Y+14	; 0x0e
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e2       	ldi	r20, 0x20	; 32
    3090:	51 e4       	ldi	r21, 0x41	; 65
    3092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	bc 01       	movw	r22, r24
    309c:	cd 01       	movw	r24, r26
    309e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	9e 83       	std	Y+6, r25	; 0x06
    30a8:	8d 83       	std	Y+5, r24	; 0x05
    30aa:	0f c0       	rjmp	.+30     	; 0x30ca <LCD_voidSendChar+0x302>
    30ac:	88 ec       	ldi	r24, 0xC8	; 200
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	9c 83       	std	Y+4, r25	; 0x04
    30b2:	8b 83       	std	Y+3, r24	; 0x03
    30b4:	8b 81       	ldd	r24, Y+3	; 0x03
    30b6:	9c 81       	ldd	r25, Y+4	; 0x04
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	f1 f7       	brne	.-4      	; 0x30b8 <LCD_voidSendChar+0x2f0>
    30bc:	9c 83       	std	Y+4, r25	; 0x04
    30be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c0:	8d 81       	ldd	r24, Y+5	; 0x05
    30c2:	9e 81       	ldd	r25, Y+6	; 0x06
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	9e 83       	std	Y+6, r25	; 0x06
    30c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ca:	8d 81       	ldd	r24, Y+5	; 0x05
    30cc:	9e 81       	ldd	r25, Y+6	; 0x06
    30ce:	00 97       	sbiw	r24, 0x00	; 0
    30d0:	69 f7       	brne	.-38     	; 0x30ac <LCD_voidSendChar+0x2e4>
    30d2:	14 c0       	rjmp	.+40     	; 0x30fc <LCD_voidSendChar+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d4:	6f 81       	ldd	r22, Y+7	; 0x07
    30d6:	78 85       	ldd	r23, Y+8	; 0x08
    30d8:	89 85       	ldd	r24, Y+9	; 0x09
    30da:	9a 85       	ldd	r25, Y+10	; 0x0a
    30dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	9e 83       	std	Y+6, r25	; 0x06
    30e6:	8d 83       	std	Y+5, r24	; 0x05
    30e8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ea:	9e 81       	ldd	r25, Y+6	; 0x06
    30ec:	9a 83       	std	Y+2, r25	; 0x02
    30ee:	89 83       	std	Y+1, r24	; 0x01
    30f0:	89 81       	ldd	r24, Y+1	; 0x01
    30f2:	9a 81       	ldd	r25, Y+2	; 0x02
    30f4:	01 97       	sbiw	r24, 0x01	; 1
    30f6:	f1 f7       	brne	.-4      	; 0x30f4 <LCD_voidSendChar+0x32c>
    30f8:	9a 83       	std	Y+2, r25	; 0x02
    30fa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

	}

	}
    30fc:	ac 96       	adiw	r28, 0x2c	; 44
    30fe:	0f b6       	in	r0, 0x3f	; 63
    3100:	f8 94       	cli
    3102:	de bf       	out	0x3e, r29	; 62
    3104:	0f be       	out	0x3f, r0	; 63
    3106:	cd bf       	out	0x3d, r28	; 61
    3108:	cf 91       	pop	r28
    310a:	df 91       	pop	r29
    310c:	08 95       	ret

0000310e <LCD_voidSendCommand>:



void LCD_voidSendCommand(uint8 u8IndexCpy, uint8 u8CommandCpy)
{
    310e:	df 93       	push	r29
    3110:	cf 93       	push	r28
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
    3116:	ac 97       	sbiw	r28, 0x2c	; 44
    3118:	0f b6       	in	r0, 0x3f	; 63
    311a:	f8 94       	cli
    311c:	de bf       	out	0x3e, r29	; 62
    311e:	0f be       	out	0x3f, r0	; 63
    3120:	cd bf       	out	0x3d, r28	; 61
    3122:	8b a7       	std	Y+43, r24	; 0x2b
    3124:	6c a7       	std	Y+44, r22	; 0x2c
	if (lcdarr[u8IndexCpy].lcdswconfig.u8mode==LCD_8_BIT_MODE)
    3126:	8b a5       	ldd	r24, Y+43	; 0x2b
    3128:	28 2f       	mov	r18, r24
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	c9 01       	movw	r24, r18
    312e:	88 0f       	add	r24, r24
    3130:	99 1f       	adc	r25, r25
    3132:	82 0f       	add	r24, r18
    3134:	93 1f       	adc	r25, r19
    3136:	88 0f       	add	r24, r24
    3138:	99 1f       	adc	r25, r25
    313a:	88 0f       	add	r24, r24
    313c:	99 1f       	adc	r25, r25
    313e:	fc 01       	movw	r30, r24
    3140:	eb 52       	subi	r30, 0x2B	; 43
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	80 81       	ld	r24, Z
    3146:	81 70       	andi	r24, 0x01	; 1
    3148:	81 30       	cpi	r24, 0x01	; 1
    314a:	09 f0       	breq	.+2      	; 0x314e <LCD_voidSendCommand+0x40>
    314c:	77 c0       	rjmp	.+238    	; 0x323c <LCD_voidSendCommand+0x12e>
		{
			voidWriteCmd(u8IndexCpy,u8CommandCpy);
    314e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3150:	6c a5       	ldd	r22, Y+44	; 0x2c
    3152:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <voidWriteCmd>
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	a0 e8       	ldi	r26, 0x80	; 128
    315c:	bf e3       	ldi	r27, 0x3F	; 63
    315e:	8f a3       	std	Y+39, r24	; 0x27
    3160:	98 a7       	std	Y+40, r25	; 0x28
    3162:	a9 a7       	std	Y+41, r26	; 0x29
    3164:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3166:	6f a1       	ldd	r22, Y+39	; 0x27
    3168:	78 a5       	ldd	r23, Y+40	; 0x28
    316a:	89 a5       	ldd	r24, Y+41	; 0x29
    316c:	9a a5       	ldd	r25, Y+42	; 0x2a
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	4a ef       	ldi	r20, 0xFA	; 250
    3174:	54 e4       	ldi	r21, 0x44	; 68
    3176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	8b a3       	std	Y+35, r24	; 0x23
    3180:	9c a3       	std	Y+36, r25	; 0x24
    3182:	ad a3       	std	Y+37, r26	; 0x25
    3184:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3186:	6b a1       	ldd	r22, Y+35	; 0x23
    3188:	7c a1       	ldd	r23, Y+36	; 0x24
    318a:	8d a1       	ldd	r24, Y+37	; 0x25
    318c:	9e a1       	ldd	r25, Y+38	; 0x26
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	40 e8       	ldi	r20, 0x80	; 128
    3194:	5f e3       	ldi	r21, 0x3F	; 63
    3196:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    319a:	88 23       	and	r24, r24
    319c:	2c f4       	brge	.+10     	; 0x31a8 <LCD_voidSendCommand+0x9a>
		__ticks = 1;
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	9a a3       	std	Y+34, r25	; 0x22
    31a4:	89 a3       	std	Y+33, r24	; 0x21
    31a6:	3f c0       	rjmp	.+126    	; 0x3226 <LCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
    31a8:	6b a1       	ldd	r22, Y+35	; 0x23
    31aa:	7c a1       	ldd	r23, Y+36	; 0x24
    31ac:	8d a1       	ldd	r24, Y+37	; 0x25
    31ae:	9e a1       	ldd	r25, Y+38	; 0x26
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	3f ef       	ldi	r19, 0xFF	; 255
    31b4:	4f e7       	ldi	r20, 0x7F	; 127
    31b6:	57 e4       	ldi	r21, 0x47	; 71
    31b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31bc:	18 16       	cp	r1, r24
    31be:	4c f5       	brge	.+82     	; 0x3212 <LCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c0:	6f a1       	ldd	r22, Y+39	; 0x27
    31c2:	78 a5       	ldd	r23, Y+40	; 0x28
    31c4:	89 a5       	ldd	r24, Y+41	; 0x29
    31c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	40 e2       	ldi	r20, 0x20	; 32
    31ce:	51 e4       	ldi	r21, 0x41	; 65
    31d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	bc 01       	movw	r22, r24
    31da:	cd 01       	movw	r24, r26
    31dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	9a a3       	std	Y+34, r25	; 0x22
    31e6:	89 a3       	std	Y+33, r24	; 0x21
    31e8:	0f c0       	rjmp	.+30     	; 0x3208 <LCD_voidSendCommand+0xfa>
    31ea:	88 ec       	ldi	r24, 0xC8	; 200
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	98 a3       	std	Y+32, r25	; 0x20
    31f0:	8f 8f       	std	Y+31, r24	; 0x1f
    31f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31f4:	98 a1       	ldd	r25, Y+32	; 0x20
    31f6:	01 97       	sbiw	r24, 0x01	; 1
    31f8:	f1 f7       	brne	.-4      	; 0x31f6 <LCD_voidSendCommand+0xe8>
    31fa:	98 a3       	std	Y+32, r25	; 0x20
    31fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31fe:	89 a1       	ldd	r24, Y+33	; 0x21
    3200:	9a a1       	ldd	r25, Y+34	; 0x22
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	9a a3       	std	Y+34, r25	; 0x22
    3206:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3208:	89 a1       	ldd	r24, Y+33	; 0x21
    320a:	9a a1       	ldd	r25, Y+34	; 0x22
    320c:	00 97       	sbiw	r24, 0x00	; 0
    320e:	69 f7       	brne	.-38     	; 0x31ea <LCD_voidSendCommand+0xdc>
    3210:	05 c1       	rjmp	.+522    	; 0x341c <LCD_voidSendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3212:	6b a1       	ldd	r22, Y+35	; 0x23
    3214:	7c a1       	ldd	r23, Y+36	; 0x24
    3216:	8d a1       	ldd	r24, Y+37	; 0x25
    3218:	9e a1       	ldd	r25, Y+38	; 0x26
    321a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	9a a3       	std	Y+34, r25	; 0x22
    3224:	89 a3       	std	Y+33, r24	; 0x21
    3226:	89 a1       	ldd	r24, Y+33	; 0x21
    3228:	9a a1       	ldd	r25, Y+34	; 0x22
    322a:	9e 8f       	std	Y+30, r25	; 0x1e
    322c:	8d 8f       	std	Y+29, r24	; 0x1d
    322e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3230:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3232:	01 97       	sbiw	r24, 0x01	; 1
    3234:	f1 f7       	brne	.-4      	; 0x3232 <LCD_voidSendCommand+0x124>
    3236:	9e 8f       	std	Y+30, r25	; 0x1e
    3238:	8d 8f       	std	Y+29, r24	; 0x1d
    323a:	f0 c0       	rjmp	.+480    	; 0x341c <LCD_voidSendCommand+0x30e>
			_delay_ms(1);

		}
		else
		{
			voidWriteCmd(u8IndexCpy,u8CommandCpy);
    323c:	8b a5       	ldd	r24, Y+43	; 0x2b
    323e:	6c a5       	ldd	r22, Y+44	; 0x2c
    3240:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <voidWriteCmd>
    3244:	80 e0       	ldi	r24, 0x00	; 0
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	a0 e8       	ldi	r26, 0x80	; 128
    324a:	bf e3       	ldi	r27, 0x3F	; 63
    324c:	89 8f       	std	Y+25, r24	; 0x19
    324e:	9a 8f       	std	Y+26, r25	; 0x1a
    3250:	ab 8f       	std	Y+27, r26	; 0x1b
    3252:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3254:	69 8d       	ldd	r22, Y+25	; 0x19
    3256:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3258:	8b 8d       	ldd	r24, Y+27	; 0x1b
    325a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	4a ef       	ldi	r20, 0xFA	; 250
    3262:	54 e4       	ldi	r21, 0x44	; 68
    3264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	8d 8b       	std	Y+21, r24	; 0x15
    326e:	9e 8b       	std	Y+22, r25	; 0x16
    3270:	af 8b       	std	Y+23, r26	; 0x17
    3272:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3274:	6d 89       	ldd	r22, Y+21	; 0x15
    3276:	7e 89       	ldd	r23, Y+22	; 0x16
    3278:	8f 89       	ldd	r24, Y+23	; 0x17
    327a:	98 8d       	ldd	r25, Y+24	; 0x18
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	40 e8       	ldi	r20, 0x80	; 128
    3282:	5f e3       	ldi	r21, 0x3F	; 63
    3284:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3288:	88 23       	and	r24, r24
    328a:	2c f4       	brge	.+10     	; 0x3296 <LCD_voidSendCommand+0x188>
		__ticks = 1;
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	9c 8b       	std	Y+20, r25	; 0x14
    3292:	8b 8b       	std	Y+19, r24	; 0x13
    3294:	3f c0       	rjmp	.+126    	; 0x3314 <LCD_voidSendCommand+0x206>
	else if (__tmp > 65535)
    3296:	6d 89       	ldd	r22, Y+21	; 0x15
    3298:	7e 89       	ldd	r23, Y+22	; 0x16
    329a:	8f 89       	ldd	r24, Y+23	; 0x17
    329c:	98 8d       	ldd	r25, Y+24	; 0x18
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	3f ef       	ldi	r19, 0xFF	; 255
    32a2:	4f e7       	ldi	r20, 0x7F	; 127
    32a4:	57 e4       	ldi	r21, 0x47	; 71
    32a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32aa:	18 16       	cp	r1, r24
    32ac:	4c f5       	brge	.+82     	; 0x3300 <LCD_voidSendCommand+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ae:	69 8d       	ldd	r22, Y+25	; 0x19
    32b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	40 e2       	ldi	r20, 0x20	; 32
    32bc:	51 e4       	ldi	r21, 0x41	; 65
    32be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	bc 01       	movw	r22, r24
    32c8:	cd 01       	movw	r24, r26
    32ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	9c 8b       	std	Y+20, r25	; 0x14
    32d4:	8b 8b       	std	Y+19, r24	; 0x13
    32d6:	0f c0       	rjmp	.+30     	; 0x32f6 <LCD_voidSendCommand+0x1e8>
    32d8:	88 ec       	ldi	r24, 0xC8	; 200
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	9a 8b       	std	Y+18, r25	; 0x12
    32de:	89 8b       	std	Y+17, r24	; 0x11
    32e0:	89 89       	ldd	r24, Y+17	; 0x11
    32e2:	9a 89       	ldd	r25, Y+18	; 0x12
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	f1 f7       	brne	.-4      	; 0x32e4 <LCD_voidSendCommand+0x1d6>
    32e8:	9a 8b       	std	Y+18, r25	; 0x12
    32ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ec:	8b 89       	ldd	r24, Y+19	; 0x13
    32ee:	9c 89       	ldd	r25, Y+20	; 0x14
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	9c 8b       	std	Y+20, r25	; 0x14
    32f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f6:	8b 89       	ldd	r24, Y+19	; 0x13
    32f8:	9c 89       	ldd	r25, Y+20	; 0x14
    32fa:	00 97       	sbiw	r24, 0x00	; 0
    32fc:	69 f7       	brne	.-38     	; 0x32d8 <LCD_voidSendCommand+0x1ca>
    32fe:	14 c0       	rjmp	.+40     	; 0x3328 <LCD_voidSendCommand+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3300:	6d 89       	ldd	r22, Y+21	; 0x15
    3302:	7e 89       	ldd	r23, Y+22	; 0x16
    3304:	8f 89       	ldd	r24, Y+23	; 0x17
    3306:	98 8d       	ldd	r25, Y+24	; 0x18
    3308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	9c 8b       	std	Y+20, r25	; 0x14
    3312:	8b 8b       	std	Y+19, r24	; 0x13
    3314:	8b 89       	ldd	r24, Y+19	; 0x13
    3316:	9c 89       	ldd	r25, Y+20	; 0x14
    3318:	98 8b       	std	Y+16, r25	; 0x10
    331a:	8f 87       	std	Y+15, r24	; 0x0f
    331c:	8f 85       	ldd	r24, Y+15	; 0x0f
    331e:	98 89       	ldd	r25, Y+16	; 0x10
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	f1 f7       	brne	.-4      	; 0x3320 <LCD_voidSendCommand+0x212>
    3324:	98 8b       	std	Y+16, r25	; 0x10
    3326:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			voidWriteCmd(u8IndexCpy,u8CommandCpy<<4);
    3328:	8c a5       	ldd	r24, Y+44	; 0x2c
    332a:	98 2f       	mov	r25, r24
    332c:	92 95       	swap	r25
    332e:	90 7f       	andi	r25, 0xF0	; 240
    3330:	8b a5       	ldd	r24, Y+43	; 0x2b
    3332:	69 2f       	mov	r22, r25
    3334:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <voidWriteCmd>
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	a0 e8       	ldi	r26, 0x80	; 128
    333e:	bf e3       	ldi	r27, 0x3F	; 63
    3340:	8b 87       	std	Y+11, r24	; 0x0b
    3342:	9c 87       	std	Y+12, r25	; 0x0c
    3344:	ad 87       	std	Y+13, r26	; 0x0d
    3346:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3348:	6b 85       	ldd	r22, Y+11	; 0x0b
    334a:	7c 85       	ldd	r23, Y+12	; 0x0c
    334c:	8d 85       	ldd	r24, Y+13	; 0x0d
    334e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	4a ef       	ldi	r20, 0xFA	; 250
    3356:	54 e4       	ldi	r21, 0x44	; 68
    3358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	8f 83       	std	Y+7, r24	; 0x07
    3362:	98 87       	std	Y+8, r25	; 0x08
    3364:	a9 87       	std	Y+9, r26	; 0x09
    3366:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3368:	6f 81       	ldd	r22, Y+7	; 0x07
    336a:	78 85       	ldd	r23, Y+8	; 0x08
    336c:	89 85       	ldd	r24, Y+9	; 0x09
    336e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	40 e8       	ldi	r20, 0x80	; 128
    3376:	5f e3       	ldi	r21, 0x3F	; 63
    3378:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    337c:	88 23       	and	r24, r24
    337e:	2c f4       	brge	.+10     	; 0x338a <LCD_voidSendCommand+0x27c>
		__ticks = 1;
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	9e 83       	std	Y+6, r25	; 0x06
    3386:	8d 83       	std	Y+5, r24	; 0x05
    3388:	3f c0       	rjmp	.+126    	; 0x3408 <LCD_voidSendCommand+0x2fa>
	else if (__tmp > 65535)
    338a:	6f 81       	ldd	r22, Y+7	; 0x07
    338c:	78 85       	ldd	r23, Y+8	; 0x08
    338e:	89 85       	ldd	r24, Y+9	; 0x09
    3390:	9a 85       	ldd	r25, Y+10	; 0x0a
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	3f ef       	ldi	r19, 0xFF	; 255
    3396:	4f e7       	ldi	r20, 0x7F	; 127
    3398:	57 e4       	ldi	r21, 0x47	; 71
    339a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    339e:	18 16       	cp	r1, r24
    33a0:	4c f5       	brge	.+82     	; 0x33f4 <LCD_voidSendCommand+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e2       	ldi	r20, 0x20	; 32
    33b0:	51 e4       	ldi	r21, 0x41	; 65
    33b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	bc 01       	movw	r22, r24
    33bc:	cd 01       	movw	r24, r26
    33be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	9e 83       	std	Y+6, r25	; 0x06
    33c8:	8d 83       	std	Y+5, r24	; 0x05
    33ca:	0f c0       	rjmp	.+30     	; 0x33ea <LCD_voidSendCommand+0x2dc>
    33cc:	88 ec       	ldi	r24, 0xC8	; 200
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	9c 83       	std	Y+4, r25	; 0x04
    33d2:	8b 83       	std	Y+3, r24	; 0x03
    33d4:	8b 81       	ldd	r24, Y+3	; 0x03
    33d6:	9c 81       	ldd	r25, Y+4	; 0x04
    33d8:	01 97       	sbiw	r24, 0x01	; 1
    33da:	f1 f7       	brne	.-4      	; 0x33d8 <LCD_voidSendCommand+0x2ca>
    33dc:	9c 83       	std	Y+4, r25	; 0x04
    33de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e0:	8d 81       	ldd	r24, Y+5	; 0x05
    33e2:	9e 81       	ldd	r25, Y+6	; 0x06
    33e4:	01 97       	sbiw	r24, 0x01	; 1
    33e6:	9e 83       	std	Y+6, r25	; 0x06
    33e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ea:	8d 81       	ldd	r24, Y+5	; 0x05
    33ec:	9e 81       	ldd	r25, Y+6	; 0x06
    33ee:	00 97       	sbiw	r24, 0x00	; 0
    33f0:	69 f7       	brne	.-38     	; 0x33cc <LCD_voidSendCommand+0x2be>
    33f2:	14 c0       	rjmp	.+40     	; 0x341c <LCD_voidSendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f4:	6f 81       	ldd	r22, Y+7	; 0x07
    33f6:	78 85       	ldd	r23, Y+8	; 0x08
    33f8:	89 85       	ldd	r24, Y+9	; 0x09
    33fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3400:	dc 01       	movw	r26, r24
    3402:	cb 01       	movw	r24, r22
    3404:	9e 83       	std	Y+6, r25	; 0x06
    3406:	8d 83       	std	Y+5, r24	; 0x05
    3408:	8d 81       	ldd	r24, Y+5	; 0x05
    340a:	9e 81       	ldd	r25, Y+6	; 0x06
    340c:	9a 83       	std	Y+2, r25	; 0x02
    340e:	89 83       	std	Y+1, r24	; 0x01
    3410:	89 81       	ldd	r24, Y+1	; 0x01
    3412:	9a 81       	ldd	r25, Y+2	; 0x02
    3414:	01 97       	sbiw	r24, 0x01	; 1
    3416:	f1 f7       	brne	.-4      	; 0x3414 <LCD_voidSendCommand+0x306>
    3418:	9a 83       	std	Y+2, r25	; 0x02
    341a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
		}

}
    341c:	ac 96       	adiw	r28, 0x2c	; 44
    341e:	0f b6       	in	r0, 0x3f	; 63
    3420:	f8 94       	cli
    3422:	de bf       	out	0x3e, r29	; 62
    3424:	0f be       	out	0x3f, r0	; 63
    3426:	cd bf       	out	0x3d, r28	; 61
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <LCD_voidSendString>:



void LCD_voidSendString(uint8 u8IndexCpy, uint8* pau8CharCpy)
{
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	00 d0       	rcall	.+0      	; 0x3434 <LCD_voidSendString+0x6>
    3434:	00 d0       	rcall	.+0      	; 0x3436 <LCD_voidSendString+0x8>
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    343a:	8a 83       	std	Y+2, r24	; 0x02
    343c:	7c 83       	std	Y+4, r23	; 0x04
    343e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8CntLoc=0;
    3440:	19 82       	std	Y+1, r1	; 0x01
    3442:	10 c0       	rjmp	.+32     	; 0x3464 <LCD_voidSendString+0x36>
	while(pau8CharCpy[u8CntLoc]!= '\0')
			{
				LCD_voidSendChar(u8IndexCpy,pau8CharCpy[u8CntLoc])	;
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	28 2f       	mov	r18, r24
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	8b 81       	ldd	r24, Y+3	; 0x03
    344c:	9c 81       	ldd	r25, Y+4	; 0x04
    344e:	fc 01       	movw	r30, r24
    3450:	e2 0f       	add	r30, r18
    3452:	f3 1f       	adc	r31, r19
    3454:	90 81       	ld	r25, Z
    3456:	8a 81       	ldd	r24, Y+2	; 0x02
    3458:	69 2f       	mov	r22, r25
    345a:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <LCD_voidSendChar>
				u8CntLoc++;
    345e:	89 81       	ldd	r24, Y+1	; 0x01
    3460:	8f 5f       	subi	r24, 0xFF	; 255
    3462:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidSendString(uint8 u8IndexCpy, uint8* pau8CharCpy)
{
	uint8 u8CntLoc=0;
	while(pau8CharCpy[u8CntLoc]!= '\0')
    3464:	89 81       	ldd	r24, Y+1	; 0x01
    3466:	28 2f       	mov	r18, r24
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	8b 81       	ldd	r24, Y+3	; 0x03
    346c:	9c 81       	ldd	r25, Y+4	; 0x04
    346e:	fc 01       	movw	r30, r24
    3470:	e2 0f       	add	r30, r18
    3472:	f3 1f       	adc	r31, r19
    3474:	80 81       	ld	r24, Z
    3476:	88 23       	and	r24, r24
    3478:	29 f7       	brne	.-54     	; 0x3444 <LCD_voidSendString+0x16>
			{
				LCD_voidSendChar(u8IndexCpy,pau8CharCpy[u8CntLoc])	;
				u8CntLoc++;
			}
}
    347a:	0f 90       	pop	r0
    347c:	0f 90       	pop	r0
    347e:	0f 90       	pop	r0
    3480:	0f 90       	pop	r0
    3482:	cf 91       	pop	r28
    3484:	df 91       	pop	r29
    3486:	08 95       	ret

00003488 <LCD_voidClrScr>:

void LCD_voidClrScr(uint8 u8IndexCpy)
	{
    3488:	df 93       	push	r29
    348a:	cf 93       	push	r28
    348c:	0f 92       	push	r0
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
    3492:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSendCommand(u8IndexCpy,0x01);
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	61 e0       	ldi	r22, 0x01	; 1
    3498:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_voidSendCommand>
	}
    349c:	0f 90       	pop	r0
    349e:	cf 91       	pop	r28
    34a0:	df 91       	pop	r29
    34a2:	08 95       	ret

000034a4 <LCD_voidSendNumber>:

void LCD_voidSendNumber(uint8 u8IndexCpy,uint16 u16NumberCpy )
{
    34a4:	df 93       	push	r29
    34a6:	cf 93       	push	r28
    34a8:	00 d0       	rcall	.+0      	; 0x34aa <LCD_voidSendNumber+0x6>
    34aa:	00 d0       	rcall	.+0      	; 0x34ac <LCD_voidSendNumber+0x8>
    34ac:	0f 92       	push	r0
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
    34b2:	8b 83       	std	Y+3, r24	; 0x03
    34b4:	7d 83       	std	Y+5, r23	; 0x05
    34b6:	6c 83       	std	Y+4, r22	; 0x04
				//514
			uint16 u16NumRange = 1;
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	9a 83       	std	Y+2, r25	; 0x02
    34be:	89 83       	std	Y+1, r24	; 0x01
    34c0:	0e c0       	rjmp	.+28     	; 0x34de <LCD_voidSendNumber+0x3a>
			//514/1=514  ==> 514/10=51 ==> 5
			while((u16NumberCpy/u16NumRange) >= 10)
			{
				//range=10 ==> 100>
				u16NumRange =u16NumRange*10;
    34c2:	89 81       	ldd	r24, Y+1	; 0x01
    34c4:	9a 81       	ldd	r25, Y+2	; 0x02
    34c6:	9c 01       	movw	r18, r24
    34c8:	22 0f       	add	r18, r18
    34ca:	33 1f       	adc	r19, r19
    34cc:	c9 01       	movw	r24, r18
    34ce:	88 0f       	add	r24, r24
    34d0:	99 1f       	adc	r25, r25
    34d2:	88 0f       	add	r24, r24
    34d4:	99 1f       	adc	r25, r25
    34d6:	82 0f       	add	r24, r18
    34d8:	93 1f       	adc	r25, r19
    34da:	9a 83       	std	Y+2, r25	; 0x02
    34dc:	89 83       	std	Y+1, r24	; 0x01
void LCD_voidSendNumber(uint8 u8IndexCpy,uint16 u16NumberCpy )
{
				//514
			uint16 u16NumRange = 1;
			//514/1=514  ==> 514/10=51 ==> 5
			while((u16NumberCpy/u16NumRange) >= 10)
    34de:	8c 81       	ldd	r24, Y+4	; 0x04
    34e0:	9d 81       	ldd	r25, Y+5	; 0x05
    34e2:	29 81       	ldd	r18, Y+1	; 0x01
    34e4:	3a 81       	ldd	r19, Y+2	; 0x02
    34e6:	b9 01       	movw	r22, r18
    34e8:	0e 94 02 22 	call	0x4404	; 0x4404 <__udivmodhi4>
    34ec:	cb 01       	movw	r24, r22
    34ee:	8a 30       	cpi	r24, 0x0A	; 10
    34f0:	91 05       	cpc	r25, r1
    34f2:	38 f7       	brcc	.-50     	; 0x34c2 <LCD_voidSendNumber+0x1e>
    34f4:	21 c0       	rjmp	.+66     	; 0x3538 <LCD_voidSendNumber+0x94>
				u16NumRange =u16NumRange*10;
			}

			while(u16NumRange != 0)
			{
				LCD_voidSendChar(0, ((u16NumberCpy/u16NumRange) + '0') );
    34f6:	8c 81       	ldd	r24, Y+4	; 0x04
    34f8:	9d 81       	ldd	r25, Y+5	; 0x05
    34fa:	29 81       	ldd	r18, Y+1	; 0x01
    34fc:	3a 81       	ldd	r19, Y+2	; 0x02
    34fe:	b9 01       	movw	r22, r18
    3500:	0e 94 02 22 	call	0x4404	; 0x4404 <__udivmodhi4>
    3504:	cb 01       	movw	r24, r22
    3506:	98 2f       	mov	r25, r24
    3508:	90 5d       	subi	r25, 0xD0	; 208
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	69 2f       	mov	r22, r25
    350e:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <LCD_voidSendChar>

				u16NumberCpy = u16NumberCpy % u16NumRange;
    3512:	8c 81       	ldd	r24, Y+4	; 0x04
    3514:	9d 81       	ldd	r25, Y+5	; 0x05
    3516:	29 81       	ldd	r18, Y+1	; 0x01
    3518:	3a 81       	ldd	r19, Y+2	; 0x02
    351a:	b9 01       	movw	r22, r18
    351c:	0e 94 02 22 	call	0x4404	; 0x4404 <__udivmodhi4>
    3520:	9d 83       	std	Y+5, r25	; 0x05
    3522:	8c 83       	std	Y+4, r24	; 0x04
				u16NumRange =u16NumRange/ 10;
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	9a 81       	ldd	r25, Y+2	; 0x02
    3528:	2a e0       	ldi	r18, 0x0A	; 10
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	b9 01       	movw	r22, r18
    352e:	0e 94 02 22 	call	0x4404	; 0x4404 <__udivmodhi4>
    3532:	cb 01       	movw	r24, r22
    3534:	9a 83       	std	Y+2, r25	; 0x02
    3536:	89 83       	std	Y+1, r24	; 0x01
			{
				//range=10 ==> 100>
				u16NumRange =u16NumRange*10;
			}

			while(u16NumRange != 0)
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	9a 81       	ldd	r25, Y+2	; 0x02
    353c:	00 97       	sbiw	r24, 0x00	; 0
    353e:	d9 f6       	brne	.-74     	; 0x34f6 <LCD_voidSendNumber+0x52>
				LCD_voidSendChar(0, ((u16NumberCpy/u16NumRange) + '0') );

				u16NumberCpy = u16NumberCpy % u16NumRange;
				u16NumRange =u16NumRange/ 10;
			}
}
    3540:	0f 90       	pop	r0
    3542:	0f 90       	pop	r0
    3544:	0f 90       	pop	r0
    3546:	0f 90       	pop	r0
    3548:	0f 90       	pop	r0
    354a:	cf 91       	pop	r28
    354c:	df 91       	pop	r29
    354e:	08 95       	ret

00003550 <LCD_voidMoveCourser>:

//LCD_voidSendHexString(u8IndexCpy,u8arrhexa_Number,u8arrIndex);
//}

void LCD_voidMoveCourser(uint8 u8IndexCpy,uint8 u8RowCPy,uint8 u8ColmCpy)
{
    3550:	df 93       	push	r29
    3552:	cf 93       	push	r28
    3554:	00 d0       	rcall	.+0      	; 0x3556 <LCD_voidMoveCourser+0x6>
    3556:	00 d0       	rcall	.+0      	; 0x3558 <LCD_voidMoveCourser+0x8>
    3558:	cd b7       	in	r28, 0x3d	; 61
    355a:	de b7       	in	r29, 0x3e	; 62
    355c:	8a 83       	std	Y+2, r24	; 0x02
    355e:	6b 83       	std	Y+3, r22	; 0x03
    3560:	4c 83       	std	Y+4, r20	; 0x04
    uint8 u8AddressLoc=0;
    3562:	19 82       	std	Y+1, r1	; 0x01

    if (u8RowCPy == 0)
    3564:	8b 81       	ldd	r24, Y+3	; 0x03
    3566:	88 23       	and	r24, r24
    3568:	19 f4       	brne	.+6      	; 0x3570 <LCD_voidMoveCourser+0x20>
    {
        u8AddressLoc = 0x00 + u8ColmCpy;
    356a:	8c 81       	ldd	r24, Y+4	; 0x04
    356c:	89 83       	std	Y+1, r24	; 0x01
    356e:	03 c0       	rjmp	.+6      	; 0x3576 <LCD_voidMoveCourser+0x26>
    }
    else
    {
        u8AddressLoc = 0x40 + u8ColmCpy;
    3570:	8c 81       	ldd	r24, Y+4	; 0x04
    3572:	80 5c       	subi	r24, 0xC0	; 192
    3574:	89 83       	std	Y+1, r24	; 0x01
    }

    SET_BIT(u8AddressLoc,7);
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	80 68       	ori	r24, 0x80	; 128
    357a:	89 83       	std	Y+1, r24	; 0x01

    LCD_voidSendCommand(u8IndexCpy,u8AddressLoc);
    357c:	8a 81       	ldd	r24, Y+2	; 0x02
    357e:	69 81       	ldd	r22, Y+1	; 0x01
    3580:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_voidSendCommand>
}
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
    3588:	0f 90       	pop	r0
    358a:	0f 90       	pop	r0
    358c:	cf 91       	pop	r28
    358e:	df 91       	pop	r29
    3590:	08 95       	ret

00003592 <KPD_voidInit>:




void KPD_voidInit(void)
{
    3592:	df 93       	push	r29
    3594:	cf 93       	push	r28
    3596:	cd b7       	in	r28, 0x3d	; 61
    3598:	de b7       	in	r29, 0x3e	; 62
	DIO_enuWritePin(KPD_COL0,DIO_HIGH);
    359a:	8c e1       	ldi	r24, 0x1C	; 28
    359c:	61 e0       	ldi	r22, 0x01	; 1
    359e:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>
	DIO_enuWritePin(KPD_COL1,DIO_HIGH);
    35a2:	8d e1       	ldi	r24, 0x1D	; 29
    35a4:	61 e0       	ldi	r22, 0x01	; 1
    35a6:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>
	DIO_enuWritePin(KPD_COL2,DIO_HIGH);
    35aa:	8e e1       	ldi	r24, 0x1E	; 30
    35ac:	61 e0       	ldi	r22, 0x01	; 1
    35ae:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>
	DIO_enuWritePin(KPD_COL3,DIO_HIGH);
    35b2:	8f e1       	ldi	r24, 0x1F	; 31
    35b4:	61 e0       	ldi	r22, 0x01	; 1
    35b6:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>

	DIO_enuStatePullup(KPD_ROW0,DIO_ACTIVATE_PULLUP);
    35ba:	88 e1       	ldi	r24, 0x18	; 24
    35bc:	61 e0       	ldi	r22, 0x01	; 1
    35be:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_enuStatePullup>
	DIO_enuStatePullup(KPD_ROW1,DIO_ACTIVATE_PULLUP);
    35c2:	89 e1       	ldi	r24, 0x19	; 25
    35c4:	61 e0       	ldi	r22, 0x01	; 1
    35c6:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_enuStatePullup>
	DIO_enuStatePullup(KPD_ROW2,DIO_ACTIVATE_PULLUP);
    35ca:	8a e1       	ldi	r24, 0x1A	; 26
    35cc:	61 e0       	ldi	r22, 0x01	; 1
    35ce:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_enuStatePullup>
	DIO_enuStatePullup(KPD_ROW3,DIO_ACTIVATE_PULLUP);
    35d2:	8b e1       	ldi	r24, 0x1B	; 27
    35d4:	61 e0       	ldi	r22, 0x01	; 1
    35d6:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_enuStatePullup>

}
    35da:	cf 91       	pop	r28
    35dc:	df 91       	pop	r29
    35de:	08 95       	ret

000035e0 <KPD_u8GetPressedKey>:
uint8 KPD_u8GetPressedKey(void)
{
    35e0:	df 93       	push	r29
    35e2:	cf 93       	push	r28
    35e4:	00 d0       	rcall	.+0      	; 0x35e6 <KPD_u8GetPressedKey+0x6>
    35e6:	cd b7       	in	r28, 0x3d	; 61
    35e8:	de b7       	in	r29, 0x3e	; 62
	static uint8 u8KpdColArr[4]={KPD_COL0,KPD_COL1,KPD_COL2,KPD_COL3};
	static uint8 u8KpdRowArr[4]={KPD_ROW0,KPD_ROW1,KPD_ROW2,KPD_ROW3};
	static uint8 u8KpdColIdx;
	static uint8 u8KpdRowIdx;
	static uint8 u8KpdPinState;
	uint8 u8KpdPressedKeyLoc=NOT_KEY_PRESSED;
    35ea:	8f ef       	ldi	r24, 0xFF	; 255
    35ec:	89 83       	std	Y+1, r24	; 0x01

	static uint8 au8KpdArrLoc[4][4]= KPD_BUTTONS;


	for (u8KpdColIdx=0 ;u8KpdColIdx<4 ;u8KpdColIdx++)
    35ee:	10 92 06 01 	sts	0x0106, r1
    35f2:	6d c0       	rjmp	.+218    	; 0x36ce <KPD_u8GetPressedKey+0xee>
	{
		DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_LOW);
    35f4:	80 91 06 01 	lds	r24, 0x0106
    35f8:	88 2f       	mov	r24, r24
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	fc 01       	movw	r30, r24
    35fe:	eb 50       	subi	r30, 0x0B	; 11
    3600:	ff 4f       	sbci	r31, 0xFF	; 255
    3602:	80 81       	ld	r24, Z
    3604:	60 e0       	ldi	r22, 0x00	; 0
    3606:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>


		for(u8KpdRowIdx=0;u8KpdRowIdx<4;u8KpdRowIdx++)
    360a:	10 92 05 01 	sts	0x0105, r1
    360e:	4a c0       	rjmp	.+148    	; 0x36a4 <KPD_u8GetPressedKey+0xc4>
		{
			DIO_enuReadPin(u8KpdRowArr[u8KpdRowIdx],&u8KpdPinState);
    3610:	80 91 05 01 	lds	r24, 0x0105
    3614:	88 2f       	mov	r24, r24
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	fc 01       	movw	r30, r24
    361a:	ef 50       	subi	r30, 0x0F	; 15
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	80 81       	ld	r24, Z
    3620:	24 e0       	ldi	r18, 0x04	; 4
    3622:	31 e0       	ldi	r19, 0x01	; 1
    3624:	b9 01       	movw	r22, r18
    3626:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <DIO_enuReadPin>
			if (u8KpdPinState==DIO_LOW)
    362a:	80 91 04 01 	lds	r24, 0x0104
    362e:	88 23       	and	r24, r24
    3630:	a1 f5       	brne	.+104    	; 0x369a <KPD_u8GetPressedKey+0xba>
			{
				u8KpdPressedKeyLoc=au8KpdArrLoc[u8KpdRowIdx][u8KpdColIdx];
    3632:	80 91 05 01 	lds	r24, 0x0105
    3636:	48 2f       	mov	r20, r24
    3638:	50 e0       	ldi	r21, 0x00	; 0
    363a:	80 91 06 01 	lds	r24, 0x0106
    363e:	28 2f       	mov	r18, r24
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	ca 01       	movw	r24, r20
    3644:	88 0f       	add	r24, r24
    3646:	99 1f       	adc	r25, r25
    3648:	88 0f       	add	r24, r24
    364a:	99 1f       	adc	r25, r25
    364c:	82 0f       	add	r24, r18
    364e:	93 1f       	adc	r25, r19
    3650:	fc 01       	movw	r30, r24
    3652:	ef 51       	subi	r30, 0x1F	; 31
    3654:	ff 4f       	sbci	r31, 0xFF	; 255
    3656:	80 81       	ld	r24, Z
    3658:	89 83       	std	Y+1, r24	; 0x01
    365a:	0d c0       	rjmp	.+26     	; 0x3676 <KPD_u8GetPressedKey+0x96>

				while(u8KpdPinState==DIO_LOW)
				{
					DIO_enuReadPin(u8KpdRowArr[u8KpdRowIdx],&u8KpdPinState);
    365c:	80 91 05 01 	lds	r24, 0x0105
    3660:	88 2f       	mov	r24, r24
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	fc 01       	movw	r30, r24
    3666:	ef 50       	subi	r30, 0x0F	; 15
    3668:	ff 4f       	sbci	r31, 0xFF	; 255
    366a:	80 81       	ld	r24, Z
    366c:	24 e0       	ldi	r18, 0x04	; 4
    366e:	31 e0       	ldi	r19, 0x01	; 1
    3670:	b9 01       	movw	r22, r18
    3672:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <DIO_enuReadPin>
			DIO_enuReadPin(u8KpdRowArr[u8KpdRowIdx],&u8KpdPinState);
			if (u8KpdPinState==DIO_LOW)
			{
				u8KpdPressedKeyLoc=au8KpdArrLoc[u8KpdRowIdx][u8KpdColIdx];

				while(u8KpdPinState==DIO_LOW)
    3676:	80 91 04 01 	lds	r24, 0x0104
    367a:	88 23       	and	r24, r24
    367c:	79 f3       	breq	.-34     	; 0x365c <KPD_u8GetPressedKey+0x7c>
				{
					DIO_enuReadPin(u8KpdRowArr[u8KpdRowIdx],&u8KpdPinState);
				}
				DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_HIGH);
    367e:	80 91 06 01 	lds	r24, 0x0106
    3682:	88 2f       	mov	r24, r24
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	fc 01       	movw	r30, r24
    3688:	eb 50       	subi	r30, 0x0B	; 11
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	80 81       	ld	r24, Z
    368e:	61 e0       	ldi	r22, 0x01	; 1
    3690:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>

				return u8KpdPressedKeyLoc;
    3694:	89 81       	ldd	r24, Y+1	; 0x01
    3696:	8a 83       	std	Y+2, r24	; 0x02
    3698:	21 c0       	rjmp	.+66     	; 0x36dc <KPD_u8GetPressedKey+0xfc>
	for (u8KpdColIdx=0 ;u8KpdColIdx<4 ;u8KpdColIdx++)
	{
		DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_LOW);


		for(u8KpdRowIdx=0;u8KpdRowIdx<4;u8KpdRowIdx++)
    369a:	80 91 05 01 	lds	r24, 0x0105
    369e:	8f 5f       	subi	r24, 0xFF	; 255
    36a0:	80 93 05 01 	sts	0x0105, r24
    36a4:	80 91 05 01 	lds	r24, 0x0105
    36a8:	84 30       	cpi	r24, 0x04	; 4
    36aa:	08 f4       	brcc	.+2      	; 0x36ae <KPD_u8GetPressedKey+0xce>
    36ac:	b1 cf       	rjmp	.-158    	; 0x3610 <KPD_u8GetPressedKey+0x30>

				return u8KpdPressedKeyLoc;
			}

		}
		DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_HIGH);
    36ae:	80 91 06 01 	lds	r24, 0x0106
    36b2:	88 2f       	mov	r24, r24
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	fc 01       	movw	r30, r24
    36b8:	eb 50       	subi	r30, 0x0B	; 11
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	80 81       	ld	r24, Z
    36be:	61 e0       	ldi	r22, 0x01	; 1
    36c0:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_enuWritePin>
	uint8 u8KpdPressedKeyLoc=NOT_KEY_PRESSED;

	static uint8 au8KpdArrLoc[4][4]= KPD_BUTTONS;


	for (u8KpdColIdx=0 ;u8KpdColIdx<4 ;u8KpdColIdx++)
    36c4:	80 91 06 01 	lds	r24, 0x0106
    36c8:	8f 5f       	subi	r24, 0xFF	; 255
    36ca:	80 93 06 01 	sts	0x0106, r24
    36ce:	80 91 06 01 	lds	r24, 0x0106
    36d2:	84 30       	cpi	r24, 0x04	; 4
    36d4:	08 f4       	brcc	.+2      	; 0x36d8 <KPD_u8GetPressedKey+0xf8>
    36d6:	8e cf       	rjmp	.-228    	; 0x35f4 <KPD_u8GetPressedKey+0x14>

		}
		DIO_enuWritePin(u8KpdColArr[u8KpdColIdx],DIO_HIGH);

	}
	return u8KpdPressedKeyLoc;
    36d8:	89 81       	ldd	r24, Y+1	; 0x01
    36da:	8a 83       	std	Y+2, r24	; 0x02
    36dc:	8a 81       	ldd	r24, Y+2	; 0x02


}
    36de:	0f 90       	pop	r0
    36e0:	0f 90       	pop	r0
    36e2:	cf 91       	pop	r28
    36e4:	df 91       	pop	r29
    36e6:	08 95       	ret

000036e8 <main>:

uint8 u8PressedKey=0xff;
uint8 u8Hrs,u8Mins,u8Sec;

void main(void)
{
    36e8:	df 93       	push	r29
    36ea:	cf 93       	push	r28
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
    36f0:	2e 97       	sbiw	r28, 0x0e	; 14
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	f8 94       	cli
    36f6:	de bf       	out	0x3e, r29	; 62
    36f8:	0f be       	out	0x3f, r0	; 63
    36fa:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    36fc:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_voidInit>
	KPD_voidInit();
    3700:	0e 94 c9 1a 	call	0x3592	; 0x3592 <KPD_voidInit>
	LCD_voidInit();
    3704:	0e 94 cf 0c 	call	0x199e	; 0x199e <LCD_voidInit>
	TIM2_voidExtClkEnable();
    3708:	0e 94 71 06 	call	0xce2	; 0xce2 <TIM2_voidExtClkEnable>
	TIM2_voidInit();
    370c:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIM2_voidInit>
	TIM2_voidSetCallBackOvfInt(Clock);
    3710:	81 e3       	ldi	r24, 0x31	; 49
    3712:	9e e1       	ldi	r25, 0x1E	; 30
    3714:	0e 94 27 06 	call	0xc4e	; 0xc4e <TIM2_voidSetCallBackOvfInt>
	TIM2_voidEnableOvfINt();
    3718:	0e 94 ef 05 	call	0xbde	; 0xbde <TIM2_voidEnableOvfINt>
	TIM2_voidEnable(PRESCALER_128);
    371c:	85 e0       	ldi	r24, 0x05	; 5
    371e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <TIM2_voidEnable>

	LCD_voidSendString(0,"Welcome Khalil");
    3722:	20 e6       	ldi	r18, 0x60	; 96
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	b9 01       	movw	r22, r18
    372a:	0e 94 17 1a 	call	0x342e	; 0x342e <LCD_voidSendString>
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	aa e7       	ldi	r26, 0x7A	; 122
    3734:	b4 e4       	ldi	r27, 0x44	; 68
    3736:	8b 87       	std	Y+11, r24	; 0x0b
    3738:	9c 87       	std	Y+12, r25	; 0x0c
    373a:	ad 87       	std	Y+13, r26	; 0x0d
    373c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    373e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3740:	7c 85       	ldd	r23, Y+12	; 0x0c
    3742:	8d 85       	ldd	r24, Y+13	; 0x0d
    3744:	9e 85       	ldd	r25, Y+14	; 0x0e
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	4a ef       	ldi	r20, 0xFA	; 250
    374c:	54 e4       	ldi	r21, 0x44	; 68
    374e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	8f 83       	std	Y+7, r24	; 0x07
    3758:	98 87       	std	Y+8, r25	; 0x08
    375a:	a9 87       	std	Y+9, r26	; 0x09
    375c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    375e:	6f 81       	ldd	r22, Y+7	; 0x07
    3760:	78 85       	ldd	r23, Y+8	; 0x08
    3762:	89 85       	ldd	r24, Y+9	; 0x09
    3764:	9a 85       	ldd	r25, Y+10	; 0x0a
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	40 e8       	ldi	r20, 0x80	; 128
    376c:	5f e3       	ldi	r21, 0x3F	; 63
    376e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3772:	88 23       	and	r24, r24
    3774:	2c f4       	brge	.+10     	; 0x3780 <main+0x98>
		__ticks = 1;
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	9e 83       	std	Y+6, r25	; 0x06
    377c:	8d 83       	std	Y+5, r24	; 0x05
    377e:	3f c0       	rjmp	.+126    	; 0x37fe <main+0x116>
	else if (__tmp > 65535)
    3780:	6f 81       	ldd	r22, Y+7	; 0x07
    3782:	78 85       	ldd	r23, Y+8	; 0x08
    3784:	89 85       	ldd	r24, Y+9	; 0x09
    3786:	9a 85       	ldd	r25, Y+10	; 0x0a
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	3f ef       	ldi	r19, 0xFF	; 255
    378c:	4f e7       	ldi	r20, 0x7F	; 127
    378e:	57 e4       	ldi	r21, 0x47	; 71
    3790:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3794:	18 16       	cp	r1, r24
    3796:	4c f5       	brge	.+82     	; 0x37ea <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3798:	6b 85       	ldd	r22, Y+11	; 0x0b
    379a:	7c 85       	ldd	r23, Y+12	; 0x0c
    379c:	8d 85       	ldd	r24, Y+13	; 0x0d
    379e:	9e 85       	ldd	r25, Y+14	; 0x0e
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	40 e2       	ldi	r20, 0x20	; 32
    37a6:	51 e4       	ldi	r21, 0x41	; 65
    37a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	bc 01       	movw	r22, r24
    37b2:	cd 01       	movw	r24, r26
    37b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	9e 83       	std	Y+6, r25	; 0x06
    37be:	8d 83       	std	Y+5, r24	; 0x05
    37c0:	0f c0       	rjmp	.+30     	; 0x37e0 <main+0xf8>
    37c2:	88 ec       	ldi	r24, 0xC8	; 200
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	9c 83       	std	Y+4, r25	; 0x04
    37c8:	8b 83       	std	Y+3, r24	; 0x03
    37ca:	8b 81       	ldd	r24, Y+3	; 0x03
    37cc:	9c 81       	ldd	r25, Y+4	; 0x04
    37ce:	01 97       	sbiw	r24, 0x01	; 1
    37d0:	f1 f7       	brne	.-4      	; 0x37ce <main+0xe6>
    37d2:	9c 83       	std	Y+4, r25	; 0x04
    37d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d6:	8d 81       	ldd	r24, Y+5	; 0x05
    37d8:	9e 81       	ldd	r25, Y+6	; 0x06
    37da:	01 97       	sbiw	r24, 0x01	; 1
    37dc:	9e 83       	std	Y+6, r25	; 0x06
    37de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37e0:	8d 81       	ldd	r24, Y+5	; 0x05
    37e2:	9e 81       	ldd	r25, Y+6	; 0x06
    37e4:	00 97       	sbiw	r24, 0x00	; 0
    37e6:	69 f7       	brne	.-38     	; 0x37c2 <main+0xda>
    37e8:	14 c0       	rjmp	.+40     	; 0x3812 <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ea:	6f 81       	ldd	r22, Y+7	; 0x07
    37ec:	78 85       	ldd	r23, Y+8	; 0x08
    37ee:	89 85       	ldd	r24, Y+9	; 0x09
    37f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	9e 83       	std	Y+6, r25	; 0x06
    37fc:	8d 83       	std	Y+5, r24	; 0x05
    37fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3800:	9e 81       	ldd	r25, Y+6	; 0x06
    3802:	9a 83       	std	Y+2, r25	; 0x02
    3804:	89 83       	std	Y+1, r24	; 0x01
    3806:	89 81       	ldd	r24, Y+1	; 0x01
    3808:	9a 81       	ldd	r25, Y+2	; 0x02
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	f1 f7       	brne	.-4      	; 0x380a <main+0x122>
    380e:	9a 83       	std	Y+2, r25	; 0x02
    3810:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_voidClrScr(0);
    3812:	80 e0       	ldi	r24, 0x00	; 0
    3814:	0e 94 44 1a 	call	0x3488	; 0x3488 <LCD_voidClrScr>
	SetTime();
    3818:	0e 94 26 1c 	call	0x384c	; 0x384c <SetTime>
	GIE_voidEnable();
    381c:	0e 94 23 08 	call	0x1046	; 0x1046 <GIE_voidEnable>
	while(1)
	{
      SendTime();
    3820:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SendTime>
    3824:	fd cf       	rjmp	.-6      	; 0x3820 <main+0x138>

00003826 <PressedKey>:
	}

}

void PressedKey(void)
{
    3826:	df 93       	push	r29
    3828:	cf 93       	push	r28
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62
	u8PressedKey=0xff;
    382e:	8f ef       	ldi	r24, 0xFF	; 255
    3830:	80 93 f9 00 	sts	0x00F9, r24
    3834:	04 c0       	rjmp	.+8      	; 0x383e <PressedKey+0x18>

	while(u8PressedKey==0xff)
	{
		u8PressedKey=KPD_u8GetPressedKey();
    3836:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <KPD_u8GetPressedKey>
    383a:	80 93 f9 00 	sts	0x00F9, r24

void PressedKey(void)
{
	u8PressedKey=0xff;

	while(u8PressedKey==0xff)
    383e:	80 91 f9 00 	lds	r24, 0x00F9
    3842:	8f 3f       	cpi	r24, 0xFF	; 255
    3844:	c1 f3       	breq	.-16     	; 0x3836 <PressedKey+0x10>
	{
		u8PressedKey=KPD_u8GetPressedKey();
	}
}
    3846:	cf 91       	pop	r28
    3848:	df 91       	pop	r29
    384a:	08 95       	ret

0000384c <SetTime>:

void SetTime(void)
{
    384c:	df 93       	push	r29
    384e:	cf 93       	push	r28
    3850:	cd b7       	in	r28, 0x3d	; 61
    3852:	de b7       	in	r29, 0x3e	; 62
    3854:	ab 97       	sbiw	r28, 0x2b	; 43
    3856:	0f b6       	in	r0, 0x3f	; 63
    3858:	f8 94       	cli
    385a:	de bf       	out	0x3e, r29	; 62
    385c:	0f be       	out	0x3f, r0	; 63
    385e:	cd bf       	out	0x3d, r28	; 61
	uint8 u8Counter_loc=0;
    3860:	1b a6       	std	Y+43, r1	; 0x2b

	LCD_voidSendString(0,"Set Hours: ");
    3862:	2f e6       	ldi	r18, 0x6F	; 111
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	80 e0       	ldi	r24, 0x00	; 0
    3868:	b9 01       	movw	r22, r18
    386a:	0e 94 17 1a 	call	0x342e	; 0x342e <LCD_voidSendString>
    386e:	28 c0       	rjmp	.+80     	; 0x38c0 <SetTime+0x74>


	while(u8Counter_loc<2)
	{
		PressedKey();
    3870:	0e 94 13 1c 	call	0x3826	; 0x3826 <PressedKey>
		if (u8PressedKey >= '0' && u8PressedKey <= '9')
    3874:	80 91 f9 00 	lds	r24, 0x00F9
    3878:	80 33       	cpi	r24, 0x30	; 48
    387a:	f8 f0       	brcs	.+62     	; 0x38ba <SetTime+0x6e>
    387c:	80 91 f9 00 	lds	r24, 0x00F9
    3880:	8a 33       	cpi	r24, 0x3A	; 58
    3882:	d8 f4       	brcc	.+54     	; 0x38ba <SetTime+0x6e>
		{
			//pressed key = '1'  //   pressed key ='2'
			 //hrs1   =   0*10      + '1'-'0'= 1  //  hrs2 = 1*10 + '2'-'0' =12
			u8Hrs = u8Hrs*10 +(u8PressedKey-'0');
    3884:	80 91 12 01 	lds	r24, 0x0112
    3888:	88 2f       	mov	r24, r24
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	9c 01       	movw	r18, r24
    388e:	22 0f       	add	r18, r18
    3890:	33 1f       	adc	r19, r19
    3892:	c9 01       	movw	r24, r18
    3894:	88 0f       	add	r24, r24
    3896:	99 1f       	adc	r25, r25
    3898:	88 0f       	add	r24, r24
    389a:	99 1f       	adc	r25, r25
    389c:	82 0f       	add	r24, r18
    389e:	93 1f       	adc	r25, r19
    38a0:	98 2f       	mov	r25, r24
    38a2:	80 91 f9 00 	lds	r24, 0x00F9
    38a6:	89 0f       	add	r24, r25
    38a8:	80 53       	subi	r24, 0x30	; 48
    38aa:	80 93 12 01 	sts	0x0112, r24
			LCD_voidSendChar(0,u8PressedKey);
    38ae:	90 91 f9 00 	lds	r25, 0x00F9
    38b2:	80 e0       	ldi	r24, 0x00	; 0
    38b4:	69 2f       	mov	r22, r25
    38b6:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <LCD_voidSendChar>
		}

		u8Counter_loc++;
    38ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    38bc:	8f 5f       	subi	r24, 0xFF	; 255
    38be:	8b a7       	std	Y+43, r24	; 0x2b
	uint8 u8Counter_loc=0;

	LCD_voidSendString(0,"Set Hours: ");


	while(u8Counter_loc<2)
    38c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    38c2:	82 30       	cpi	r24, 0x02	; 2
    38c4:	a8 f2       	brcs	.-86     	; 0x3870 <SetTime+0x24>
    38c6:	80 e0       	ldi	r24, 0x00	; 0
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	aa e7       	ldi	r26, 0x7A	; 122
    38cc:	b4 e4       	ldi	r27, 0x44	; 68
    38ce:	8f a3       	std	Y+39, r24	; 0x27
    38d0:	98 a7       	std	Y+40, r25	; 0x28
    38d2:	a9 a7       	std	Y+41, r26	; 0x29
    38d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38d6:	6f a1       	ldd	r22, Y+39	; 0x27
    38d8:	78 a5       	ldd	r23, Y+40	; 0x28
    38da:	89 a5       	ldd	r24, Y+41	; 0x29
    38dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	4a ef       	ldi	r20, 0xFA	; 250
    38e4:	54 e4       	ldi	r21, 0x44	; 68
    38e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	8b a3       	std	Y+35, r24	; 0x23
    38f0:	9c a3       	std	Y+36, r25	; 0x24
    38f2:	ad a3       	std	Y+37, r26	; 0x25
    38f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38f6:	6b a1       	ldd	r22, Y+35	; 0x23
    38f8:	7c a1       	ldd	r23, Y+36	; 0x24
    38fa:	8d a1       	ldd	r24, Y+37	; 0x25
    38fc:	9e a1       	ldd	r25, Y+38	; 0x26
    38fe:	20 e0       	ldi	r18, 0x00	; 0
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	40 e8       	ldi	r20, 0x80	; 128
    3904:	5f e3       	ldi	r21, 0x3F	; 63
    3906:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    390a:	88 23       	and	r24, r24
    390c:	2c f4       	brge	.+10     	; 0x3918 <SetTime+0xcc>
		__ticks = 1;
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	9a a3       	std	Y+34, r25	; 0x22
    3914:	89 a3       	std	Y+33, r24	; 0x21
    3916:	3f c0       	rjmp	.+126    	; 0x3996 <SetTime+0x14a>
	else if (__tmp > 65535)
    3918:	6b a1       	ldd	r22, Y+35	; 0x23
    391a:	7c a1       	ldd	r23, Y+36	; 0x24
    391c:	8d a1       	ldd	r24, Y+37	; 0x25
    391e:	9e a1       	ldd	r25, Y+38	; 0x26
    3920:	20 e0       	ldi	r18, 0x00	; 0
    3922:	3f ef       	ldi	r19, 0xFF	; 255
    3924:	4f e7       	ldi	r20, 0x7F	; 127
    3926:	57 e4       	ldi	r21, 0x47	; 71
    3928:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    392c:	18 16       	cp	r1, r24
    392e:	4c f5       	brge	.+82     	; 0x3982 <SetTime+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3930:	6f a1       	ldd	r22, Y+39	; 0x27
    3932:	78 a5       	ldd	r23, Y+40	; 0x28
    3934:	89 a5       	ldd	r24, Y+41	; 0x29
    3936:	9a a5       	ldd	r25, Y+42	; 0x2a
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	40 e2       	ldi	r20, 0x20	; 32
    393e:	51 e4       	ldi	r21, 0x41	; 65
    3940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3944:	dc 01       	movw	r26, r24
    3946:	cb 01       	movw	r24, r22
    3948:	bc 01       	movw	r22, r24
    394a:	cd 01       	movw	r24, r26
    394c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	9a a3       	std	Y+34, r25	; 0x22
    3956:	89 a3       	std	Y+33, r24	; 0x21
    3958:	0f c0       	rjmp	.+30     	; 0x3978 <SetTime+0x12c>
    395a:	88 ec       	ldi	r24, 0xC8	; 200
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	98 a3       	std	Y+32, r25	; 0x20
    3960:	8f 8f       	std	Y+31, r24	; 0x1f
    3962:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3964:	98 a1       	ldd	r25, Y+32	; 0x20
    3966:	01 97       	sbiw	r24, 0x01	; 1
    3968:	f1 f7       	brne	.-4      	; 0x3966 <SetTime+0x11a>
    396a:	98 a3       	std	Y+32, r25	; 0x20
    396c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    396e:	89 a1       	ldd	r24, Y+33	; 0x21
    3970:	9a a1       	ldd	r25, Y+34	; 0x22
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	9a a3       	std	Y+34, r25	; 0x22
    3976:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3978:	89 a1       	ldd	r24, Y+33	; 0x21
    397a:	9a a1       	ldd	r25, Y+34	; 0x22
    397c:	00 97       	sbiw	r24, 0x00	; 0
    397e:	69 f7       	brne	.-38     	; 0x395a <SetTime+0x10e>
    3980:	14 c0       	rjmp	.+40     	; 0x39aa <SetTime+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3982:	6b a1       	ldd	r22, Y+35	; 0x23
    3984:	7c a1       	ldd	r23, Y+36	; 0x24
    3986:	8d a1       	ldd	r24, Y+37	; 0x25
    3988:	9e a1       	ldd	r25, Y+38	; 0x26
    398a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398e:	dc 01       	movw	r26, r24
    3990:	cb 01       	movw	r24, r22
    3992:	9a a3       	std	Y+34, r25	; 0x22
    3994:	89 a3       	std	Y+33, r24	; 0x21
    3996:	89 a1       	ldd	r24, Y+33	; 0x21
    3998:	9a a1       	ldd	r25, Y+34	; 0x22
    399a:	9e 8f       	std	Y+30, r25	; 0x1e
    399c:	8d 8f       	std	Y+29, r24	; 0x1d
    399e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39a2:	01 97       	sbiw	r24, 0x01	; 1
    39a4:	f1 f7       	brne	.-4      	; 0x39a2 <SetTime+0x156>
    39a6:	9e 8f       	std	Y+30, r25	; 0x1e
    39a8:	8d 8f       	std	Y+29, r24	; 0x1d

		u8Counter_loc++;
	}

	_delay_ms(1000);
	LCD_voidClrScr(0);
    39aa:	80 e0       	ldi	r24, 0x00	; 0
    39ac:	0e 94 44 1a 	call	0x3488	; 0x3488 <LCD_voidClrScr>
	u8Counter_loc=0;
    39b0:	1b a6       	std	Y+43, r1	; 0x2b

	LCD_voidSendString(0,"Set Minutes: ");
    39b2:	2b e7       	ldi	r18, 0x7B	; 123
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	80 e0       	ldi	r24, 0x00	; 0
    39b8:	b9 01       	movw	r22, r18
    39ba:	0e 94 17 1a 	call	0x342e	; 0x342e <LCD_voidSendString>
    39be:	28 c0       	rjmp	.+80     	; 0x3a10 <SetTime+0x1c4>

	while(u8Counter_loc<2)
	{
		PressedKey();
    39c0:	0e 94 13 1c 	call	0x3826	; 0x3826 <PressedKey>
		if (u8PressedKey >= '0' && u8PressedKey <= '9')
    39c4:	80 91 f9 00 	lds	r24, 0x00F9
    39c8:	80 33       	cpi	r24, 0x30	; 48
    39ca:	f8 f0       	brcs	.+62     	; 0x3a0a <SetTime+0x1be>
    39cc:	80 91 f9 00 	lds	r24, 0x00F9
    39d0:	8a 33       	cpi	r24, 0x3A	; 58
    39d2:	d8 f4       	brcc	.+54     	; 0x3a0a <SetTime+0x1be>
		{
			u8Mins = u8Mins*10 +(u8PressedKey-'0');
    39d4:	80 91 13 01 	lds	r24, 0x0113
    39d8:	88 2f       	mov	r24, r24
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	9c 01       	movw	r18, r24
    39de:	22 0f       	add	r18, r18
    39e0:	33 1f       	adc	r19, r19
    39e2:	c9 01       	movw	r24, r18
    39e4:	88 0f       	add	r24, r24
    39e6:	99 1f       	adc	r25, r25
    39e8:	88 0f       	add	r24, r24
    39ea:	99 1f       	adc	r25, r25
    39ec:	82 0f       	add	r24, r18
    39ee:	93 1f       	adc	r25, r19
    39f0:	98 2f       	mov	r25, r24
    39f2:	80 91 f9 00 	lds	r24, 0x00F9
    39f6:	89 0f       	add	r24, r25
    39f8:	80 53       	subi	r24, 0x30	; 48
    39fa:	80 93 13 01 	sts	0x0113, r24
			LCD_voidSendChar(0,u8PressedKey);
    39fe:	90 91 f9 00 	lds	r25, 0x00F9
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	69 2f       	mov	r22, r25
    3a06:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <LCD_voidSendChar>
		}

		u8Counter_loc++;
    3a0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a0c:	8f 5f       	subi	r24, 0xFF	; 255
    3a0e:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_voidClrScr(0);
	u8Counter_loc=0;

	LCD_voidSendString(0,"Set Minutes: ");

	while(u8Counter_loc<2)
    3a10:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a12:	82 30       	cpi	r24, 0x02	; 2
    3a14:	a8 f2       	brcs	.-86     	; 0x39c0 <SetTime+0x174>
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	aa e7       	ldi	r26, 0x7A	; 122
    3a1c:	b4 e4       	ldi	r27, 0x44	; 68
    3a1e:	89 8f       	std	Y+25, r24	; 0x19
    3a20:	9a 8f       	std	Y+26, r25	; 0x1a
    3a22:	ab 8f       	std	Y+27, r26	; 0x1b
    3a24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a26:	69 8d       	ldd	r22, Y+25	; 0x19
    3a28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	4a ef       	ldi	r20, 0xFA	; 250
    3a34:	54 e4       	ldi	r21, 0x44	; 68
    3a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	8d 8b       	std	Y+21, r24	; 0x15
    3a40:	9e 8b       	std	Y+22, r25	; 0x16
    3a42:	af 8b       	std	Y+23, r26	; 0x17
    3a44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a46:	6d 89       	ldd	r22, Y+21	; 0x15
    3a48:	7e 89       	ldd	r23, Y+22	; 0x16
    3a4a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a4c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	40 e8       	ldi	r20, 0x80	; 128
    3a54:	5f e3       	ldi	r21, 0x3F	; 63
    3a56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a5a:	88 23       	and	r24, r24
    3a5c:	2c f4       	brge	.+10     	; 0x3a68 <SetTime+0x21c>
		__ticks = 1;
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	9c 8b       	std	Y+20, r25	; 0x14
    3a64:	8b 8b       	std	Y+19, r24	; 0x13
    3a66:	3f c0       	rjmp	.+126    	; 0x3ae6 <SetTime+0x29a>
	else if (__tmp > 65535)
    3a68:	6d 89       	ldd	r22, Y+21	; 0x15
    3a6a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a70:	20 e0       	ldi	r18, 0x00	; 0
    3a72:	3f ef       	ldi	r19, 0xFF	; 255
    3a74:	4f e7       	ldi	r20, 0x7F	; 127
    3a76:	57 e4       	ldi	r21, 0x47	; 71
    3a78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a7c:	18 16       	cp	r1, r24
    3a7e:	4c f5       	brge	.+82     	; 0x3ad2 <SetTime+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a80:	69 8d       	ldd	r22, Y+25	; 0x19
    3a82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	40 e2       	ldi	r20, 0x20	; 32
    3a8e:	51 e4       	ldi	r21, 0x41	; 65
    3a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	bc 01       	movw	r22, r24
    3a9a:	cd 01       	movw	r24, r26
    3a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	9c 8b       	std	Y+20, r25	; 0x14
    3aa6:	8b 8b       	std	Y+19, r24	; 0x13
    3aa8:	0f c0       	rjmp	.+30     	; 0x3ac8 <SetTime+0x27c>
    3aaa:	88 ec       	ldi	r24, 0xC8	; 200
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	9a 8b       	std	Y+18, r25	; 0x12
    3ab0:	89 8b       	std	Y+17, r24	; 0x11
    3ab2:	89 89       	ldd	r24, Y+17	; 0x11
    3ab4:	9a 89       	ldd	r25, Y+18	; 0x12
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	f1 f7       	brne	.-4      	; 0x3ab6 <SetTime+0x26a>
    3aba:	9a 8b       	std	Y+18, r25	; 0x12
    3abc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3abe:	8b 89       	ldd	r24, Y+19	; 0x13
    3ac0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ac2:	01 97       	sbiw	r24, 0x01	; 1
    3ac4:	9c 8b       	std	Y+20, r25	; 0x14
    3ac6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aca:	9c 89       	ldd	r25, Y+20	; 0x14
    3acc:	00 97       	sbiw	r24, 0x00	; 0
    3ace:	69 f7       	brne	.-38     	; 0x3aaa <SetTime+0x25e>
    3ad0:	14 c0       	rjmp	.+40     	; 0x3afa <SetTime+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad2:	6d 89       	ldd	r22, Y+21	; 0x15
    3ad4:	7e 89       	ldd	r23, Y+22	; 0x16
    3ad6:	8f 89       	ldd	r24, Y+23	; 0x17
    3ad8:	98 8d       	ldd	r25, Y+24	; 0x18
    3ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	9c 8b       	std	Y+20, r25	; 0x14
    3ae4:	8b 8b       	std	Y+19, r24	; 0x13
    3ae6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ae8:	9c 89       	ldd	r25, Y+20	; 0x14
    3aea:	98 8b       	std	Y+16, r25	; 0x10
    3aec:	8f 87       	std	Y+15, r24	; 0x0f
    3aee:	8f 85       	ldd	r24, Y+15	; 0x0f
    3af0:	98 89       	ldd	r25, Y+16	; 0x10
    3af2:	01 97       	sbiw	r24, 0x01	; 1
    3af4:	f1 f7       	brne	.-4      	; 0x3af2 <SetTime+0x2a6>
    3af6:	98 8b       	std	Y+16, r25	; 0x10
    3af8:	8f 87       	std	Y+15, r24	; 0x0f
		}

		u8Counter_loc++;
	}
	_delay_ms(1000);
	LCD_voidClrScr(0);
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	0e 94 44 1a 	call	0x3488	; 0x3488 <LCD_voidClrScr>
	u8Counter_loc=0;
    3b00:	1b a6       	std	Y+43, r1	; 0x2b

	LCD_voidSendString(0,"Set Seconds: ");
    3b02:	29 e8       	ldi	r18, 0x89	; 137
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	80 e0       	ldi	r24, 0x00	; 0
    3b08:	b9 01       	movw	r22, r18
    3b0a:	0e 94 17 1a 	call	0x342e	; 0x342e <LCD_voidSendString>
    3b0e:	28 c0       	rjmp	.+80     	; 0x3b60 <SetTime+0x314>


	while(u8Counter_loc<2)
	{
		PressedKey();
    3b10:	0e 94 13 1c 	call	0x3826	; 0x3826 <PressedKey>
		if (u8PressedKey >= '0' && u8PressedKey <= '9')
    3b14:	80 91 f9 00 	lds	r24, 0x00F9
    3b18:	80 33       	cpi	r24, 0x30	; 48
    3b1a:	f8 f0       	brcs	.+62     	; 0x3b5a <SetTime+0x30e>
    3b1c:	80 91 f9 00 	lds	r24, 0x00F9
    3b20:	8a 33       	cpi	r24, 0x3A	; 58
    3b22:	d8 f4       	brcc	.+54     	; 0x3b5a <SetTime+0x30e>
		{
			u8Sec = u8Sec*10 +(u8PressedKey-'0');
    3b24:	80 91 11 01 	lds	r24, 0x0111
    3b28:	88 2f       	mov	r24, r24
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	9c 01       	movw	r18, r24
    3b2e:	22 0f       	add	r18, r18
    3b30:	33 1f       	adc	r19, r19
    3b32:	c9 01       	movw	r24, r18
    3b34:	88 0f       	add	r24, r24
    3b36:	99 1f       	adc	r25, r25
    3b38:	88 0f       	add	r24, r24
    3b3a:	99 1f       	adc	r25, r25
    3b3c:	82 0f       	add	r24, r18
    3b3e:	93 1f       	adc	r25, r19
    3b40:	98 2f       	mov	r25, r24
    3b42:	80 91 f9 00 	lds	r24, 0x00F9
    3b46:	89 0f       	add	r24, r25
    3b48:	80 53       	subi	r24, 0x30	; 48
    3b4a:	80 93 11 01 	sts	0x0111, r24
			LCD_voidSendChar(0,u8PressedKey);
    3b4e:	90 91 f9 00 	lds	r25, 0x00F9
    3b52:	80 e0       	ldi	r24, 0x00	; 0
    3b54:	69 2f       	mov	r22, r25
    3b56:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <LCD_voidSendChar>
		}

		u8Counter_loc++;
    3b5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b5c:	8f 5f       	subi	r24, 0xFF	; 255
    3b5e:	8b a7       	std	Y+43, r24	; 0x2b
	u8Counter_loc=0;

	LCD_voidSendString(0,"Set Seconds: ");


	while(u8Counter_loc<2)
    3b60:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b62:	82 30       	cpi	r24, 0x02	; 2
    3b64:	a8 f2       	brcs	.-86     	; 0x3b10 <SetTime+0x2c4>
    3b66:	80 e0       	ldi	r24, 0x00	; 0
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	aa e7       	ldi	r26, 0x7A	; 122
    3b6c:	b4 e4       	ldi	r27, 0x44	; 68
    3b6e:	8b 87       	std	Y+11, r24	; 0x0b
    3b70:	9c 87       	std	Y+12, r25	; 0x0c
    3b72:	ad 87       	std	Y+13, r26	; 0x0d
    3b74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b76:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b78:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	30 e0       	ldi	r19, 0x00	; 0
    3b82:	4a ef       	ldi	r20, 0xFA	; 250
    3b84:	54 e4       	ldi	r21, 0x44	; 68
    3b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	8f 83       	std	Y+7, r24	; 0x07
    3b90:	98 87       	std	Y+8, r25	; 0x08
    3b92:	a9 87       	std	Y+9, r26	; 0x09
    3b94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b96:	6f 81       	ldd	r22, Y+7	; 0x07
    3b98:	78 85       	ldd	r23, Y+8	; 0x08
    3b9a:	89 85       	ldd	r24, Y+9	; 0x09
    3b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	40 e8       	ldi	r20, 0x80	; 128
    3ba4:	5f e3       	ldi	r21, 0x3F	; 63
    3ba6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3baa:	88 23       	and	r24, r24
    3bac:	2c f4       	brge	.+10     	; 0x3bb8 <SetTime+0x36c>
		__ticks = 1;
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	9e 83       	std	Y+6, r25	; 0x06
    3bb4:	8d 83       	std	Y+5, r24	; 0x05
    3bb6:	3f c0       	rjmp	.+126    	; 0x3c36 <SetTime+0x3ea>
	else if (__tmp > 65535)
    3bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3bba:	78 85       	ldd	r23, Y+8	; 0x08
    3bbc:	89 85       	ldd	r24, Y+9	; 0x09
    3bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	3f ef       	ldi	r19, 0xFF	; 255
    3bc4:	4f e7       	ldi	r20, 0x7F	; 127
    3bc6:	57 e4       	ldi	r21, 0x47	; 71
    3bc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bcc:	18 16       	cp	r1, r24
    3bce:	4c f5       	brge	.+82     	; 0x3c22 <SetTime+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bd8:	20 e0       	ldi	r18, 0x00	; 0
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	40 e2       	ldi	r20, 0x20	; 32
    3bde:	51 e4       	ldi	r21, 0x41	; 65
    3be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be4:	dc 01       	movw	r26, r24
    3be6:	cb 01       	movw	r24, r22
    3be8:	bc 01       	movw	r22, r24
    3bea:	cd 01       	movw	r24, r26
    3bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	9e 83       	std	Y+6, r25	; 0x06
    3bf6:	8d 83       	std	Y+5, r24	; 0x05
    3bf8:	0f c0       	rjmp	.+30     	; 0x3c18 <SetTime+0x3cc>
    3bfa:	88 ec       	ldi	r24, 0xC8	; 200
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	9c 83       	std	Y+4, r25	; 0x04
    3c00:	8b 83       	std	Y+3, r24	; 0x03
    3c02:	8b 81       	ldd	r24, Y+3	; 0x03
    3c04:	9c 81       	ldd	r25, Y+4	; 0x04
    3c06:	01 97       	sbiw	r24, 0x01	; 1
    3c08:	f1 f7       	brne	.-4      	; 0x3c06 <SetTime+0x3ba>
    3c0a:	9c 83       	std	Y+4, r25	; 0x04
    3c0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c10:	9e 81       	ldd	r25, Y+6	; 0x06
    3c12:	01 97       	sbiw	r24, 0x01	; 1
    3c14:	9e 83       	std	Y+6, r25	; 0x06
    3c16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c18:	8d 81       	ldd	r24, Y+5	; 0x05
    3c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c1c:	00 97       	sbiw	r24, 0x00	; 0
    3c1e:	69 f7       	brne	.-38     	; 0x3bfa <SetTime+0x3ae>
    3c20:	14 c0       	rjmp	.+40     	; 0x3c4a <SetTime+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c22:	6f 81       	ldd	r22, Y+7	; 0x07
    3c24:	78 85       	ldd	r23, Y+8	; 0x08
    3c26:	89 85       	ldd	r24, Y+9	; 0x09
    3c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	9e 83       	std	Y+6, r25	; 0x06
    3c34:	8d 83       	std	Y+5, r24	; 0x05
    3c36:	8d 81       	ldd	r24, Y+5	; 0x05
    3c38:	9e 81       	ldd	r25, Y+6	; 0x06
    3c3a:	9a 83       	std	Y+2, r25	; 0x02
    3c3c:	89 83       	std	Y+1, r24	; 0x01
    3c3e:	89 81       	ldd	r24, Y+1	; 0x01
    3c40:	9a 81       	ldd	r25, Y+2	; 0x02
    3c42:	01 97       	sbiw	r24, 0x01	; 1
    3c44:	f1 f7       	brne	.-4      	; 0x3c42 <SetTime+0x3f6>
    3c46:	9a 83       	std	Y+2, r25	; 0x02
    3c48:	89 83       	std	Y+1, r24	; 0x01
		}

		u8Counter_loc++;
	}
	_delay_ms(1000);
	LCD_voidClrScr(0);
    3c4a:	80 e0       	ldi	r24, 0x00	; 0
    3c4c:	0e 94 44 1a 	call	0x3488	; 0x3488 <LCD_voidClrScr>
}
    3c50:	ab 96       	adiw	r28, 0x2b	; 43
    3c52:	0f b6       	in	r0, 0x3f	; 63
    3c54:	f8 94       	cli
    3c56:	de bf       	out	0x3e, r29	; 62
    3c58:	0f be       	out	0x3f, r0	; 63
    3c5a:	cd bf       	out	0x3d, r28	; 61
    3c5c:	cf 91       	pop	r28
    3c5e:	df 91       	pop	r29
    3c60:	08 95       	ret

00003c62 <Clock>:

void Clock(void)
{
    3c62:	df 93       	push	r29
    3c64:	cf 93       	push	r28
    3c66:	cd b7       	in	r28, 0x3d	; 61
    3c68:	de b7       	in	r29, 0x3e	; 62
	if (u8Sec<59)
    3c6a:	80 91 11 01 	lds	r24, 0x0111
    3c6e:	8b 33       	cpi	r24, 0x3B	; 59
    3c70:	30 f4       	brcc	.+12     	; 0x3c7e <Clock+0x1c>
	{
		u8Sec++;
    3c72:	80 91 11 01 	lds	r24, 0x0111
    3c76:	8f 5f       	subi	r24, 0xFF	; 255
    3c78:	80 93 11 01 	sts	0x0111, r24
    3c7c:	1a c0       	rjmp	.+52     	; 0x3cb2 <Clock+0x50>
	}
	else
	{
		u8Sec=0;
    3c7e:	10 92 11 01 	sts	0x0111, r1

		if (u8Mins<59)
    3c82:	80 91 13 01 	lds	r24, 0x0113
    3c86:	8b 33       	cpi	r24, 0x3B	; 59
    3c88:	30 f4       	brcc	.+12     	; 0x3c96 <Clock+0x34>
		{
			u8Mins++;
    3c8a:	80 91 13 01 	lds	r24, 0x0113
    3c8e:	8f 5f       	subi	r24, 0xFF	; 255
    3c90:	80 93 13 01 	sts	0x0113, r24
    3c94:	0e c0       	rjmp	.+28     	; 0x3cb2 <Clock+0x50>
		}
		else
		{
			u8Mins=0;
    3c96:	10 92 13 01 	sts	0x0113, r1

			if (u8Hrs<23)
    3c9a:	80 91 12 01 	lds	r24, 0x0112
    3c9e:	87 31       	cpi	r24, 0x17	; 23
    3ca0:	30 f4       	brcc	.+12     	; 0x3cae <Clock+0x4c>
			{
				u8Hrs++;
    3ca2:	80 91 12 01 	lds	r24, 0x0112
    3ca6:	8f 5f       	subi	r24, 0xFF	; 255
    3ca8:	80 93 12 01 	sts	0x0112, r24
    3cac:	02 c0       	rjmp	.+4      	; 0x3cb2 <Clock+0x50>
			}
			else
			{
				u8Hrs=0;
    3cae:	10 92 12 01 	sts	0x0112, r1
			}
		}
	}
}
    3cb2:	cf 91       	pop	r28
    3cb4:	df 91       	pop	r29
    3cb6:	08 95       	ret

00003cb8 <SendTime>:

void SendTime(void)
{
    3cb8:	0f 93       	push	r16
    3cba:	1f 93       	push	r17
    3cbc:	df 93       	push	r29
    3cbe:	cf 93       	push	r28
    3cc0:	cd b7       	in	r28, 0x3d	; 61
    3cc2:	de b7       	in	r29, 0x3e	; 62
    3cc4:	c4 55       	subi	r28, 0x54	; 84
    3cc6:	d0 40       	sbci	r29, 0x00	; 0
    3cc8:	0f b6       	in	r0, 0x3f	; 63
    3cca:	f8 94       	cli
    3ccc:	de bf       	out	0x3e, r29	; 62
    3cce:	0f be       	out	0x3f, r0	; 63
    3cd0:	cd bf       	out	0x3d, r28	; 61
	SEV_enuDisplay(0,(u8Hrs/10));
    3cd2:	80 91 12 01 	lds	r24, 0x0112
    3cd6:	9a e0       	ldi	r25, 0x0A	; 10
    3cd8:	69 2f       	mov	r22, r25
    3cda:	0e 94 f6 21 	call	0x43ec	; 0x43ec <__udivmodqi4>
    3cde:	28 2f       	mov	r18, r24
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	b9 01       	movw	r22, r18
    3ce8:	0e 94 3f 0b 	call	0x167e	; 0x167e <SEV_enuDisplay>
	SEV_enuEnable(0);
    3cec:	80 e0       	ldi	r24, 0x00	; 0
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	0e 94 0b 0c 	call	0x1816	; 0x1816 <SEV_enuEnable>
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	ef 5a       	subi	r30, 0xAF	; 175
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	80 e0       	ldi	r24, 0x00	; 0
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	a0 e4       	ldi	r26, 0x40	; 64
    3d00:	b0 e4       	ldi	r27, 0x40	; 64
    3d02:	80 83       	st	Z, r24
    3d04:	91 83       	std	Z+1, r25	; 0x01
    3d06:	a2 83       	std	Z+2, r26	; 0x02
    3d08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d0a:	8e 01       	movw	r16, r28
    3d0c:	03 5b       	subi	r16, 0xB3	; 179
    3d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d10:	fe 01       	movw	r30, r28
    3d12:	ef 5a       	subi	r30, 0xAF	; 175
    3d14:	ff 4f       	sbci	r31, 0xFF	; 255
    3d16:	60 81       	ld	r22, Z
    3d18:	71 81       	ldd	r23, Z+1	; 0x01
    3d1a:	82 81       	ldd	r24, Z+2	; 0x02
    3d1c:	93 81       	ldd	r25, Z+3	; 0x03
    3d1e:	20 e0       	ldi	r18, 0x00	; 0
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	4a ef       	ldi	r20, 0xFA	; 250
    3d24:	54 e4       	ldi	r21, 0x44	; 68
    3d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2a:	dc 01       	movw	r26, r24
    3d2c:	cb 01       	movw	r24, r22
    3d2e:	f8 01       	movw	r30, r16
    3d30:	80 83       	st	Z, r24
    3d32:	91 83       	std	Z+1, r25	; 0x01
    3d34:	a2 83       	std	Z+2, r26	; 0x02
    3d36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d38:	fe 01       	movw	r30, r28
    3d3a:	e3 5b       	subi	r30, 0xB3	; 179
    3d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3e:	60 81       	ld	r22, Z
    3d40:	71 81       	ldd	r23, Z+1	; 0x01
    3d42:	82 81       	ldd	r24, Z+2	; 0x02
    3d44:	93 81       	ldd	r25, Z+3	; 0x03
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	40 e8       	ldi	r20, 0x80	; 128
    3d4c:	5f e3       	ldi	r21, 0x3F	; 63
    3d4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d52:	88 23       	and	r24, r24
    3d54:	44 f4       	brge	.+16     	; 0x3d66 <SendTime+0xae>
		__ticks = 1;
    3d56:	fe 01       	movw	r30, r28
    3d58:	e5 5b       	subi	r30, 0xB5	; 181
    3d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	91 83       	std	Z+1, r25	; 0x01
    3d62:	80 83       	st	Z, r24
    3d64:	64 c0       	rjmp	.+200    	; 0x3e2e <SendTime+0x176>
	else if (__tmp > 65535)
    3d66:	fe 01       	movw	r30, r28
    3d68:	e3 5b       	subi	r30, 0xB3	; 179
    3d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6c:	60 81       	ld	r22, Z
    3d6e:	71 81       	ldd	r23, Z+1	; 0x01
    3d70:	82 81       	ldd	r24, Z+2	; 0x02
    3d72:	93 81       	ldd	r25, Z+3	; 0x03
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	3f ef       	ldi	r19, 0xFF	; 255
    3d78:	4f e7       	ldi	r20, 0x7F	; 127
    3d7a:	57 e4       	ldi	r21, 0x47	; 71
    3d7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d80:	18 16       	cp	r1, r24
    3d82:	0c f0       	brlt	.+2      	; 0x3d86 <SendTime+0xce>
    3d84:	43 c0       	rjmp	.+134    	; 0x3e0c <SendTime+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d86:	fe 01       	movw	r30, r28
    3d88:	ef 5a       	subi	r30, 0xAF	; 175
    3d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8c:	60 81       	ld	r22, Z
    3d8e:	71 81       	ldd	r23, Z+1	; 0x01
    3d90:	82 81       	ldd	r24, Z+2	; 0x02
    3d92:	93 81       	ldd	r25, Z+3	; 0x03
    3d94:	20 e0       	ldi	r18, 0x00	; 0
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	40 e2       	ldi	r20, 0x20	; 32
    3d9a:	51 e4       	ldi	r21, 0x41	; 65
    3d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da0:	dc 01       	movw	r26, r24
    3da2:	cb 01       	movw	r24, r22
    3da4:	8e 01       	movw	r16, r28
    3da6:	05 5b       	subi	r16, 0xB5	; 181
    3da8:	1f 4f       	sbci	r17, 0xFF	; 255
    3daa:	bc 01       	movw	r22, r24
    3dac:	cd 01       	movw	r24, r26
    3dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db2:	dc 01       	movw	r26, r24
    3db4:	cb 01       	movw	r24, r22
    3db6:	f8 01       	movw	r30, r16
    3db8:	91 83       	std	Z+1, r25	; 0x01
    3dba:	80 83       	st	Z, r24
    3dbc:	1f c0       	rjmp	.+62     	; 0x3dfc <SendTime+0x144>
    3dbe:	fe 01       	movw	r30, r28
    3dc0:	e7 5b       	subi	r30, 0xB7	; 183
    3dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc4:	88 ec       	ldi	r24, 0xC8	; 200
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	91 83       	std	Z+1, r25	; 0x01
    3dca:	80 83       	st	Z, r24
    3dcc:	fe 01       	movw	r30, r28
    3dce:	e7 5b       	subi	r30, 0xB7	; 183
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	80 81       	ld	r24, Z
    3dd4:	91 81       	ldd	r25, Z+1	; 0x01
    3dd6:	01 97       	sbiw	r24, 0x01	; 1
    3dd8:	f1 f7       	brne	.-4      	; 0x3dd6 <SendTime+0x11e>
    3dda:	fe 01       	movw	r30, r28
    3ddc:	e7 5b       	subi	r30, 0xB7	; 183
    3dde:	ff 4f       	sbci	r31, 0xFF	; 255
    3de0:	91 83       	std	Z+1, r25	; 0x01
    3de2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3de4:	de 01       	movw	r26, r28
    3de6:	a5 5b       	subi	r26, 0xB5	; 181
    3de8:	bf 4f       	sbci	r27, 0xFF	; 255
    3dea:	fe 01       	movw	r30, r28
    3dec:	e5 5b       	subi	r30, 0xB5	; 181
    3dee:	ff 4f       	sbci	r31, 0xFF	; 255
    3df0:	80 81       	ld	r24, Z
    3df2:	91 81       	ldd	r25, Z+1	; 0x01
    3df4:	01 97       	sbiw	r24, 0x01	; 1
    3df6:	11 96       	adiw	r26, 0x01	; 1
    3df8:	9c 93       	st	X, r25
    3dfa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dfc:	fe 01       	movw	r30, r28
    3dfe:	e5 5b       	subi	r30, 0xB5	; 181
    3e00:	ff 4f       	sbci	r31, 0xFF	; 255
    3e02:	80 81       	ld	r24, Z
    3e04:	91 81       	ldd	r25, Z+1	; 0x01
    3e06:	00 97       	sbiw	r24, 0x00	; 0
    3e08:	d1 f6       	brne	.-76     	; 0x3dbe <SendTime+0x106>
    3e0a:	27 c0       	rjmp	.+78     	; 0x3e5a <SendTime+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e0c:	8e 01       	movw	r16, r28
    3e0e:	05 5b       	subi	r16, 0xB5	; 181
    3e10:	1f 4f       	sbci	r17, 0xFF	; 255
    3e12:	fe 01       	movw	r30, r28
    3e14:	e3 5b       	subi	r30, 0xB3	; 179
    3e16:	ff 4f       	sbci	r31, 0xFF	; 255
    3e18:	60 81       	ld	r22, Z
    3e1a:	71 81       	ldd	r23, Z+1	; 0x01
    3e1c:	82 81       	ldd	r24, Z+2	; 0x02
    3e1e:	93 81       	ldd	r25, Z+3	; 0x03
    3e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e24:	dc 01       	movw	r26, r24
    3e26:	cb 01       	movw	r24, r22
    3e28:	f8 01       	movw	r30, r16
    3e2a:	91 83       	std	Z+1, r25	; 0x01
    3e2c:	80 83       	st	Z, r24
    3e2e:	de 01       	movw	r26, r28
    3e30:	a9 5b       	subi	r26, 0xB9	; 185
    3e32:	bf 4f       	sbci	r27, 0xFF	; 255
    3e34:	fe 01       	movw	r30, r28
    3e36:	e5 5b       	subi	r30, 0xB5	; 181
    3e38:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3a:	80 81       	ld	r24, Z
    3e3c:	91 81       	ldd	r25, Z+1	; 0x01
    3e3e:	8d 93       	st	X+, r24
    3e40:	9c 93       	st	X, r25
    3e42:	fe 01       	movw	r30, r28
    3e44:	e9 5b       	subi	r30, 0xB9	; 185
    3e46:	ff 4f       	sbci	r31, 0xFF	; 255
    3e48:	80 81       	ld	r24, Z
    3e4a:	91 81       	ldd	r25, Z+1	; 0x01
    3e4c:	01 97       	sbiw	r24, 0x01	; 1
    3e4e:	f1 f7       	brne	.-4      	; 0x3e4c <SendTime+0x194>
    3e50:	fe 01       	movw	r30, r28
    3e52:	e9 5b       	subi	r30, 0xB9	; 185
    3e54:	ff 4f       	sbci	r31, 0xFF	; 255
    3e56:	91 83       	std	Z+1, r25	; 0x01
    3e58:	80 83       	st	Z, r24
	_delay_ms(3);
	SEV_enuDisable(0);
    3e5a:	80 e0       	ldi	r24, 0x00	; 0
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	0e 94 6d 0c 	call	0x18da	; 0x18da <SEV_enuDisable>

	SEV_enuDisplay(1,(u8Hrs%10));
    3e62:	80 91 12 01 	lds	r24, 0x0112
    3e66:	9a e0       	ldi	r25, 0x0A	; 10
    3e68:	69 2f       	mov	r22, r25
    3e6a:	0e 94 f6 21 	call	0x43ec	; 0x43ec <__udivmodqi4>
    3e6e:	89 2f       	mov	r24, r25
    3e70:	28 2f       	mov	r18, r24
    3e72:	30 e0       	ldi	r19, 0x00	; 0
    3e74:	81 e0       	ldi	r24, 0x01	; 1
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	b9 01       	movw	r22, r18
    3e7a:	0e 94 3f 0b 	call	0x167e	; 0x167e <SEV_enuDisplay>
	SEV_enuEnable(1);
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	0e 94 0b 0c 	call	0x1816	; 0x1816 <SEV_enuEnable>
    3e86:	fe 01       	movw	r30, r28
    3e88:	ed 5b       	subi	r30, 0xBD	; 189
    3e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	a0 e4       	ldi	r26, 0x40	; 64
    3e92:	b0 e4       	ldi	r27, 0x40	; 64
    3e94:	80 83       	st	Z, r24
    3e96:	91 83       	std	Z+1, r25	; 0x01
    3e98:	a2 83       	std	Z+2, r26	; 0x02
    3e9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e9c:	8e 01       	movw	r16, r28
    3e9e:	01 5c       	subi	r16, 0xC1	; 193
    3ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea2:	fe 01       	movw	r30, r28
    3ea4:	ed 5b       	subi	r30, 0xBD	; 189
    3ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea8:	60 81       	ld	r22, Z
    3eaa:	71 81       	ldd	r23, Z+1	; 0x01
    3eac:	82 81       	ldd	r24, Z+2	; 0x02
    3eae:	93 81       	ldd	r25, Z+3	; 0x03
    3eb0:	20 e0       	ldi	r18, 0x00	; 0
    3eb2:	30 e0       	ldi	r19, 0x00	; 0
    3eb4:	4a ef       	ldi	r20, 0xFA	; 250
    3eb6:	54 e4       	ldi	r21, 0x44	; 68
    3eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ebc:	dc 01       	movw	r26, r24
    3ebe:	cb 01       	movw	r24, r22
    3ec0:	f8 01       	movw	r30, r16
    3ec2:	80 83       	st	Z, r24
    3ec4:	91 83       	std	Z+1, r25	; 0x01
    3ec6:	a2 83       	std	Z+2, r26	; 0x02
    3ec8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3eca:	fe 01       	movw	r30, r28
    3ecc:	ff 96       	adiw	r30, 0x3f	; 63
    3ece:	60 81       	ld	r22, Z
    3ed0:	71 81       	ldd	r23, Z+1	; 0x01
    3ed2:	82 81       	ldd	r24, Z+2	; 0x02
    3ed4:	93 81       	ldd	r25, Z+3	; 0x03
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	40 e8       	ldi	r20, 0x80	; 128
    3edc:	5f e3       	ldi	r21, 0x3F	; 63
    3ede:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ee2:	88 23       	and	r24, r24
    3ee4:	2c f4       	brge	.+10     	; 0x3ef0 <SendTime+0x238>
		__ticks = 1;
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	9e af       	std	Y+62, r25	; 0x3e
    3eec:	8d af       	std	Y+61, r24	; 0x3d
    3eee:	46 c0       	rjmp	.+140    	; 0x3f7c <SendTime+0x2c4>
	else if (__tmp > 65535)
    3ef0:	fe 01       	movw	r30, r28
    3ef2:	ff 96       	adiw	r30, 0x3f	; 63
    3ef4:	60 81       	ld	r22, Z
    3ef6:	71 81       	ldd	r23, Z+1	; 0x01
    3ef8:	82 81       	ldd	r24, Z+2	; 0x02
    3efa:	93 81       	ldd	r25, Z+3	; 0x03
    3efc:	20 e0       	ldi	r18, 0x00	; 0
    3efe:	3f ef       	ldi	r19, 0xFF	; 255
    3f00:	4f e7       	ldi	r20, 0x7F	; 127
    3f02:	57 e4       	ldi	r21, 0x47	; 71
    3f04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f08:	18 16       	cp	r1, r24
    3f0a:	64 f5       	brge	.+88     	; 0x3f64 <SendTime+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f0c:	fe 01       	movw	r30, r28
    3f0e:	ed 5b       	subi	r30, 0xBD	; 189
    3f10:	ff 4f       	sbci	r31, 0xFF	; 255
    3f12:	60 81       	ld	r22, Z
    3f14:	71 81       	ldd	r23, Z+1	; 0x01
    3f16:	82 81       	ldd	r24, Z+2	; 0x02
    3f18:	93 81       	ldd	r25, Z+3	; 0x03
    3f1a:	20 e0       	ldi	r18, 0x00	; 0
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	40 e2       	ldi	r20, 0x20	; 32
    3f20:	51 e4       	ldi	r21, 0x41	; 65
    3f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f26:	dc 01       	movw	r26, r24
    3f28:	cb 01       	movw	r24, r22
    3f2a:	bc 01       	movw	r22, r24
    3f2c:	cd 01       	movw	r24, r26
    3f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	9e af       	std	Y+62, r25	; 0x3e
    3f38:	8d af       	std	Y+61, r24	; 0x3d
    3f3a:	0f c0       	rjmp	.+30     	; 0x3f5a <SendTime+0x2a2>
    3f3c:	88 ec       	ldi	r24, 0xC8	; 200
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	9c af       	std	Y+60, r25	; 0x3c
    3f42:	8b af       	std	Y+59, r24	; 0x3b
    3f44:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f46:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f48:	01 97       	sbiw	r24, 0x01	; 1
    3f4a:	f1 f7       	brne	.-4      	; 0x3f48 <SendTime+0x290>
    3f4c:	9c af       	std	Y+60, r25	; 0x3c
    3f4e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f50:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f52:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f54:	01 97       	sbiw	r24, 0x01	; 1
    3f56:	9e af       	std	Y+62, r25	; 0x3e
    3f58:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f5e:	00 97       	sbiw	r24, 0x00	; 0
    3f60:	69 f7       	brne	.-38     	; 0x3f3c <SendTime+0x284>
    3f62:	16 c0       	rjmp	.+44     	; 0x3f90 <SendTime+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f64:	fe 01       	movw	r30, r28
    3f66:	ff 96       	adiw	r30, 0x3f	; 63
    3f68:	60 81       	ld	r22, Z
    3f6a:	71 81       	ldd	r23, Z+1	; 0x01
    3f6c:	82 81       	ldd	r24, Z+2	; 0x02
    3f6e:	93 81       	ldd	r25, Z+3	; 0x03
    3f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f74:	dc 01       	movw	r26, r24
    3f76:	cb 01       	movw	r24, r22
    3f78:	9e af       	std	Y+62, r25	; 0x3e
    3f7a:	8d af       	std	Y+61, r24	; 0x3d
    3f7c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f7e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f80:	9a af       	std	Y+58, r25	; 0x3a
    3f82:	89 af       	std	Y+57, r24	; 0x39
    3f84:	89 ad       	ldd	r24, Y+57	; 0x39
    3f86:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f88:	01 97       	sbiw	r24, 0x01	; 1
    3f8a:	f1 f7       	brne	.-4      	; 0x3f88 <SendTime+0x2d0>
    3f8c:	9a af       	std	Y+58, r25	; 0x3a
    3f8e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(3);
	SEV_enuDisable(1);
    3f90:	81 e0       	ldi	r24, 0x01	; 1
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	0e 94 6d 0c 	call	0x18da	; 0x18da <SEV_enuDisable>

	SEV_enuDisplay(2,(u8Mins/10));
    3f98:	80 91 13 01 	lds	r24, 0x0113
    3f9c:	9a e0       	ldi	r25, 0x0A	; 10
    3f9e:	69 2f       	mov	r22, r25
    3fa0:	0e 94 f6 21 	call	0x43ec	; 0x43ec <__udivmodqi4>
    3fa4:	28 2f       	mov	r18, r24
    3fa6:	30 e0       	ldi	r19, 0x00	; 0
    3fa8:	82 e0       	ldi	r24, 0x02	; 2
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	b9 01       	movw	r22, r18
    3fae:	0e 94 3f 0b 	call	0x167e	; 0x167e <SEV_enuDisplay>
	SEV_enuEnable(2);
    3fb2:	82 e0       	ldi	r24, 0x02	; 2
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	0e 94 0b 0c 	call	0x1816	; 0x1816 <SEV_enuEnable>
    3fba:	80 e0       	ldi	r24, 0x00	; 0
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	a0 e4       	ldi	r26, 0x40	; 64
    3fc0:	b0 e4       	ldi	r27, 0x40	; 64
    3fc2:	8d ab       	std	Y+53, r24	; 0x35
    3fc4:	9e ab       	std	Y+54, r25	; 0x36
    3fc6:	af ab       	std	Y+55, r26	; 0x37
    3fc8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fca:	6d a9       	ldd	r22, Y+53	; 0x35
    3fcc:	7e a9       	ldd	r23, Y+54	; 0x36
    3fce:	8f a9       	ldd	r24, Y+55	; 0x37
    3fd0:	98 ad       	ldd	r25, Y+56	; 0x38
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	4a ef       	ldi	r20, 0xFA	; 250
    3fd8:	54 e4       	ldi	r21, 0x44	; 68
    3fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	89 ab       	std	Y+49, r24	; 0x31
    3fe4:	9a ab       	std	Y+50, r25	; 0x32
    3fe6:	ab ab       	std	Y+51, r26	; 0x33
    3fe8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3fea:	69 a9       	ldd	r22, Y+49	; 0x31
    3fec:	7a a9       	ldd	r23, Y+50	; 0x32
    3fee:	8b a9       	ldd	r24, Y+51	; 0x33
    3ff0:	9c a9       	ldd	r25, Y+52	; 0x34
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	40 e8       	ldi	r20, 0x80	; 128
    3ff8:	5f e3       	ldi	r21, 0x3F	; 63
    3ffa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ffe:	88 23       	and	r24, r24
    4000:	2c f4       	brge	.+10     	; 0x400c <SendTime+0x354>
		__ticks = 1;
    4002:	81 e0       	ldi	r24, 0x01	; 1
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	98 ab       	std	Y+48, r25	; 0x30
    4008:	8f a7       	std	Y+47, r24	; 0x2f
    400a:	3f c0       	rjmp	.+126    	; 0x408a <SendTime+0x3d2>
	else if (__tmp > 65535)
    400c:	69 a9       	ldd	r22, Y+49	; 0x31
    400e:	7a a9       	ldd	r23, Y+50	; 0x32
    4010:	8b a9       	ldd	r24, Y+51	; 0x33
    4012:	9c a9       	ldd	r25, Y+52	; 0x34
    4014:	20 e0       	ldi	r18, 0x00	; 0
    4016:	3f ef       	ldi	r19, 0xFF	; 255
    4018:	4f e7       	ldi	r20, 0x7F	; 127
    401a:	57 e4       	ldi	r21, 0x47	; 71
    401c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4020:	18 16       	cp	r1, r24
    4022:	4c f5       	brge	.+82     	; 0x4076 <SendTime+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4024:	6d a9       	ldd	r22, Y+53	; 0x35
    4026:	7e a9       	ldd	r23, Y+54	; 0x36
    4028:	8f a9       	ldd	r24, Y+55	; 0x37
    402a:	98 ad       	ldd	r25, Y+56	; 0x38
    402c:	20 e0       	ldi	r18, 0x00	; 0
    402e:	30 e0       	ldi	r19, 0x00	; 0
    4030:	40 e2       	ldi	r20, 0x20	; 32
    4032:	51 e4       	ldi	r21, 0x41	; 65
    4034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4038:	dc 01       	movw	r26, r24
    403a:	cb 01       	movw	r24, r22
    403c:	bc 01       	movw	r22, r24
    403e:	cd 01       	movw	r24, r26
    4040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4044:	dc 01       	movw	r26, r24
    4046:	cb 01       	movw	r24, r22
    4048:	98 ab       	std	Y+48, r25	; 0x30
    404a:	8f a7       	std	Y+47, r24	; 0x2f
    404c:	0f c0       	rjmp	.+30     	; 0x406c <SendTime+0x3b4>
    404e:	88 ec       	ldi	r24, 0xC8	; 200
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	9e a7       	std	Y+46, r25	; 0x2e
    4054:	8d a7       	std	Y+45, r24	; 0x2d
    4056:	8d a5       	ldd	r24, Y+45	; 0x2d
    4058:	9e a5       	ldd	r25, Y+46	; 0x2e
    405a:	01 97       	sbiw	r24, 0x01	; 1
    405c:	f1 f7       	brne	.-4      	; 0x405a <SendTime+0x3a2>
    405e:	9e a7       	std	Y+46, r25	; 0x2e
    4060:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4062:	8f a5       	ldd	r24, Y+47	; 0x2f
    4064:	98 a9       	ldd	r25, Y+48	; 0x30
    4066:	01 97       	sbiw	r24, 0x01	; 1
    4068:	98 ab       	std	Y+48, r25	; 0x30
    406a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    406c:	8f a5       	ldd	r24, Y+47	; 0x2f
    406e:	98 a9       	ldd	r25, Y+48	; 0x30
    4070:	00 97       	sbiw	r24, 0x00	; 0
    4072:	69 f7       	brne	.-38     	; 0x404e <SendTime+0x396>
    4074:	14 c0       	rjmp	.+40     	; 0x409e <SendTime+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4076:	69 a9       	ldd	r22, Y+49	; 0x31
    4078:	7a a9       	ldd	r23, Y+50	; 0x32
    407a:	8b a9       	ldd	r24, Y+51	; 0x33
    407c:	9c a9       	ldd	r25, Y+52	; 0x34
    407e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4082:	dc 01       	movw	r26, r24
    4084:	cb 01       	movw	r24, r22
    4086:	98 ab       	std	Y+48, r25	; 0x30
    4088:	8f a7       	std	Y+47, r24	; 0x2f
    408a:	8f a5       	ldd	r24, Y+47	; 0x2f
    408c:	98 a9       	ldd	r25, Y+48	; 0x30
    408e:	9c a7       	std	Y+44, r25	; 0x2c
    4090:	8b a7       	std	Y+43, r24	; 0x2b
    4092:	8b a5       	ldd	r24, Y+43	; 0x2b
    4094:	9c a5       	ldd	r25, Y+44	; 0x2c
    4096:	01 97       	sbiw	r24, 0x01	; 1
    4098:	f1 f7       	brne	.-4      	; 0x4096 <SendTime+0x3de>
    409a:	9c a7       	std	Y+44, r25	; 0x2c
    409c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(3);
	SEV_enuDisable(2);
    409e:	82 e0       	ldi	r24, 0x02	; 2
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	0e 94 6d 0c 	call	0x18da	; 0x18da <SEV_enuDisable>

	SEV_enuDisplay(3,(u8Mins%10));
    40a6:	80 91 13 01 	lds	r24, 0x0113
    40aa:	9a e0       	ldi	r25, 0x0A	; 10
    40ac:	69 2f       	mov	r22, r25
    40ae:	0e 94 f6 21 	call	0x43ec	; 0x43ec <__udivmodqi4>
    40b2:	89 2f       	mov	r24, r25
    40b4:	28 2f       	mov	r18, r24
    40b6:	30 e0       	ldi	r19, 0x00	; 0
    40b8:	83 e0       	ldi	r24, 0x03	; 3
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	b9 01       	movw	r22, r18
    40be:	0e 94 3f 0b 	call	0x167e	; 0x167e <SEV_enuDisplay>
	SEV_enuEnable(3);
    40c2:	83 e0       	ldi	r24, 0x03	; 3
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	0e 94 0b 0c 	call	0x1816	; 0x1816 <SEV_enuEnable>
    40ca:	80 e0       	ldi	r24, 0x00	; 0
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	a0 e4       	ldi	r26, 0x40	; 64
    40d0:	b0 e4       	ldi	r27, 0x40	; 64
    40d2:	8f a3       	std	Y+39, r24	; 0x27
    40d4:	98 a7       	std	Y+40, r25	; 0x28
    40d6:	a9 a7       	std	Y+41, r26	; 0x29
    40d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40da:	6f a1       	ldd	r22, Y+39	; 0x27
    40dc:	78 a5       	ldd	r23, Y+40	; 0x28
    40de:	89 a5       	ldd	r24, Y+41	; 0x29
    40e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	4a ef       	ldi	r20, 0xFA	; 250
    40e8:	54 e4       	ldi	r21, 0x44	; 68
    40ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ee:	dc 01       	movw	r26, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	8b a3       	std	Y+35, r24	; 0x23
    40f4:	9c a3       	std	Y+36, r25	; 0x24
    40f6:	ad a3       	std	Y+37, r26	; 0x25
    40f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    40fa:	6b a1       	ldd	r22, Y+35	; 0x23
    40fc:	7c a1       	ldd	r23, Y+36	; 0x24
    40fe:	8d a1       	ldd	r24, Y+37	; 0x25
    4100:	9e a1       	ldd	r25, Y+38	; 0x26
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	40 e8       	ldi	r20, 0x80	; 128
    4108:	5f e3       	ldi	r21, 0x3F	; 63
    410a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    410e:	88 23       	and	r24, r24
    4110:	2c f4       	brge	.+10     	; 0x411c <SendTime+0x464>
		__ticks = 1;
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	9a a3       	std	Y+34, r25	; 0x22
    4118:	89 a3       	std	Y+33, r24	; 0x21
    411a:	3f c0       	rjmp	.+126    	; 0x419a <SendTime+0x4e2>
	else if (__tmp > 65535)
    411c:	6b a1       	ldd	r22, Y+35	; 0x23
    411e:	7c a1       	ldd	r23, Y+36	; 0x24
    4120:	8d a1       	ldd	r24, Y+37	; 0x25
    4122:	9e a1       	ldd	r25, Y+38	; 0x26
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	3f ef       	ldi	r19, 0xFF	; 255
    4128:	4f e7       	ldi	r20, 0x7F	; 127
    412a:	57 e4       	ldi	r21, 0x47	; 71
    412c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4130:	18 16       	cp	r1, r24
    4132:	4c f5       	brge	.+82     	; 0x4186 <SendTime+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4134:	6f a1       	ldd	r22, Y+39	; 0x27
    4136:	78 a5       	ldd	r23, Y+40	; 0x28
    4138:	89 a5       	ldd	r24, Y+41	; 0x29
    413a:	9a a5       	ldd	r25, Y+42	; 0x2a
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	40 e2       	ldi	r20, 0x20	; 32
    4142:	51 e4       	ldi	r21, 0x41	; 65
    4144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4148:	dc 01       	movw	r26, r24
    414a:	cb 01       	movw	r24, r22
    414c:	bc 01       	movw	r22, r24
    414e:	cd 01       	movw	r24, r26
    4150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	9a a3       	std	Y+34, r25	; 0x22
    415a:	89 a3       	std	Y+33, r24	; 0x21
    415c:	0f c0       	rjmp	.+30     	; 0x417c <SendTime+0x4c4>
    415e:	88 ec       	ldi	r24, 0xC8	; 200
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	98 a3       	std	Y+32, r25	; 0x20
    4164:	8f 8f       	std	Y+31, r24	; 0x1f
    4166:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4168:	98 a1       	ldd	r25, Y+32	; 0x20
    416a:	01 97       	sbiw	r24, 0x01	; 1
    416c:	f1 f7       	brne	.-4      	; 0x416a <SendTime+0x4b2>
    416e:	98 a3       	std	Y+32, r25	; 0x20
    4170:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4172:	89 a1       	ldd	r24, Y+33	; 0x21
    4174:	9a a1       	ldd	r25, Y+34	; 0x22
    4176:	01 97       	sbiw	r24, 0x01	; 1
    4178:	9a a3       	std	Y+34, r25	; 0x22
    417a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    417c:	89 a1       	ldd	r24, Y+33	; 0x21
    417e:	9a a1       	ldd	r25, Y+34	; 0x22
    4180:	00 97       	sbiw	r24, 0x00	; 0
    4182:	69 f7       	brne	.-38     	; 0x415e <SendTime+0x4a6>
    4184:	14 c0       	rjmp	.+40     	; 0x41ae <SendTime+0x4f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4186:	6b a1       	ldd	r22, Y+35	; 0x23
    4188:	7c a1       	ldd	r23, Y+36	; 0x24
    418a:	8d a1       	ldd	r24, Y+37	; 0x25
    418c:	9e a1       	ldd	r25, Y+38	; 0x26
    418e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4192:	dc 01       	movw	r26, r24
    4194:	cb 01       	movw	r24, r22
    4196:	9a a3       	std	Y+34, r25	; 0x22
    4198:	89 a3       	std	Y+33, r24	; 0x21
    419a:	89 a1       	ldd	r24, Y+33	; 0x21
    419c:	9a a1       	ldd	r25, Y+34	; 0x22
    419e:	9e 8f       	std	Y+30, r25	; 0x1e
    41a0:	8d 8f       	std	Y+29, r24	; 0x1d
    41a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41a6:	01 97       	sbiw	r24, 0x01	; 1
    41a8:	f1 f7       	brne	.-4      	; 0x41a6 <SendTime+0x4ee>
    41aa:	9e 8f       	std	Y+30, r25	; 0x1e
    41ac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3);
	SEV_enuDisable(3);
    41ae:	83 e0       	ldi	r24, 0x03	; 3
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	0e 94 6d 0c 	call	0x18da	; 0x18da <SEV_enuDisable>


	SEV_enuDisplay(4,(u8Sec/10));
    41b6:	80 91 11 01 	lds	r24, 0x0111
    41ba:	9a e0       	ldi	r25, 0x0A	; 10
    41bc:	69 2f       	mov	r22, r25
    41be:	0e 94 f6 21 	call	0x43ec	; 0x43ec <__udivmodqi4>
    41c2:	28 2f       	mov	r18, r24
    41c4:	30 e0       	ldi	r19, 0x00	; 0
    41c6:	84 e0       	ldi	r24, 0x04	; 4
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	b9 01       	movw	r22, r18
    41cc:	0e 94 3f 0b 	call	0x167e	; 0x167e <SEV_enuDisplay>
	SEV_enuEnable(4);
    41d0:	84 e0       	ldi	r24, 0x04	; 4
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <SEV_enuEnable>
    41d8:	80 e0       	ldi	r24, 0x00	; 0
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	a0 e4       	ldi	r26, 0x40	; 64
    41de:	b0 e4       	ldi	r27, 0x40	; 64
    41e0:	89 8f       	std	Y+25, r24	; 0x19
    41e2:	9a 8f       	std	Y+26, r25	; 0x1a
    41e4:	ab 8f       	std	Y+27, r26	; 0x1b
    41e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41e8:	69 8d       	ldd	r22, Y+25	; 0x19
    41ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41f0:	20 e0       	ldi	r18, 0x00	; 0
    41f2:	30 e0       	ldi	r19, 0x00	; 0
    41f4:	4a ef       	ldi	r20, 0xFA	; 250
    41f6:	54 e4       	ldi	r21, 0x44	; 68
    41f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41fc:	dc 01       	movw	r26, r24
    41fe:	cb 01       	movw	r24, r22
    4200:	8d 8b       	std	Y+21, r24	; 0x15
    4202:	9e 8b       	std	Y+22, r25	; 0x16
    4204:	af 8b       	std	Y+23, r26	; 0x17
    4206:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4208:	6d 89       	ldd	r22, Y+21	; 0x15
    420a:	7e 89       	ldd	r23, Y+22	; 0x16
    420c:	8f 89       	ldd	r24, Y+23	; 0x17
    420e:	98 8d       	ldd	r25, Y+24	; 0x18
    4210:	20 e0       	ldi	r18, 0x00	; 0
    4212:	30 e0       	ldi	r19, 0x00	; 0
    4214:	40 e8       	ldi	r20, 0x80	; 128
    4216:	5f e3       	ldi	r21, 0x3F	; 63
    4218:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    421c:	88 23       	and	r24, r24
    421e:	2c f4       	brge	.+10     	; 0x422a <SendTime+0x572>
		__ticks = 1;
    4220:	81 e0       	ldi	r24, 0x01	; 1
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	9c 8b       	std	Y+20, r25	; 0x14
    4226:	8b 8b       	std	Y+19, r24	; 0x13
    4228:	3f c0       	rjmp	.+126    	; 0x42a8 <SendTime+0x5f0>
	else if (__tmp > 65535)
    422a:	6d 89       	ldd	r22, Y+21	; 0x15
    422c:	7e 89       	ldd	r23, Y+22	; 0x16
    422e:	8f 89       	ldd	r24, Y+23	; 0x17
    4230:	98 8d       	ldd	r25, Y+24	; 0x18
    4232:	20 e0       	ldi	r18, 0x00	; 0
    4234:	3f ef       	ldi	r19, 0xFF	; 255
    4236:	4f e7       	ldi	r20, 0x7F	; 127
    4238:	57 e4       	ldi	r21, 0x47	; 71
    423a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    423e:	18 16       	cp	r1, r24
    4240:	4c f5       	brge	.+82     	; 0x4294 <SendTime+0x5dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4242:	69 8d       	ldd	r22, Y+25	; 0x19
    4244:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4246:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4248:	9c 8d       	ldd	r25, Y+28	; 0x1c
    424a:	20 e0       	ldi	r18, 0x00	; 0
    424c:	30 e0       	ldi	r19, 0x00	; 0
    424e:	40 e2       	ldi	r20, 0x20	; 32
    4250:	51 e4       	ldi	r21, 0x41	; 65
    4252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4256:	dc 01       	movw	r26, r24
    4258:	cb 01       	movw	r24, r22
    425a:	bc 01       	movw	r22, r24
    425c:	cd 01       	movw	r24, r26
    425e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4262:	dc 01       	movw	r26, r24
    4264:	cb 01       	movw	r24, r22
    4266:	9c 8b       	std	Y+20, r25	; 0x14
    4268:	8b 8b       	std	Y+19, r24	; 0x13
    426a:	0f c0       	rjmp	.+30     	; 0x428a <SendTime+0x5d2>
    426c:	88 ec       	ldi	r24, 0xC8	; 200
    426e:	90 e0       	ldi	r25, 0x00	; 0
    4270:	9a 8b       	std	Y+18, r25	; 0x12
    4272:	89 8b       	std	Y+17, r24	; 0x11
    4274:	89 89       	ldd	r24, Y+17	; 0x11
    4276:	9a 89       	ldd	r25, Y+18	; 0x12
    4278:	01 97       	sbiw	r24, 0x01	; 1
    427a:	f1 f7       	brne	.-4      	; 0x4278 <SendTime+0x5c0>
    427c:	9a 8b       	std	Y+18, r25	; 0x12
    427e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4280:	8b 89       	ldd	r24, Y+19	; 0x13
    4282:	9c 89       	ldd	r25, Y+20	; 0x14
    4284:	01 97       	sbiw	r24, 0x01	; 1
    4286:	9c 8b       	std	Y+20, r25	; 0x14
    4288:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    428a:	8b 89       	ldd	r24, Y+19	; 0x13
    428c:	9c 89       	ldd	r25, Y+20	; 0x14
    428e:	00 97       	sbiw	r24, 0x00	; 0
    4290:	69 f7       	brne	.-38     	; 0x426c <SendTime+0x5b4>
    4292:	14 c0       	rjmp	.+40     	; 0x42bc <SendTime+0x604>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4294:	6d 89       	ldd	r22, Y+21	; 0x15
    4296:	7e 89       	ldd	r23, Y+22	; 0x16
    4298:	8f 89       	ldd	r24, Y+23	; 0x17
    429a:	98 8d       	ldd	r25, Y+24	; 0x18
    429c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42a0:	dc 01       	movw	r26, r24
    42a2:	cb 01       	movw	r24, r22
    42a4:	9c 8b       	std	Y+20, r25	; 0x14
    42a6:	8b 8b       	std	Y+19, r24	; 0x13
    42a8:	8b 89       	ldd	r24, Y+19	; 0x13
    42aa:	9c 89       	ldd	r25, Y+20	; 0x14
    42ac:	98 8b       	std	Y+16, r25	; 0x10
    42ae:	8f 87       	std	Y+15, r24	; 0x0f
    42b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    42b2:	98 89       	ldd	r25, Y+16	; 0x10
    42b4:	01 97       	sbiw	r24, 0x01	; 1
    42b6:	f1 f7       	brne	.-4      	; 0x42b4 <SendTime+0x5fc>
    42b8:	98 8b       	std	Y+16, r25	; 0x10
    42ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	SEV_enuDisable(4);
    42bc:	84 e0       	ldi	r24, 0x04	; 4
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	0e 94 6d 0c 	call	0x18da	; 0x18da <SEV_enuDisable>

	SEV_enuDisplay(5,(u8Sec%10));
    42c4:	80 91 11 01 	lds	r24, 0x0111
    42c8:	9a e0       	ldi	r25, 0x0A	; 10
    42ca:	69 2f       	mov	r22, r25
    42cc:	0e 94 f6 21 	call	0x43ec	; 0x43ec <__udivmodqi4>
    42d0:	89 2f       	mov	r24, r25
    42d2:	28 2f       	mov	r18, r24
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	85 e0       	ldi	r24, 0x05	; 5
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	b9 01       	movw	r22, r18
    42dc:	0e 94 3f 0b 	call	0x167e	; 0x167e <SEV_enuDisplay>
	SEV_enuEnable(5);
    42e0:	85 e0       	ldi	r24, 0x05	; 5
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <SEV_enuEnable>
    42e8:	80 e0       	ldi	r24, 0x00	; 0
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	a0 e4       	ldi	r26, 0x40	; 64
    42ee:	b0 e4       	ldi	r27, 0x40	; 64
    42f0:	8b 87       	std	Y+11, r24	; 0x0b
    42f2:	9c 87       	std	Y+12, r25	; 0x0c
    42f4:	ad 87       	std	Y+13, r26	; 0x0d
    42f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    42fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    42fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    42fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4300:	20 e0       	ldi	r18, 0x00	; 0
    4302:	30 e0       	ldi	r19, 0x00	; 0
    4304:	4a ef       	ldi	r20, 0xFA	; 250
    4306:	54 e4       	ldi	r21, 0x44	; 68
    4308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    430c:	dc 01       	movw	r26, r24
    430e:	cb 01       	movw	r24, r22
    4310:	8f 83       	std	Y+7, r24	; 0x07
    4312:	98 87       	std	Y+8, r25	; 0x08
    4314:	a9 87       	std	Y+9, r26	; 0x09
    4316:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4318:	6f 81       	ldd	r22, Y+7	; 0x07
    431a:	78 85       	ldd	r23, Y+8	; 0x08
    431c:	89 85       	ldd	r24, Y+9	; 0x09
    431e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4320:	20 e0       	ldi	r18, 0x00	; 0
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	40 e8       	ldi	r20, 0x80	; 128
    4326:	5f e3       	ldi	r21, 0x3F	; 63
    4328:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    432c:	88 23       	and	r24, r24
    432e:	2c f4       	brge	.+10     	; 0x433a <SendTime+0x682>
		__ticks = 1;
    4330:	81 e0       	ldi	r24, 0x01	; 1
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	9e 83       	std	Y+6, r25	; 0x06
    4336:	8d 83       	std	Y+5, r24	; 0x05
    4338:	3f c0       	rjmp	.+126    	; 0x43b8 <SendTime+0x700>
	else if (__tmp > 65535)
    433a:	6f 81       	ldd	r22, Y+7	; 0x07
    433c:	78 85       	ldd	r23, Y+8	; 0x08
    433e:	89 85       	ldd	r24, Y+9	; 0x09
    4340:	9a 85       	ldd	r25, Y+10	; 0x0a
    4342:	20 e0       	ldi	r18, 0x00	; 0
    4344:	3f ef       	ldi	r19, 0xFF	; 255
    4346:	4f e7       	ldi	r20, 0x7F	; 127
    4348:	57 e4       	ldi	r21, 0x47	; 71
    434a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    434e:	18 16       	cp	r1, r24
    4350:	4c f5       	brge	.+82     	; 0x43a4 <SendTime+0x6ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4352:	6b 85       	ldd	r22, Y+11	; 0x0b
    4354:	7c 85       	ldd	r23, Y+12	; 0x0c
    4356:	8d 85       	ldd	r24, Y+13	; 0x0d
    4358:	9e 85       	ldd	r25, Y+14	; 0x0e
    435a:	20 e0       	ldi	r18, 0x00	; 0
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	40 e2       	ldi	r20, 0x20	; 32
    4360:	51 e4       	ldi	r21, 0x41	; 65
    4362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4366:	dc 01       	movw	r26, r24
    4368:	cb 01       	movw	r24, r22
    436a:	bc 01       	movw	r22, r24
    436c:	cd 01       	movw	r24, r26
    436e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4372:	dc 01       	movw	r26, r24
    4374:	cb 01       	movw	r24, r22
    4376:	9e 83       	std	Y+6, r25	; 0x06
    4378:	8d 83       	std	Y+5, r24	; 0x05
    437a:	0f c0       	rjmp	.+30     	; 0x439a <SendTime+0x6e2>
    437c:	88 ec       	ldi	r24, 0xC8	; 200
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	9c 83       	std	Y+4, r25	; 0x04
    4382:	8b 83       	std	Y+3, r24	; 0x03
    4384:	8b 81       	ldd	r24, Y+3	; 0x03
    4386:	9c 81       	ldd	r25, Y+4	; 0x04
    4388:	01 97       	sbiw	r24, 0x01	; 1
    438a:	f1 f7       	brne	.-4      	; 0x4388 <SendTime+0x6d0>
    438c:	9c 83       	std	Y+4, r25	; 0x04
    438e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4390:	8d 81       	ldd	r24, Y+5	; 0x05
    4392:	9e 81       	ldd	r25, Y+6	; 0x06
    4394:	01 97       	sbiw	r24, 0x01	; 1
    4396:	9e 83       	std	Y+6, r25	; 0x06
    4398:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    439a:	8d 81       	ldd	r24, Y+5	; 0x05
    439c:	9e 81       	ldd	r25, Y+6	; 0x06
    439e:	00 97       	sbiw	r24, 0x00	; 0
    43a0:	69 f7       	brne	.-38     	; 0x437c <SendTime+0x6c4>
    43a2:	14 c0       	rjmp	.+40     	; 0x43cc <SendTime+0x714>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a4:	6f 81       	ldd	r22, Y+7	; 0x07
    43a6:	78 85       	ldd	r23, Y+8	; 0x08
    43a8:	89 85       	ldd	r24, Y+9	; 0x09
    43aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b0:	dc 01       	movw	r26, r24
    43b2:	cb 01       	movw	r24, r22
    43b4:	9e 83       	std	Y+6, r25	; 0x06
    43b6:	8d 83       	std	Y+5, r24	; 0x05
    43b8:	8d 81       	ldd	r24, Y+5	; 0x05
    43ba:	9e 81       	ldd	r25, Y+6	; 0x06
    43bc:	9a 83       	std	Y+2, r25	; 0x02
    43be:	89 83       	std	Y+1, r24	; 0x01
    43c0:	89 81       	ldd	r24, Y+1	; 0x01
    43c2:	9a 81       	ldd	r25, Y+2	; 0x02
    43c4:	01 97       	sbiw	r24, 0x01	; 1
    43c6:	f1 f7       	brne	.-4      	; 0x43c4 <SendTime+0x70c>
    43c8:	9a 83       	std	Y+2, r25	; 0x02
    43ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	SEV_enuDisable(5);
    43cc:	85 e0       	ldi	r24, 0x05	; 5
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	0e 94 6d 0c 	call	0x18da	; 0x18da <SEV_enuDisable>


}
    43d4:	cc 5a       	subi	r28, 0xAC	; 172
    43d6:	df 4f       	sbci	r29, 0xFF	; 255
    43d8:	0f b6       	in	r0, 0x3f	; 63
    43da:	f8 94       	cli
    43dc:	de bf       	out	0x3e, r29	; 62
    43de:	0f be       	out	0x3f, r0	; 63
    43e0:	cd bf       	out	0x3d, r28	; 61
    43e2:	cf 91       	pop	r28
    43e4:	df 91       	pop	r29
    43e6:	1f 91       	pop	r17
    43e8:	0f 91       	pop	r16
    43ea:	08 95       	ret

000043ec <__udivmodqi4>:
    43ec:	99 1b       	sub	r25, r25
    43ee:	79 e0       	ldi	r23, 0x09	; 9
    43f0:	04 c0       	rjmp	.+8      	; 0x43fa <__udivmodqi4_ep>

000043f2 <__udivmodqi4_loop>:
    43f2:	99 1f       	adc	r25, r25
    43f4:	96 17       	cp	r25, r22
    43f6:	08 f0       	brcs	.+2      	; 0x43fa <__udivmodqi4_ep>
    43f8:	96 1b       	sub	r25, r22

000043fa <__udivmodqi4_ep>:
    43fa:	88 1f       	adc	r24, r24
    43fc:	7a 95       	dec	r23
    43fe:	c9 f7       	brne	.-14     	; 0x43f2 <__udivmodqi4_loop>
    4400:	80 95       	com	r24
    4402:	08 95       	ret

00004404 <__udivmodhi4>:
    4404:	aa 1b       	sub	r26, r26
    4406:	bb 1b       	sub	r27, r27
    4408:	51 e1       	ldi	r21, 0x11	; 17
    440a:	07 c0       	rjmp	.+14     	; 0x441a <__udivmodhi4_ep>

0000440c <__udivmodhi4_loop>:
    440c:	aa 1f       	adc	r26, r26
    440e:	bb 1f       	adc	r27, r27
    4410:	a6 17       	cp	r26, r22
    4412:	b7 07       	cpc	r27, r23
    4414:	10 f0       	brcs	.+4      	; 0x441a <__udivmodhi4_ep>
    4416:	a6 1b       	sub	r26, r22
    4418:	b7 0b       	sbc	r27, r23

0000441a <__udivmodhi4_ep>:
    441a:	88 1f       	adc	r24, r24
    441c:	99 1f       	adc	r25, r25
    441e:	5a 95       	dec	r21
    4420:	a9 f7       	brne	.-22     	; 0x440c <__udivmodhi4_loop>
    4422:	80 95       	com	r24
    4424:	90 95       	com	r25
    4426:	bc 01       	movw	r22, r24
    4428:	cd 01       	movw	r24, r26
    442a:	08 95       	ret

0000442c <__prologue_saves__>:
    442c:	2f 92       	push	r2
    442e:	3f 92       	push	r3
    4430:	4f 92       	push	r4
    4432:	5f 92       	push	r5
    4434:	6f 92       	push	r6
    4436:	7f 92       	push	r7
    4438:	8f 92       	push	r8
    443a:	9f 92       	push	r9
    443c:	af 92       	push	r10
    443e:	bf 92       	push	r11
    4440:	cf 92       	push	r12
    4442:	df 92       	push	r13
    4444:	ef 92       	push	r14
    4446:	ff 92       	push	r15
    4448:	0f 93       	push	r16
    444a:	1f 93       	push	r17
    444c:	cf 93       	push	r28
    444e:	df 93       	push	r29
    4450:	cd b7       	in	r28, 0x3d	; 61
    4452:	de b7       	in	r29, 0x3e	; 62
    4454:	ca 1b       	sub	r28, r26
    4456:	db 0b       	sbc	r29, r27
    4458:	0f b6       	in	r0, 0x3f	; 63
    445a:	f8 94       	cli
    445c:	de bf       	out	0x3e, r29	; 62
    445e:	0f be       	out	0x3f, r0	; 63
    4460:	cd bf       	out	0x3d, r28	; 61
    4462:	09 94       	ijmp

00004464 <__epilogue_restores__>:
    4464:	2a 88       	ldd	r2, Y+18	; 0x12
    4466:	39 88       	ldd	r3, Y+17	; 0x11
    4468:	48 88       	ldd	r4, Y+16	; 0x10
    446a:	5f 84       	ldd	r5, Y+15	; 0x0f
    446c:	6e 84       	ldd	r6, Y+14	; 0x0e
    446e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4470:	8c 84       	ldd	r8, Y+12	; 0x0c
    4472:	9b 84       	ldd	r9, Y+11	; 0x0b
    4474:	aa 84       	ldd	r10, Y+10	; 0x0a
    4476:	b9 84       	ldd	r11, Y+9	; 0x09
    4478:	c8 84       	ldd	r12, Y+8	; 0x08
    447a:	df 80       	ldd	r13, Y+7	; 0x07
    447c:	ee 80       	ldd	r14, Y+6	; 0x06
    447e:	fd 80       	ldd	r15, Y+5	; 0x05
    4480:	0c 81       	ldd	r16, Y+4	; 0x04
    4482:	1b 81       	ldd	r17, Y+3	; 0x03
    4484:	aa 81       	ldd	r26, Y+2	; 0x02
    4486:	b9 81       	ldd	r27, Y+1	; 0x01
    4488:	ce 0f       	add	r28, r30
    448a:	d1 1d       	adc	r29, r1
    448c:	0f b6       	in	r0, 0x3f	; 63
    448e:	f8 94       	cli
    4490:	de bf       	out	0x3e, r29	; 62
    4492:	0f be       	out	0x3f, r0	; 63
    4494:	cd bf       	out	0x3d, r28	; 61
    4496:	ed 01       	movw	r28, r26
    4498:	08 95       	ret

0000449a <_exit>:
    449a:	f8 94       	cli

0000449c <__stop_program>:
    449c:	ff cf       	rjmp	.-2      	; 0x449c <__stop_program>
